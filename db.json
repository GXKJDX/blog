{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1704989750716},{"_id":"source/_posts/test.md","hash":"be51b6bba8c0669919a5708b023f66182a4ee209","modified":1722008934720},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1704989745821},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1704989745823},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"fa2af55d8c61c53a364f4ea5fee417f35a173957","modified":1704989745822},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"6897a617c9fa46519ee265c0e69cf0d203318a43","modified":1704989745822},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"630df8733137bdf4f897e2bfa723ee9fb6adf38a","modified":1704989745873},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1704989745823},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1704989745825},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1704989745826},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1704989745826},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1704989745827},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1704989745829},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1704989745828},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1704989745829},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1704989745831},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1704989745830},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"d22ec72d00567db3782661ab5ccdb2475469da4c","modified":1704989745831},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"7f09aa0520688e2de50cb5b6631998682f9200f5","modified":1704989745833},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1704989745832},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1704989745833},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1704989745834},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1704989745835},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1704989745835},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1704989745838},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"088c2507d8f221416f99cf72d73641ba476a0f00","modified":1704989745837},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1704989745836},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1704989745837},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1704989745839},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1704989745840},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1704989745840},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1704989745841},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1704989745842},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1704989745842},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1704989745843},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"e41d1e0e3a9e15c30b7142491bed39dc50371e96","modified":1704989745845},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"424f6e94ced575b51bb7dcebdc0f25d4f4c99fe2","modified":1704989745844},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1704989745866},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"113012153240fa62a2dffc85b1dd6a476609670a","modified":1704989745875},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1704989745867},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1704989745845},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1704989745867},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1704989745870},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"99ad49cb7ee932c62ab0ef3a4de71f7e7e8c6bed","modified":1704989745868},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"ee1ac7ba2b46b7e59d46b20a42f0b590efd50359","modified":1704989745847},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1704989745871},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1704989745872},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1704989745848},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e1854416d49a56048a81ee9c08db69fb07698916","modified":1704989745849},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"403e107162a13bd8db2fc97f2f85df5b235f9308","modified":1704989745850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"d3f1ba491f5dc75f5fd657392293d52f8438ea1e","modified":1704989745849},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"165008f72ed77f0da879d132563d763369d26472","modified":1704989745851},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"57db292850074c1cfc779c6e9ebbc16a5eb6ab5a","modified":1704989745853},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"9fc18f1fd5bec16f8a3d30b0ce38458485c398b3","modified":1704989745852},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"892a5b524a508f395f6d72cb6721f0a3db14d4d7","modified":1704989745853},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1704989745855},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1704989745861},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1704989745862},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1704989745862},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1704989745877},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"98c85af1103af18b02c4f5f207fdfc48e207d794","modified":1704989745863},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"a4b3530798b0a7a23d31fb0b86b530fcc2fce87a","modified":1704989745891},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1704989745865},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1704989745863},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"15535c222f5a689c255c77722d2334bb1ac97a7e","modified":1704989745897},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"0b5bd5ce6783a733607a62c5273486d8893571c6","modified":1704989745902},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1704989745898},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1704989745856},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1704989745858},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"e78bda05fcf57b0e5e3a20cf3505d37fd69aaf46","modified":1704989745856},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1704989745857},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"fd5d3187f4e3d45f8af08f93b263fca7ed666c75","modified":1704989745860},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"ae76862ec15f0bc6e52ddce986305991ebff5b18","modified":1704989745879},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1704989745878},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1704989745880},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1704989745859},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1704989745881},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"04838b4b2ca4788700c48449e5fb6790d18c0f2e","modified":1704989745883},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"403c39c7bb1caa1f3b142207b59aa0567f898a31","modified":1704989745882},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1704989745889},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1704989745883},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1704989745885},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1704989745890},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1704989745888},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1704989745887},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"edf8a6a066f201b1ffad32c585bd79c9982d4433","modified":1704989745901},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1704989745899},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1704989745895},{"_id":"public/2024/01/12/hello-world/index.html","hash":"e5b3daa7d6c17addfc86f2bf7f195304efc9da10","modified":1724677215227},{"_id":"public/2024/01/11/test/index.html","hash":"3fe18a746d7564c87c97f286e856e7a373b77814","modified":1724677215227},{"_id":"public/archives/index.html","hash":"fab3f7cd679e9cba616d05bd5767022b3987b647","modified":1724677215227},{"_id":"public/archives/2024/index.html","hash":"b2194b33029ce251e63fcfd9fb39a282622ac0e1","modified":1724677215227},{"_id":"public/archives/2024/01/index.html","hash":"323597eb432d66239312ad163d19e5718d5726f8","modified":1724677215227},{"_id":"public/index.html","hash":"4fbf033ae20e6854cc5415008c5e89ea7df0e61a","modified":1724677215227},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1704991328191},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1704991328191},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1704991328191},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1704991328191},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1704991328191},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1704991328191},{"_id":"source/2024_1/Docker.md","hash":"d0fd047ad02bb302d2f54705c8c3ffbca6006deb","modified":1705680019820},{"_id":"source/2024_1/Nginx.md","hash":"64854b2d893322068a3aafdc5540ef646bd70997","modified":1705672961965},{"_id":"public/2024_1/Docker.html","hash":"e44c0f9f878721c5ab260dcd4729c50edbb33966","modified":1705764311671},{"_id":"public/2024_1/Nginx.html","hash":"c11d66ac83f13ed0afd61ac74b0c25c563618bb8","modified":1705764311671},{"_id":"source/_posts/Docker.md","hash":"121ed5d9462c2ca826275041155befc9f84ad07d","modified":1722008575878},{"_id":"source/_posts/Nginx.md","hash":"3741c1dedb58dfac68090d1650a65d00a25767df","modified":1722008517380},{"_id":"public/2024/01/20/Nginx/index.html","hash":"380f1ba531c011efd3ef45b4b815721b81a2bccc","modified":1724677215227},{"_id":"public/2024/01/20/Docker/index.html","hash":"e482ef351f366d7a5572ec2b1af4eaa7e9c03986","modified":1724677215227},{"_id":"source/_posts/Java 应用（jar 包）打包成 Docker 镜像.md","hash":"8b0dd78b0e3c210071bdf11b59099e1eac38e7e4","modified":1722438274046},{"_id":"source/_posts/Docker操作命令.md","hash":"3e9c91c7a649e65c1e98b2697cfac0490481870a","modified":1722008598359},{"_id":"source/_posts/为qinyunjian.cloud安装SSL证书.md","hash":"3d0eac2d24701fda79f1b87a73bd650c5fbf34ce","modified":1722008417311},{"_id":"source/_posts/Docker安装Redis.md","hash":"7562af24f6b37a009d6ea4de86356909057747f9","modified":1722008610787},{"_id":"source/_posts/为qinyunjian.cloud配置二级域名.md","hash":"b620bf8c84cb3d82b5ab99102cd85eaece972dae","modified":1722008370685},{"_id":"source/_posts/Docker安装MySQL.md","hash":"1ab2c52f5e01f90ccc86df0df8cc77b94b821a8e","modified":1722008605018},{"_id":"public/2024/06/05/Docker安装MySQL/index.html","hash":"2ab9ac43679dbecf7887f041394bc6d4c46592a0","modified":1717558157577},{"_id":"public/2024/06/05/为qinyunjian.cloud安装SSL证书/index.html","hash":"d517003eeda4707539b8468ea0530fe0633b2f91","modified":1717558157577},{"_id":"public/2024/06/05/Java 应用（jar 包）打包成 Docker 镜像/index.html","hash":"38d01007bcac0f78436879a792e76f206747ab49","modified":1717558157577},{"_id":"public/2024/06/05/Docker操作命令/index.html","hash":"c4bf246d0072b7ec420f91a7e3c28bc271b3fffe","modified":1717558157577},{"_id":"public/2024/06/05/Docker安装Redis/index.html","hash":"6f0d4dfce4602c7871f6f1c12c5a32c157584d9c","modified":1717558157577},{"_id":"public/archives/2024/06/index.html","hash":"8bcc0736f9f42f1b2be97d3902a0875caffef35c","modified":1724677215227},{"_id":"public/2024/06/05/为qinyunjian.cloud配置二级域名/index.html","hash":"26b99b98d0b5df9d203a078ef8316b79c503df4d","modified":1717558157577},{"_id":"public/2024/06/04/Docker安装Redis/index.html","hash":"ff2e702ee7c9ee40160f25c70a7eb6d8c5e8ab77","modified":1724677215227},{"_id":"public/2024/06/04/Docker安装MySQL/index.html","hash":"f01301cbd30f44c2f8bba1e5567db84f261c7b31","modified":1724677215227},{"_id":"public/2024/06/04/Java 应用（jar 包）打包成 Docker 镜像/index.html","hash":"decb08e692a281cfdbd11857ed0f9115c8749146","modified":1722437789887},{"_id":"public/2024/06/04/Docker操作命令/index.html","hash":"b9d88b9ab11da521e924cafae9529f98972403f9","modified":1720625872275},{"_id":"public/2024/06/04/为qinyunjian.cloud安装SSL证书/index.html","hash":"42f3afd7dcdee63343d768ab7ad1879eea1fb393","modified":1724677215227},{"_id":"public/2024/06/04/为qinyunjian.cloud配置二级域名/index.html","hash":"199b41dc710fdd493b2d2d5fedc8661006150bc8","modified":1724677215227},{"_id":"source/_posts/ubuntu-Docker安装minio.md","hash":"0f7f4e7d967492b0c62195eae7272d504e8b9589","modified":1722008656526},{"_id":"source/_posts/ubuntu-安装docker.md","hash":"cd0577631a6a3a84d92a1f83d4456b38c4e41da4","modified":1722008660081},{"_id":"source/_posts/ubuntu-Nginx和Certbot安装和minio的域名映射.md","hash":"8952b919aab010cdae3f4fa7149a55c8ed70aff9","modified":1723564798848},{"_id":"public/2024/06/12/ubuntu-Nginx和Certbot安装和minio的域名映射/index.html","hash":"bbe88bb593483e6d880b4d09a388946043186a5c","modified":1724677215227},{"_id":"public/2024/06/12/ubuntu-安装docker/index.html","hash":"20f57366efff7095a7c32919229e02f8dbb128b7","modified":1724677215227},{"_id":"public/2024/06/12/ubuntu-Docker安装minio/index.html","hash":"49687d6a8e1b1e79e7e67618dea524ff1d916d29","modified":1724677215227},{"_id":"public/archives/page/2/index.html","hash":"392a7c747cbe959ea9b13b39f7e9f089962d5ce5","modified":1724677215227},{"_id":"public/archives/2024/page/2/index.html","hash":"885d3db75c946c7e8a21b8cae4fc5d4a7b2f7f90","modified":1724677215227},{"_id":"public/page/2/index.html","hash":"00d339731421b42616b170d7707f007ce198c162","modified":1724677215227},{"_id":"public/tags/docker/index.html","hash":"0fbc455c910e601ebe5707fa1dc3a655d5199f86","modified":1724677215227},{"_id":"public/tags/nginx/index.html","hash":"2207248a3bda8cfe1aa66f6896534274eccfd980","modified":1724677215227},{"_id":"public/tags/ubuntu/index.html","hash":"2feb0c64c0bb5c3e75aa1b2c2defda7de4f40a12","modified":1724677215227},{"_id":"source/_posts/css布局.md","hash":"c2dc0ef3fd5013536494f675ca248c5441c97e41","modified":1722008687971},{"_id":"public/archives/2024/07/index.html","hash":"f4220e1866f7a52ce17b9b145f44a420e6ab0bf3","modified":1724677215227},{"_id":"public/2024/07/10/css布局/index.html","hash":"0f020f48c1e25025f97cd742b81874a8554d8475","modified":1720622916544},{"_id":"public/tags/css/index.html","hash":"e58339042f04317e5d191286961523a78d77188a","modified":1724677215227},{"_id":"public/2024/07/08/css布局/index.html","hash":"1e587948fdefe53ef0b82114bdf4fdbb0296aac5","modified":1724677215227},{"_id":"source/_posts/css伪类选择器.md","hash":"a97c2e0d46afe2ef1e906eafa269ddbb40b82aee","modified":1722008693872},{"_id":"public/2024/07/08/css伪类选择器/index.html","hash":"78db876eb75a0eb98bda258676e9a6145ef429a9","modified":1724677215227},{"_id":"source/_posts/Mybatis-Plus常见用法-Service_impl常用的基础方法.md","hash":"09915df26b88e97cb859e4d48805195e200240ff","modified":1722008715921},{"_id":"source/_posts/Mybatis-Plus常见用法-entity常用的注解.md","hash":"5f1241f5402dea513a8f476c71d7f113b52fdc4d","modified":1722008706863},{"_id":"source/_posts/Mybatis-Plus常见用法-Mapper常用的基础方法.md","hash":"a9bde58887c82bddb323f0ec380642dceb907102","modified":1722008722208},{"_id":"public/2024/07/24/Mybatis-Plus常见用法-Service_impl常用的基础方法/index.html","hash":"ce9a5b4c7c27e78b383c3680e77ec0d821b02777","modified":1724677215227},{"_id":"public/2024/07/24/Mybatis-Plus常见用法-Mapper常用的基础方法/index.html","hash":"5675051de80bb5d2f02b72fd326af24373c9546c","modified":1724677215227},{"_id":"public/2024/07/24/Mybatis-Plus常见用法-entity常用的注解/index.html","hash":"578bf954c3c1a9200f853edd7d2c596945b99349","modified":1724677215227},{"_id":"public/2024/06/02/Docker操作命令/index.html","hash":"e6cd23dada322787ccc2a4ed76b057d049f632a8","modified":1724677215227},{"_id":"public/tags/mybatisplus/index.html","hash":"53f11e53de27d76f25480b5f1010a71aae9477d5","modified":1724677215227},{"_id":"source/_posts/Mabatis-Plus常见用法-Mapper层自定义SQL和分页器.md","hash":"16135c4e1b443f29a80be178360821d29f7fc403","modified":1722438438366},{"_id":"source/_posts/MySQL 常用知识点.md","hash":"a32f8700e8e5ee0731bc268976c3f2c31fa52391","modified":1722436338086},{"_id":"source/_posts/Mybatis-Plus常见用法-条件构造器方法.md","hash":"017d492fcf7dd6a8d311d20d1e6999e82731321f","modified":1722438514010},{"_id":"public/2024/07/31/MySQL 常用知识点/index.html","hash":"449460774803dd370f9fffce0c4ad25f1b120f67","modified":1724677215227},{"_id":"public/2024/07/29/Mabatis-Plus常见用法-Mapper层自定义SQL和分页器/index.html","hash":"ca5a9ddab9570d02bdb048a48a5099911804d8f3","modified":1722437789887},{"_id":"public/2024/07/28/Mybatis-Plus常见用法-条件构造器方法/index.html","hash":"bb5162f7d4cb3509aabb0e4b5ff5ee3c2c4877d0","modified":1724677215227},{"_id":"public/archives/page/3/index.html","hash":"8fd0be6dd4fa98c810b1f15802038cf91d8aafe3","modified":1724677215227},{"_id":"public/archives/2024/page/3/index.html","hash":"1e3b8dda1ff0e637511ac32dc9f6a18a7a0f954f","modified":1724677215227},{"_id":"public/page/3/index.html","hash":"32b44d021b10126fd5930b64b6824d4c57e115f5","modified":1724677215227},{"_id":"public/tags/mysql/index.html","hash":"b5b8c1f08f20a05ca8ead7b24b73918ba5abe4d2","modified":1724677215227},{"_id":"public/2024/06/10/Java 应用（jar 包）打包成 Docker 镜像/index.html","hash":"12a11964ae9b2c10ea8e9d5fa98a196d1c70ea1c","modified":1724677215227},{"_id":"public/2024/07/28/Mabatis-Plus常见用法-Mapper层自定义SQL和分页器/index.html","hash":"888afb9cbb97a551f71555025741e3c10fa6fad6","modified":1724677215227},{"_id":"source/_posts/Java基础-面试题1-13.md","hash":"2ab9aea55e4c4df77c42a4747c49ebdba34d4d0f","modified":1724676543602},{"_id":"source/_posts/Java基础-面试题40-46.md","hash":"a32650fe9b2d7ecc70b45715fb6bb36587e5e1af","modified":1724676719216},{"_id":"source/_posts/Java基础-面试题14-26.md","hash":"b073380bf0507a053f464718a937010d05db7dc1","modified":1724676720281},{"_id":"source/_posts/Java基础-面试题27-39.md","hash":"4afca2e6b6fc206872644e68cad282f1506e5e77","modified":1724676721816},{"_id":"public/2024/08/27/Java基础-面试题40-46/index.html","hash":"4aeb05e4c3339ae7a58adcde1b6c2d1340c57345","modified":1724677215227},{"_id":"public/2024/08/25/Java基础-面试题14-26/index.html","hash":"1a7afda5645e2027317db4d780c7550ddc86ae6c","modified":1724677215227},{"_id":"public/2024/08/26/Java基础-面试题27-39/index.html","hash":"90fc950e5c311cb31e07d88adde628958b9b074c","modified":1724677215227},{"_id":"public/2024/08/24/Java基础-面试题1-13/index.html","hash":"c33b2b1f5c281976e3cfa16ef0442699adac371e","modified":1724677215227},{"_id":"public/tags/Java/index.html","hash":"2b7214021df9486c47884069f7713b4d67a2fd89","modified":1724677215227},{"_id":"public/archives/2024/08/index.html","hash":"0650d6ad7ce5c102157a3749a292a43475897361","modified":1724677215227}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-01-11T16:15:50.716Z","updated":"2024-01-11T16:15:50.716Z","comments":1,"layout":"post","photos":[],"_id":"clr9ftd2t00003ctl83y49rpu","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"test","date":"2024-01-11T14:37:50.000Z","_content":"\n### 页面信息初始化\nhexo学习记录\n\nhexo new \"test\" 生成新的文档\n\nhexo g 重新编译代码\n\nhexo s 运行项目\n\nhexo d 部署到git仓库\n\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2024-01-11 22:37:50\ntags:\n---\n\n### 页面信息初始化\nhexo学习记录\n\nhexo new \"test\" 生成新的文档\n\nhexo g 重新编译代码\n\nhexo s 运行项目\n\nhexo d 部署到git仓库\n\n","slug":"test","published":1,"updated":"2024-07-26T15:48:54.720Z","_id":"clr9ftd2z00013ctl6xdt5wfh","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"页面信息初始化\"><a href=\"#页面信息初始化\" class=\"headerlink\" title=\"页面信息初始化\"></a>页面信息初始化</h3><p>hexo学习记录</p>\n<p>hexo new “test” 生成新的文档</p>\n<p>hexo g 重新编译代码</p>\n<p>hexo s 运行项目</p>\n<p>hexo d 部署到git仓库</p>\n","excerpt":"","more":"<h3 id=\"页面信息初始化\"><a href=\"#页面信息初始化\" class=\"headerlink\" title=\"页面信息初始化\"></a>页面信息初始化</h3><p>hexo学习记录</p>\n<p>hexo new “test” 生成新的文档</p>\n<p>hexo g 重新编译代码</p>\n<p>hexo s 运行项目</p>\n<p>hexo d 部署到git仓库</p>\n"},{"title":"一、Docker安装","date":"2024-01-20T14:32:50.000Z","_content":"\n## 一、Docker学习记录\n\n对于刚开始学习 Docker 的初学者来说，以下是一系列推荐的步骤和概念，可以帮助您建立对 Docker 的基本理解并开始实践：\n\n### 1. 理解 Docker 的基本概念\n\n- **容器（Containers）**：轻量级、可执行的独立软件包，包含运行应用所需的一切：代码、运行时、库、环境变量和配置文件。\n- **镜像（Images）**：容器的蓝图，包含创建容器所需的指令。\n- **Dockerfile**：一种脚本，包含了一系列指令和步骤，用于创建 Docker 镜像。\n\n### 2. 运行您的第一个容器\n\n- 通过运行一个简单的容器来开始，例如 hello-world镜像：\n\n  ```shell\n  docker run hello-world\n  ```\n\n  这个命令会下载一个测试镜像并在容器中运行它。\n\n### 3. 学习 Docker 基本命令\n\n- 熟悉常用的 Docker 命令：\n  - `docker run`：运行一个容器。\n  - `docker ps`：列出运行中的容器。\n  - `docker images`：列出本地存储的镜像。\n  - `docker pull`：从 Docker Hub 下载一个镜像。\n  - `docker build`：根据 Dockerfile 构建一个新镜像。\n  - `docker rm`：删除一个或多个容器。\n  - `docker rmi`：删除一个或多个镜像。\n\n### 4. 实践构建自己的 Docker 镜像\n\n- 学习编写 Dockerfile 并构建自己的镜像：\n  - 创建一个简单的 Dockerfile，例如，设置基础镜像，复制文件，设置工作目录和启动命令。\n  - 使用 `docker build` 命令构建镜像。\n\n### 5. 学习容器的网络和存储\n\n- 了解如何使用 Docker 网络来连接容器。\n- 学习如何使用卷（Volumes）持久化容器数据。\n\n### 6. 使用 Docker Compose\n\n- Docker Compose 允许您使用 YAML 文件定义多容器应用。\n- 学习编写 `docker-compose.yml` 文件并使用 `docker-compose up` 和 `docker-compose down` 来管理应用。\n\n## 二、安装docker\n\n在 CentOS 7.8 上使用阿里云的 Docker 仓库来安装 Docker，您可以按照以下步骤进行：\n\n### 1：安装必要的依赖包\n\n首先，安装一些必要的软件包，这些软件包允许您通过 HTTPS 使用仓库：\n\n```sh\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n### 2：设置阿里云 Docker 仓库\n\n要使用阿里云的 Docker 仓库，您需要添加阿里云的 Docker 仓库地址。通常，您可以在阿里云的容器服务页面获取专属于您账户的 Docker 仓库地址。以下是一个示例命令，但请使用您的实际阿里云 Docker 仓库地址：\n\n```sh\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n### 3：安装 Docker Engine\n\n现在，从阿里云仓库安装 Docker：\n\n```sh\nsudo yum install docker-ce docker-ce-cli containerd.io\n```\n\n### 4：启动 Docker\n\n安装完成后，启动 Docker 服务：\n\n```sh\nsudo systemctl start docker\n```\n\n### 5：验证安装\n\n运行 hello-world 镜像来验证 Docker 是否正确安装，通常在这里是不会有信息响应，因为还需要拉取镜像：\n\n```sh\nsudo docker run hello-world\n```\n\n如果能看到欢迎信息，说明 Docker 已经正确安装和运行。\n\n### 6：使 Docker 开机自启\n\n为了确保 Docker 在启动时自动启动，请使用：\n\n```sh\nsudo systemctl enable docker\n```\n\n### 7：（可选）添加非 root 用户到 Docker 组\n\n为了避免每次运行 Docker 命令时都使用 `sudo`，您可以将您的用户添加到 `docker` 组：\n\n```sh\nsudo usermod -aG docker $USER\n```\n\n这里的 `-aG` 选项意味着将用户添加到 `docker` 组并保留其在其他组的成员资格。注销并重新登录后，您可以以非 root 用户身份运行 Docker 命令。\n\n","source":"_posts/Docker.md","raw":"---\ntitle: 一、Docker安装\ndate: 2024-01-20 22:32:50\ntags: docker\n---\n\n## 一、Docker学习记录\n\n对于刚开始学习 Docker 的初学者来说，以下是一系列推荐的步骤和概念，可以帮助您建立对 Docker 的基本理解并开始实践：\n\n### 1. 理解 Docker 的基本概念\n\n- **容器（Containers）**：轻量级、可执行的独立软件包，包含运行应用所需的一切：代码、运行时、库、环境变量和配置文件。\n- **镜像（Images）**：容器的蓝图，包含创建容器所需的指令。\n- **Dockerfile**：一种脚本，包含了一系列指令和步骤，用于创建 Docker 镜像。\n\n### 2. 运行您的第一个容器\n\n- 通过运行一个简单的容器来开始，例如 hello-world镜像：\n\n  ```shell\n  docker run hello-world\n  ```\n\n  这个命令会下载一个测试镜像并在容器中运行它。\n\n### 3. 学习 Docker 基本命令\n\n- 熟悉常用的 Docker 命令：\n  - `docker run`：运行一个容器。\n  - `docker ps`：列出运行中的容器。\n  - `docker images`：列出本地存储的镜像。\n  - `docker pull`：从 Docker Hub 下载一个镜像。\n  - `docker build`：根据 Dockerfile 构建一个新镜像。\n  - `docker rm`：删除一个或多个容器。\n  - `docker rmi`：删除一个或多个镜像。\n\n### 4. 实践构建自己的 Docker 镜像\n\n- 学习编写 Dockerfile 并构建自己的镜像：\n  - 创建一个简单的 Dockerfile，例如，设置基础镜像，复制文件，设置工作目录和启动命令。\n  - 使用 `docker build` 命令构建镜像。\n\n### 5. 学习容器的网络和存储\n\n- 了解如何使用 Docker 网络来连接容器。\n- 学习如何使用卷（Volumes）持久化容器数据。\n\n### 6. 使用 Docker Compose\n\n- Docker Compose 允许您使用 YAML 文件定义多容器应用。\n- 学习编写 `docker-compose.yml` 文件并使用 `docker-compose up` 和 `docker-compose down` 来管理应用。\n\n## 二、安装docker\n\n在 CentOS 7.8 上使用阿里云的 Docker 仓库来安装 Docker，您可以按照以下步骤进行：\n\n### 1：安装必要的依赖包\n\n首先，安装一些必要的软件包，这些软件包允许您通过 HTTPS 使用仓库：\n\n```sh\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n### 2：设置阿里云 Docker 仓库\n\n要使用阿里云的 Docker 仓库，您需要添加阿里云的 Docker 仓库地址。通常，您可以在阿里云的容器服务页面获取专属于您账户的 Docker 仓库地址。以下是一个示例命令，但请使用您的实际阿里云 Docker 仓库地址：\n\n```sh\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n### 3：安装 Docker Engine\n\n现在，从阿里云仓库安装 Docker：\n\n```sh\nsudo yum install docker-ce docker-ce-cli containerd.io\n```\n\n### 4：启动 Docker\n\n安装完成后，启动 Docker 服务：\n\n```sh\nsudo systemctl start docker\n```\n\n### 5：验证安装\n\n运行 hello-world 镜像来验证 Docker 是否正确安装，通常在这里是不会有信息响应，因为还需要拉取镜像：\n\n```sh\nsudo docker run hello-world\n```\n\n如果能看到欢迎信息，说明 Docker 已经正确安装和运行。\n\n### 6：使 Docker 开机自启\n\n为了确保 Docker 在启动时自动启动，请使用：\n\n```sh\nsudo systemctl enable docker\n```\n\n### 7：（可选）添加非 root 用户到 Docker 组\n\n为了避免每次运行 Docker 命令时都使用 `sudo`，您可以将您的用户添加到 `docker` 组：\n\n```sh\nsudo usermod -aG docker $USER\n```\n\n这里的 `-aG` 选项意味着将用户添加到 `docker` 组并保留其在其他组的成员资格。注销并重新登录后，您可以以非 root 用户身份运行 Docker 命令。\n\n","slug":"Docker","published":1,"updated":"2024-07-26T15:42:55.878Z","_id":"clrm844iy000010tl9xu0c4a6","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"一、Docker学习记录\"><a href=\"#一、Docker学习记录\" class=\"headerlink\" title=\"一、Docker学习记录\"></a>一、Docker学习记录</h2><p>对于刚开始学习 Docker 的初学者来说，以下是一系列推荐的步骤和概念，可以帮助您建立对 Docker 的基本理解并开始实践：</p>\n<h3 id=\"1-理解-Docker-的基本概念\"><a href=\"#1-理解-Docker-的基本概念\" class=\"headerlink\" title=\"1. 理解 Docker 的基本概念\"></a>1. 理解 Docker 的基本概念</h3><ul>\n<li><strong>容器（Containers）</strong>：轻量级、可执行的独立软件包，包含运行应用所需的一切：代码、运行时、库、环境变量和配置文件。</li>\n<li><strong>镜像（Images）</strong>：容器的蓝图，包含创建容器所需的指令。</li>\n<li><strong>Dockerfile</strong>：一种脚本，包含了一系列指令和步骤，用于创建 Docker 镜像。</li>\n</ul>\n<h3 id=\"2-运行您的第一个容器\"><a href=\"#2-运行您的第一个容器\" class=\"headerlink\" title=\"2. 运行您的第一个容器\"></a>2. 运行您的第一个容器</h3><ul>\n<li><p>通过运行一个简单的容器来开始，例如 hello-world镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会下载一个测试镜像并在容器中运行它。</p>\n</li>\n</ul>\n<h3 id=\"3-学习-Docker-基本命令\"><a href=\"#3-学习-Docker-基本命令\" class=\"headerlink\" title=\"3. 学习 Docker 基本命令\"></a>3. 学习 Docker 基本命令</h3><ul>\n<li>熟悉常用的 Docker 命令：<ul>\n<li><code>docker run</code>：运行一个容器。</li>\n<li><code>docker ps</code>：列出运行中的容器。</li>\n<li><code>docker images</code>：列出本地存储的镜像。</li>\n<li><code>docker pull</code>：从 Docker Hub 下载一个镜像。</li>\n<li><code>docker build</code>：根据 Dockerfile 构建一个新镜像。</li>\n<li><code>docker rm</code>：删除一个或多个容器。</li>\n<li><code>docker rmi</code>：删除一个或多个镜像。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-实践构建自己的-Docker-镜像\"><a href=\"#4-实践构建自己的-Docker-镜像\" class=\"headerlink\" title=\"4. 实践构建自己的 Docker 镜像\"></a>4. 实践构建自己的 Docker 镜像</h3><ul>\n<li>学习编写 Dockerfile 并构建自己的镜像：<ul>\n<li>创建一个简单的 Dockerfile，例如，设置基础镜像，复制文件，设置工作目录和启动命令。</li>\n<li>使用 <code>docker build</code> 命令构建镜像。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-学习容器的网络和存储\"><a href=\"#5-学习容器的网络和存储\" class=\"headerlink\" title=\"5. 学习容器的网络和存储\"></a>5. 学习容器的网络和存储</h3><ul>\n<li>了解如何使用 Docker 网络来连接容器。</li>\n<li>学习如何使用卷（Volumes）持久化容器数据。</li>\n</ul>\n<h3 id=\"6-使用-Docker-Compose\"><a href=\"#6-使用-Docker-Compose\" class=\"headerlink\" title=\"6. 使用 Docker Compose\"></a>6. 使用 Docker Compose</h3><ul>\n<li>Docker Compose 允许您使用 YAML 文件定义多容器应用。</li>\n<li>学习编写 <code>docker-compose.yml</code> 文件并使用 <code>docker-compose up</code> 和 <code>docker-compose down</code> 来管理应用。</li>\n</ul>\n<h2 id=\"二、安装docker\"><a href=\"#二、安装docker\" class=\"headerlink\" title=\"二、安装docker\"></a>二、安装docker</h2><p>在 CentOS 7.8 上使用阿里云的 Docker 仓库来安装 Docker，您可以按照以下步骤进行：</p>\n<h3 id=\"1：安装必要的依赖包\"><a href=\"#1：安装必要的依赖包\" class=\"headerlink\" title=\"1：安装必要的依赖包\"></a>1：安装必要的依赖包</h3><p>首先，安装一些必要的软件包，这些软件包允许您通过 HTTPS 使用仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2：设置阿里云-Docker-仓库\"><a href=\"#2：设置阿里云-Docker-仓库\" class=\"headerlink\" title=\"2：设置阿里云 Docker 仓库\"></a>2：设置阿里云 Docker 仓库</h3><p>要使用阿里云的 Docker 仓库，您需要添加阿里云的 Docker 仓库地址。通常，您可以在阿里云的容器服务页面获取专属于您账户的 Docker 仓库地址。以下是一个示例命令，但请使用您的实际阿里云 Docker 仓库地址：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3：安装-Docker-Engine\"><a href=\"#3：安装-Docker-Engine\" class=\"headerlink\" title=\"3：安装 Docker Engine\"></a>3：安装 Docker Engine</h3><p>现在，从阿里云仓库安装 Docker：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4：启动-Docker\"><a href=\"#4：启动-Docker\" class=\"headerlink\" title=\"4：启动 Docker\"></a>4：启动 Docker</h3><p>安装完成后，启动 Docker 服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5：验证安装\"><a href=\"#5：验证安装\" class=\"headerlink\" title=\"5：验证安装\"></a>5：验证安装</h3><p>运行 hello-world 镜像来验证 Docker 是否正确安装，通常在这里是不会有信息响应，因为还需要拉取镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>如果能看到欢迎信息，说明 Docker 已经正确安装和运行。</p>\n<h3 id=\"6：使-Docker-开机自启\"><a href=\"#6：使-Docker-开机自启\" class=\"headerlink\" title=\"6：使 Docker 开机自启\"></a>6：使 Docker 开机自启</h3><p>为了确保 Docker 在启动时自动启动，请使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7：（可选）添加非-root-用户到-Docker-组\"><a href=\"#7：（可选）添加非-root-用户到-Docker-组\" class=\"headerlink\" title=\"7：（可选）添加非 root 用户到 Docker 组\"></a>7：（可选）添加非 root 用户到 Docker 组</h3><p>为了避免每次运行 Docker 命令时都使用 <code>sudo</code>，您可以将您的用户添加到 <code>docker</code> 组：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>-aG</code> 选项意味着将用户添加到 <code>docker</code> 组并保留其在其他组的成员资格。注销并重新登录后，您可以以非 root 用户身份运行 Docker 命令。</p>\n","excerpt":"","more":"<h2 id=\"一、Docker学习记录\"><a href=\"#一、Docker学习记录\" class=\"headerlink\" title=\"一、Docker学习记录\"></a>一、Docker学习记录</h2><p>对于刚开始学习 Docker 的初学者来说，以下是一系列推荐的步骤和概念，可以帮助您建立对 Docker 的基本理解并开始实践：</p>\n<h3 id=\"1-理解-Docker-的基本概念\"><a href=\"#1-理解-Docker-的基本概念\" class=\"headerlink\" title=\"1. 理解 Docker 的基本概念\"></a>1. 理解 Docker 的基本概念</h3><ul>\n<li><strong>容器（Containers）</strong>：轻量级、可执行的独立软件包，包含运行应用所需的一切：代码、运行时、库、环境变量和配置文件。</li>\n<li><strong>镜像（Images）</strong>：容器的蓝图，包含创建容器所需的指令。</li>\n<li><strong>Dockerfile</strong>：一种脚本，包含了一系列指令和步骤，用于创建 Docker 镜像。</li>\n</ul>\n<h3 id=\"2-运行您的第一个容器\"><a href=\"#2-运行您的第一个容器\" class=\"headerlink\" title=\"2. 运行您的第一个容器\"></a>2. 运行您的第一个容器</h3><ul>\n<li><p>通过运行一个简单的容器来开始，例如 hello-world镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会下载一个测试镜像并在容器中运行它。</p>\n</li>\n</ul>\n<h3 id=\"3-学习-Docker-基本命令\"><a href=\"#3-学习-Docker-基本命令\" class=\"headerlink\" title=\"3. 学习 Docker 基本命令\"></a>3. 学习 Docker 基本命令</h3><ul>\n<li>熟悉常用的 Docker 命令：<ul>\n<li><code>docker run</code>：运行一个容器。</li>\n<li><code>docker ps</code>：列出运行中的容器。</li>\n<li><code>docker images</code>：列出本地存储的镜像。</li>\n<li><code>docker pull</code>：从 Docker Hub 下载一个镜像。</li>\n<li><code>docker build</code>：根据 Dockerfile 构建一个新镜像。</li>\n<li><code>docker rm</code>：删除一个或多个容器。</li>\n<li><code>docker rmi</code>：删除一个或多个镜像。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-实践构建自己的-Docker-镜像\"><a href=\"#4-实践构建自己的-Docker-镜像\" class=\"headerlink\" title=\"4. 实践构建自己的 Docker 镜像\"></a>4. 实践构建自己的 Docker 镜像</h3><ul>\n<li>学习编写 Dockerfile 并构建自己的镜像：<ul>\n<li>创建一个简单的 Dockerfile，例如，设置基础镜像，复制文件，设置工作目录和启动命令。</li>\n<li>使用 <code>docker build</code> 命令构建镜像。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-学习容器的网络和存储\"><a href=\"#5-学习容器的网络和存储\" class=\"headerlink\" title=\"5. 学习容器的网络和存储\"></a>5. 学习容器的网络和存储</h3><ul>\n<li>了解如何使用 Docker 网络来连接容器。</li>\n<li>学习如何使用卷（Volumes）持久化容器数据。</li>\n</ul>\n<h3 id=\"6-使用-Docker-Compose\"><a href=\"#6-使用-Docker-Compose\" class=\"headerlink\" title=\"6. 使用 Docker Compose\"></a>6. 使用 Docker Compose</h3><ul>\n<li>Docker Compose 允许您使用 YAML 文件定义多容器应用。</li>\n<li>学习编写 <code>docker-compose.yml</code> 文件并使用 <code>docker-compose up</code> 和 <code>docker-compose down</code> 来管理应用。</li>\n</ul>\n<h2 id=\"二、安装docker\"><a href=\"#二、安装docker\" class=\"headerlink\" title=\"二、安装docker\"></a>二、安装docker</h2><p>在 CentOS 7.8 上使用阿里云的 Docker 仓库来安装 Docker，您可以按照以下步骤进行：</p>\n<h3 id=\"1：安装必要的依赖包\"><a href=\"#1：安装必要的依赖包\" class=\"headerlink\" title=\"1：安装必要的依赖包\"></a>1：安装必要的依赖包</h3><p>首先，安装一些必要的软件包，这些软件包允许您通过 HTTPS 使用仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2：设置阿里云-Docker-仓库\"><a href=\"#2：设置阿里云-Docker-仓库\" class=\"headerlink\" title=\"2：设置阿里云 Docker 仓库\"></a>2：设置阿里云 Docker 仓库</h3><p>要使用阿里云的 Docker 仓库，您需要添加阿里云的 Docker 仓库地址。通常，您可以在阿里云的容器服务页面获取专属于您账户的 Docker 仓库地址。以下是一个示例命令，但请使用您的实际阿里云 Docker 仓库地址：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3：安装-Docker-Engine\"><a href=\"#3：安装-Docker-Engine\" class=\"headerlink\" title=\"3：安装 Docker Engine\"></a>3：安装 Docker Engine</h3><p>现在，从阿里云仓库安装 Docker：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4：启动-Docker\"><a href=\"#4：启动-Docker\" class=\"headerlink\" title=\"4：启动 Docker\"></a>4：启动 Docker</h3><p>安装完成后，启动 Docker 服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5：验证安装\"><a href=\"#5：验证安装\" class=\"headerlink\" title=\"5：验证安装\"></a>5：验证安装</h3><p>运行 hello-world 镜像来验证 Docker 是否正确安装，通常在这里是不会有信息响应，因为还需要拉取镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>如果能看到欢迎信息，说明 Docker 已经正确安装和运行。</p>\n<h3 id=\"6：使-Docker-开机自启\"><a href=\"#6：使-Docker-开机自启\" class=\"headerlink\" title=\"6：使 Docker 开机自启\"></a>6：使 Docker 开机自启</h3><p>为了确保 Docker 在启动时自动启动，请使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7：（可选）添加非-root-用户到-Docker-组\"><a href=\"#7：（可选）添加非-root-用户到-Docker-组\" class=\"headerlink\" title=\"7：（可选）添加非 root 用户到 Docker 组\"></a>7：（可选）添加非 root 用户到 Docker 组</h3><p>为了避免每次运行 Docker 命令时都使用 <code>sudo</code>，您可以将您的用户添加到 <code>docker</code> 组：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>-aG</code> 选项意味着将用户添加到 <code>docker</code> 组并保留其在其他组的成员资格。注销并重新登录后，您可以以非 root 用户身份运行 Docker 命令。</p>\n"},{"title":"一、Nginx基础知识","date":"2024-01-20T14:31:50.000Z","_content":"\n## 一、Nginx安装\n\n在 CentOS 7.8 上安装 Nginx 通常分为几个步骤：\n\n### 1. 更新系统\n\n在开始之前，最好确保所有的系统软件都是最新的。打开终端并输入以下命令来更新您的系统：\n\n```sh\nsudo yum update\n```\n\n这个命令会更新系统中所有已安装的软件包到最新版本。\n\n### 2. 添加 EPEL 仓库\n\n由于 Nginx 不包含在 CentOS 的默认 YUM 仓库中，您需要添加 EPEL（Extra Packages for Enterprise Linux）仓库来获取 Nginx 的软件包。运行以下命令添加 EPEL 仓库：\n\n```sh\nsudo yum install epel-release\n```\n\n### 3. 安装 Nginx\n\n现在 EPEL 仓库已经添加，您可以安装 Nginx 了。使用以下命令安装：\n\n```sh\nsudo yum install nginx\n```\n\n### 4. 启动 Nginx 服务\n\n安装完成后，您需要启动 Nginx 服务。使用以下命令：\n\n```sh\nsudo systemctl start nginx\n```\n\n### 5. 自动启动 Nginx\n\n为了确保 Nginx 在每次系统启动时自动运行，使用以下命令：\n\n```sh\nsudo systemctl enable nginx\n```\n\n### 6. 调整防火墙设置\n\n如果您的服务器运行的是 firewalld（CentOS 7 的默认防火墙），您需要允许 HTTP 和 HTTPS 流量。运行以下命令来更新防火墙设置：\n\n```sh\nsudo firewall-cmd --permanent --zone=public --add-service=http\nsudo firewall-cmd --permanent --zone=public --add-service=https\nsudo firewall-cmd --reload\n```\n\n### 7. 验证 Nginx 安装\n\n在浏览器中输入您服务器的 IP 地址。如果 Nginx 安装成功，您应该会看到 Nginx 的默认欢迎页面。\n\n### 8. 配置 Nginx（可选）\n\nNginx 的主配置文件位于 `/etc/nginx/nginx.conf`。您可能需要根据您的需求来编辑此文件。网站的配置文件通常位于 `/etc/nginx/conf.d/` 目录中。\n\n\n\n## 二、Nginx的配置文件\n\n已经成功的安装了Nginx，以下是对配置文件的解释说明。\n","source":"_posts/Nginx.md","raw":"---\ntitle: 一、Nginx基础知识\ndate: 2024-01-20 22:31:50\ntags: nginx\n---\n\n## 一、Nginx安装\n\n在 CentOS 7.8 上安装 Nginx 通常分为几个步骤：\n\n### 1. 更新系统\n\n在开始之前，最好确保所有的系统软件都是最新的。打开终端并输入以下命令来更新您的系统：\n\n```sh\nsudo yum update\n```\n\n这个命令会更新系统中所有已安装的软件包到最新版本。\n\n### 2. 添加 EPEL 仓库\n\n由于 Nginx 不包含在 CentOS 的默认 YUM 仓库中，您需要添加 EPEL（Extra Packages for Enterprise Linux）仓库来获取 Nginx 的软件包。运行以下命令添加 EPEL 仓库：\n\n```sh\nsudo yum install epel-release\n```\n\n### 3. 安装 Nginx\n\n现在 EPEL 仓库已经添加，您可以安装 Nginx 了。使用以下命令安装：\n\n```sh\nsudo yum install nginx\n```\n\n### 4. 启动 Nginx 服务\n\n安装完成后，您需要启动 Nginx 服务。使用以下命令：\n\n```sh\nsudo systemctl start nginx\n```\n\n### 5. 自动启动 Nginx\n\n为了确保 Nginx 在每次系统启动时自动运行，使用以下命令：\n\n```sh\nsudo systemctl enable nginx\n```\n\n### 6. 调整防火墙设置\n\n如果您的服务器运行的是 firewalld（CentOS 7 的默认防火墙），您需要允许 HTTP 和 HTTPS 流量。运行以下命令来更新防火墙设置：\n\n```sh\nsudo firewall-cmd --permanent --zone=public --add-service=http\nsudo firewall-cmd --permanent --zone=public --add-service=https\nsudo firewall-cmd --reload\n```\n\n### 7. 验证 Nginx 安装\n\n在浏览器中输入您服务器的 IP 地址。如果 Nginx 安装成功，您应该会看到 Nginx 的默认欢迎页面。\n\n### 8. 配置 Nginx（可选）\n\nNginx 的主配置文件位于 `/etc/nginx/nginx.conf`。您可能需要根据您的需求来编辑此文件。网站的配置文件通常位于 `/etc/nginx/conf.d/` 目录中。\n\n\n\n## 二、Nginx的配置文件\n\n已经成功的安装了Nginx，以下是对配置文件的解释说明。\n","slug":"Nginx","published":1,"updated":"2024-07-26T15:41:57.380Z","_id":"clrm844j1000110tlfro33mdo","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"一、Nginx安装\"><a href=\"#一、Nginx安装\" class=\"headerlink\" title=\"一、Nginx安装\"></a>一、Nginx安装</h2><p>在 CentOS 7.8 上安装 Nginx 通常分为几个步骤：</p>\n<h3 id=\"1-更新系统\"><a href=\"#1-更新系统\" class=\"headerlink\" title=\"1. 更新系统\"></a>1. 更新系统</h3><p>在开始之前，最好确保所有的系统软件都是最新的。打开终端并输入以下命令来更新您的系统：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum update</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会更新系统中所有已安装的软件包到最新版本。</p>\n<h3 id=\"2-添加-EPEL-仓库\"><a href=\"#2-添加-EPEL-仓库\" class=\"headerlink\" title=\"2. 添加 EPEL 仓库\"></a>2. 添加 EPEL 仓库</h3><p>由于 Nginx 不包含在 CentOS 的默认 YUM 仓库中，您需要添加 EPEL（Extra Packages for Enterprise Linux）仓库来获取 Nginx 的软件包。运行以下命令添加 EPEL 仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装-Nginx\"><a href=\"#3-安装-Nginx\" class=\"headerlink\" title=\"3. 安装 Nginx\"></a>3. 安装 Nginx</h3><p>现在 EPEL 仓库已经添加，您可以安装 Nginx 了。使用以下命令安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-启动-Nginx-服务\"><a href=\"#4-启动-Nginx-服务\" class=\"headerlink\" title=\"4. 启动 Nginx 服务\"></a>4. 启动 Nginx 服务</h3><p>安装完成后，您需要启动 Nginx 服务。使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-自动启动-Nginx\"><a href=\"#5-自动启动-Nginx\" class=\"headerlink\" title=\"5. 自动启动 Nginx\"></a>5. 自动启动 Nginx</h3><p>为了确保 Nginx 在每次系统启动时自动运行，使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-调整防火墙设置\"><a href=\"#6-调整防火墙设置\" class=\"headerlink\" title=\"6. 调整防火墙设置\"></a>6. 调整防火墙设置</h3><p>如果您的服务器运行的是 firewalld（CentOS 7 的默认防火墙），您需要允许 HTTP 和 HTTPS 流量。运行以下命令来更新防火墙设置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-验证-Nginx-安装\"><a href=\"#7-验证-Nginx-安装\" class=\"headerlink\" title=\"7. 验证 Nginx 安装\"></a>7. 验证 Nginx 安装</h3><p>在浏览器中输入您服务器的 IP 地址。如果 Nginx 安装成功，您应该会看到 Nginx 的默认欢迎页面。</p>\n<h3 id=\"8-配置-Nginx（可选）\"><a href=\"#8-配置-Nginx（可选）\" class=\"headerlink\" title=\"8. 配置 Nginx（可选）\"></a>8. 配置 Nginx（可选）</h3><p>Nginx 的主配置文件位于 <code>/etc/nginx/nginx.conf</code>。您可能需要根据您的需求来编辑此文件。网站的配置文件通常位于 <code>/etc/nginx/conf.d/</code> 目录中。</p>\n<h2 id=\"二、Nginx的配置文件\"><a href=\"#二、Nginx的配置文件\" class=\"headerlink\" title=\"二、Nginx的配置文件\"></a>二、Nginx的配置文件</h2><p>已经成功的安装了Nginx，以下是对配置文件的解释说明。</p>\n","excerpt":"","more":"<h2 id=\"一、Nginx安装\"><a href=\"#一、Nginx安装\" class=\"headerlink\" title=\"一、Nginx安装\"></a>一、Nginx安装</h2><p>在 CentOS 7.8 上安装 Nginx 通常分为几个步骤：</p>\n<h3 id=\"1-更新系统\"><a href=\"#1-更新系统\" class=\"headerlink\" title=\"1. 更新系统\"></a>1. 更新系统</h3><p>在开始之前，最好确保所有的系统软件都是最新的。打开终端并输入以下命令来更新您的系统：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum update</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会更新系统中所有已安装的软件包到最新版本。</p>\n<h3 id=\"2-添加-EPEL-仓库\"><a href=\"#2-添加-EPEL-仓库\" class=\"headerlink\" title=\"2. 添加 EPEL 仓库\"></a>2. 添加 EPEL 仓库</h3><p>由于 Nginx 不包含在 CentOS 的默认 YUM 仓库中，您需要添加 EPEL（Extra Packages for Enterprise Linux）仓库来获取 Nginx 的软件包。运行以下命令添加 EPEL 仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装-Nginx\"><a href=\"#3-安装-Nginx\" class=\"headerlink\" title=\"3. 安装 Nginx\"></a>3. 安装 Nginx</h3><p>现在 EPEL 仓库已经添加，您可以安装 Nginx 了。使用以下命令安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-启动-Nginx-服务\"><a href=\"#4-启动-Nginx-服务\" class=\"headerlink\" title=\"4. 启动 Nginx 服务\"></a>4. 启动 Nginx 服务</h3><p>安装完成后，您需要启动 Nginx 服务。使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-自动启动-Nginx\"><a href=\"#5-自动启动-Nginx\" class=\"headerlink\" title=\"5. 自动启动 Nginx\"></a>5. 自动启动 Nginx</h3><p>为了确保 Nginx 在每次系统启动时自动运行，使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-调整防火墙设置\"><a href=\"#6-调整防火墙设置\" class=\"headerlink\" title=\"6. 调整防火墙设置\"></a>6. 调整防火墙设置</h3><p>如果您的服务器运行的是 firewalld（CentOS 7 的默认防火墙），您需要允许 HTTP 和 HTTPS 流量。运行以下命令来更新防火墙设置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-验证-Nginx-安装\"><a href=\"#7-验证-Nginx-安装\" class=\"headerlink\" title=\"7. 验证 Nginx 安装\"></a>7. 验证 Nginx 安装</h3><p>在浏览器中输入您服务器的 IP 地址。如果 Nginx 安装成功，您应该会看到 Nginx 的默认欢迎页面。</p>\n<h3 id=\"8-配置-Nginx（可选）\"><a href=\"#8-配置-Nginx（可选）\" class=\"headerlink\" title=\"8. 配置 Nginx（可选）\"></a>8. 配置 Nginx（可选）</h3><p>Nginx 的主配置文件位于 <code>/etc/nginx/nginx.conf</code>。您可能需要根据您的需求来编辑此文件。网站的配置文件通常位于 <code>/etc/nginx/conf.d/</code> 目录中。</p>\n<h2 id=\"二、Nginx的配置文件\"><a href=\"#二、Nginx的配置文件\" class=\"headerlink\" title=\"二、Nginx的配置文件\"></a>二、Nginx的配置文件</h2><p>已经成功的安装了Nginx，以下是对配置文件的解释说明。</p>\n"},{"title":"四、Docker安装Redis","date":"2024-06-04T14:32:50.000Z","_content":"\n## docker安装Redis\n\n### 安装 Redis 使用 Docker 的步骤\n\n#### 步骤 1: 拉取 Redis 镜像\n\n首先，您需要从 Docker Hub 获取 Redis 的官方镜像。在您的终端或命令行界面中，运行以下命令：\n\n```\ndocker pull redis\n```\n\n这会下载 Redis 的最新官方镜像。如果您需要特定版本的 Redis，可以指定版本号，如 `redis:6.0`。\n\n#### 步骤 2: 运行 Redis 容器（含数据持久化）\n\n使用以下命令启动一个包含数据持久化的 Redis 容器实例：\n\n```sh\ndocker run --name my-redis -p 6379:6379 -d -v redis-data:/data redis\n```\n\n这里的命令参数解释如下：\n\n- `--name my-redis`：为容器指定一个名称，这里使用 `my-redis`。\n- `-p 6379:6379`：将容器的 6379 端口（Redis 的默认端口）映射到宿主机的同一端口。\n- `-d`：以“分离模式”运行容器，即容器在后台运行。\n- `-v redis-data:/data`：创建并挂载一个名为 `redis-data` 的 Docker 卷到容器的 `/data` 目录。Redis 会将其数据存储在 `/data` 目录中，从而实现数据的持久化。\n- `redis`：指定使用 Redis 的官方 Docker 镜像。\n\n#### 步骤 3: 验证 Redis 容器\n\n要确认 Redis 容器已经成功启动并运行，可以运行以下命令：\n\n```sh\ndocker ps\n```\n\n这将列出所有正在运行的容器。您应该能在列表中看到名为 `my-redis` 的容器。","source":"_posts/Docker安装Redis.md","raw":"---\ntitle: 四、Docker安装Redis\ndate: 2024-06-04 22:32:50\ntags: docker\n---\n\n## docker安装Redis\n\n### 安装 Redis 使用 Docker 的步骤\n\n#### 步骤 1: 拉取 Redis 镜像\n\n首先，您需要从 Docker Hub 获取 Redis 的官方镜像。在您的终端或命令行界面中，运行以下命令：\n\n```\ndocker pull redis\n```\n\n这会下载 Redis 的最新官方镜像。如果您需要特定版本的 Redis，可以指定版本号，如 `redis:6.0`。\n\n#### 步骤 2: 运行 Redis 容器（含数据持久化）\n\n使用以下命令启动一个包含数据持久化的 Redis 容器实例：\n\n```sh\ndocker run --name my-redis -p 6379:6379 -d -v redis-data:/data redis\n```\n\n这里的命令参数解释如下：\n\n- `--name my-redis`：为容器指定一个名称，这里使用 `my-redis`。\n- `-p 6379:6379`：将容器的 6379 端口（Redis 的默认端口）映射到宿主机的同一端口。\n- `-d`：以“分离模式”运行容器，即容器在后台运行。\n- `-v redis-data:/data`：创建并挂载一个名为 `redis-data` 的 Docker 卷到容器的 `/data` 目录。Redis 会将其数据存储在 `/data` 目录中，从而实现数据的持久化。\n- `redis`：指定使用 Redis 的官方 Docker 镜像。\n\n#### 步骤 3: 验证 Redis 容器\n\n要确认 Redis 容器已经成功启动并运行，可以运行以下命令：\n\n```sh\ndocker ps\n```\n\n这将列出所有正在运行的容器。您应该能在列表中看到名为 `my-redis` 的容器。","slug":"Docker安装Redis","published":1,"updated":"2024-07-26T15:43:30.787Z","_id":"clx19s5280000iotlazeca229","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"docker安装Redis\"><a href=\"#docker安装Redis\" class=\"headerlink\" title=\"docker安装Redis\"></a>docker安装Redis</h2><h3 id=\"安装-Redis-使用-Docker-的步骤\"><a href=\"#安装-Redis-使用-Docker-的步骤\" class=\"headerlink\" title=\"安装 Redis 使用 Docker 的步骤\"></a>安装 Redis 使用 Docker 的步骤</h3><h4 id=\"步骤-1-拉取-Redis-镜像\"><a href=\"#步骤-1-拉取-Redis-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 Redis 镜像\"></a>步骤 1: 拉取 Redis 镜像</h4><p>首先，您需要从 Docker Hub 获取 Redis 的官方镜像。在您的终端或命令行界面中，运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis</span><br></pre></td></tr></table></figure>\n\n<p>这会下载 Redis 的最新官方镜像。如果您需要特定版本的 Redis，可以指定版本号，如 <code>redis:6.0</code>。</p>\n<h4 id=\"步骤-2-运行-Redis-容器（含数据持久化）\"><a href=\"#步骤-2-运行-Redis-容器（含数据持久化）\" class=\"headerlink\" title=\"步骤 2: 运行 Redis 容器（含数据持久化）\"></a>步骤 2: 运行 Redis 容器（含数据持久化）</h4><p>使用以下命令启动一个包含数据持久化的 Redis 容器实例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-redis -p 6379:6379 -d -v redis-data:/data redis</span><br></pre></td></tr></table></figure>\n\n<p>这里的命令参数解释如下：</p>\n<ul>\n<li><code>--name my-redis</code>：为容器指定一个名称，这里使用 <code>my-redis</code>。</li>\n<li><code>-p 6379:6379</code>：将容器的 6379 端口（Redis 的默认端口）映射到宿主机的同一端口。</li>\n<li><code>-d</code>：以“分离模式”运行容器，即容器在后台运行。</li>\n<li><code>-v redis-data:/data</code>：创建并挂载一个名为 <code>redis-data</code> 的 Docker 卷到容器的 <code>/data</code> 目录。Redis 会将其数据存储在 <code>/data</code> 目录中，从而实现数据的持久化。</li>\n<li><code>redis</code>：指定使用 Redis 的官方 Docker 镜像。</li>\n</ul>\n<h4 id=\"步骤-3-验证-Redis-容器\"><a href=\"#步骤-3-验证-Redis-容器\" class=\"headerlink\" title=\"步骤 3: 验证 Redis 容器\"></a>步骤 3: 验证 Redis 容器</h4><p>要确认 Redis 容器已经成功启动并运行，可以运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p>这将列出所有正在运行的容器。您应该能在列表中看到名为 <code>my-redis</code> 的容器。</p>\n","excerpt":"","more":"<h2 id=\"docker安装Redis\"><a href=\"#docker安装Redis\" class=\"headerlink\" title=\"docker安装Redis\"></a>docker安装Redis</h2><h3 id=\"安装-Redis-使用-Docker-的步骤\"><a href=\"#安装-Redis-使用-Docker-的步骤\" class=\"headerlink\" title=\"安装 Redis 使用 Docker 的步骤\"></a>安装 Redis 使用 Docker 的步骤</h3><h4 id=\"步骤-1-拉取-Redis-镜像\"><a href=\"#步骤-1-拉取-Redis-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 Redis 镜像\"></a>步骤 1: 拉取 Redis 镜像</h4><p>首先，您需要从 Docker Hub 获取 Redis 的官方镜像。在您的终端或命令行界面中，运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis</span><br></pre></td></tr></table></figure>\n\n<p>这会下载 Redis 的最新官方镜像。如果您需要特定版本的 Redis，可以指定版本号，如 <code>redis:6.0</code>。</p>\n<h4 id=\"步骤-2-运行-Redis-容器（含数据持久化）\"><a href=\"#步骤-2-运行-Redis-容器（含数据持久化）\" class=\"headerlink\" title=\"步骤 2: 运行 Redis 容器（含数据持久化）\"></a>步骤 2: 运行 Redis 容器（含数据持久化）</h4><p>使用以下命令启动一个包含数据持久化的 Redis 容器实例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-redis -p 6379:6379 -d -v redis-data:/data redis</span><br></pre></td></tr></table></figure>\n\n<p>这里的命令参数解释如下：</p>\n<ul>\n<li><code>--name my-redis</code>：为容器指定一个名称，这里使用 <code>my-redis</code>。</li>\n<li><code>-p 6379:6379</code>：将容器的 6379 端口（Redis 的默认端口）映射到宿主机的同一端口。</li>\n<li><code>-d</code>：以“分离模式”运行容器，即容器在后台运行。</li>\n<li><code>-v redis-data:/data</code>：创建并挂载一个名为 <code>redis-data</code> 的 Docker 卷到容器的 <code>/data</code> 目录。Redis 会将其数据存储在 <code>/data</code> 目录中，从而实现数据的持久化。</li>\n<li><code>redis</code>：指定使用 Redis 的官方 Docker 镜像。</li>\n</ul>\n<h4 id=\"步骤-3-验证-Redis-容器\"><a href=\"#步骤-3-验证-Redis-容器\" class=\"headerlink\" title=\"步骤 3: 验证 Redis 容器\"></a>步骤 3: 验证 Redis 容器</h4><p>要确认 Redis 容器已经成功启动并运行，可以运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p>这将列出所有正在运行的容器。您应该能在列表中看到名为 <code>my-redis</code> 的容器。</p>\n"},{"title":"三、Docker安装MySQL","date":"2024-06-04T14:32:50.000Z","_content":"\n## Docker安装MySQL\n\n### 安装 MySQL 5.7 到 Docker 的详细步骤\n\n#### 步骤 1: 拉取 MySQL 5.7 镜像\n\n**操作**：\n\n```shell\ndocker pull mysql:5.7\n```\n\n**解释**：\n\n- 这个命令会从 Docker Hub（Docker 的官方镜像仓库）拉取 MySQL 5.7 的镜像。\n- `docker pull` 是 Docker 获取镜像的命令。\n- `mysql:5.7` 指定了您想要拉取的镜像及其版本。这里是 MySQL 版本 5.7。\n\n#### 注：可以先使用`docker volume create --name mysql-data`\n\n#### 步骤 2: 创建并运行 MySQL 容器\n\n**操作**：\n\n```shell\ndocker run --name mysql-5.7 -e MYSQL_ROOT_PASSWORD=123456 -v mysql-data:/var/lib/mysql -p 3306:3306 -d mysql:5.7\n```\n\n**解释**：\n\n- **docker run**：\n  - 这是 Docker 用于启动新容器的基本命令。\n- **--name mysql-5.7**：\n  - `--name` 选项用于为容器指定一个名字，这里命名为 `mysql-5.7`。这个名字用于识别和引用容器。\n- **-e MYSQL_ROOT_PASSWORD=123456**：\n  - `-e` 选项用于设置环境变量。在这个例子中，它设置了 MySQL 的 root 用户的密码为 `123456`。这是 MySQL 容器启动所必需的。\n- **-v mysql-data:/var/lib/mysql**：\n  - `-v` 选项用于挂载卷（volume）。这里，它将名为 `mysql-data` 的 Docker 卷挂载到容器内的 `/var/lib/mysql` 目录。\n  - 这个操作的目的是数据持久化。即使容器被停止或删除，存储在 `/var/lib/mysql` 目录中的数据（即 MySQL 数据库文件）仍然会保留在 `mysql-data` 卷中。\n- **-p 3306:3306**：\n  - `-p` 选项用于端口映射。这里，它将容器内的 3306 端口（MySQL 默认端口）映射到宿主机的同一端口。\n  - 这样可以通过宿主机的 3306 端口访问 MySQL 容器。\n- **-d**：\n  - `-d` 选项告诉 Docker 以“分离模式”运行容器，即在后台运行。\n- **mysql:5.7**：\n  - 指定使用的 Docker 镜像和标签。在这个例子中，它使用的是 MySQL 5.7 版本的官方 Docker 镜像\n\n#### 步骤 3: 检查容器运行状态\n\n**操作**：\n\n```shell\ndocker ps\n```\n\n**解释**：\n\n- 使用 `docker ps` 可以查看当前正在运行的 Docker 容器的列表。\n- 如果 MySQL 容器已经启动并运行，它应该会出现在这个列表中。\n\n#### 步骤4：重新安装MySQL\n\n停止原先`mysql-5.7`容器\n\n```shell\ndocker stop mysql-5.7\n```\n\n删除原先`mysql-5.7`容器\n\n```shell\ndocker rm mysql-5.7\n```\n\n因为我删除了原先的数据库，但是保留了宿主机上的配置，我希望把保留的配置和数据卷重新映射到容器，以下是我重新安装mysql-5.7的命令。\n\n```shell\ndocker run -d \\\n  --name mysql-5.7 \\\n  -e MYSQL_ROOT_PASSWORD=123456 \\\n  -p 3306:3306 \\\n  -v mysql-data:/var/lib/mysql \\\n  -v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf \\\n  mysql:5.7\n```\n\n这条命令通过Docker在后台启动了一个MySQL 5.7版本的容器，并配置了一系列的参数来满足特定的需求：\n\n* **`-d`**: 表示容器在后台运行，让终端不会被当前容器的运行过程占用。\n\n* **`--name mysql-5.7`**: 为运行的容器指定一个名字`mysql-5.7`，这样可以更方便地对容器进行管理。\n\n* **`-e MYSQL_ROOT_PASSWORD=my-secret-pw`**: 设置环境变量`MYSQL_ROOT_PASSWORD`为`my-secret-pw`，这是为MySQL的root用户设置的密码，是MySQL容器启动时必需的配置项。\n\n* **`-p 3306:3306`**: 将容器内部使用的3306端口映射到宿主机的3306端口上，这样可以通过宿主机的端口来访问容器中的MySQL服务。\n\n* **`-v mysql-data:/var/lib/mysql`**: 将名为`mysql-data`的数据卷挂载到容器内的`/var/lib/mysql`目录。这是MySQL存储数据的默认位置，使用数据卷可以实现数据的持久化保存，确保数据不会因为容器的删除而丢失，并且可以在不同的容器间共享这部分数据。\n\n* **`-v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf`**: 将宿主机上的`/etc/my.cnf.d/mysql-clients.cnf`配置文件挂载到容器内的`/etc/mysql/conf.d/mysql-clients.cnf`位置。这样做是为了自定义MySQL服务器的配置，可以根据需要调整MySQL的行为和性能。\n\n* **`mysql:5.7`**: 指定使用`mysql:5.7`镜像创建容器，这个镜像是MySQL官方发布的，版本号为5.7，保证了MySQL服务的标准化和一致性。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/about.png)\n\n","source":"_posts/Docker安装MySQL.md","raw":"---\ntitle: 三、Docker安装MySQL\ndate: 2024-06-04 22:32:50\ntags: docker\n---\n\n## Docker安装MySQL\n\n### 安装 MySQL 5.7 到 Docker 的详细步骤\n\n#### 步骤 1: 拉取 MySQL 5.7 镜像\n\n**操作**：\n\n```shell\ndocker pull mysql:5.7\n```\n\n**解释**：\n\n- 这个命令会从 Docker Hub（Docker 的官方镜像仓库）拉取 MySQL 5.7 的镜像。\n- `docker pull` 是 Docker 获取镜像的命令。\n- `mysql:5.7` 指定了您想要拉取的镜像及其版本。这里是 MySQL 版本 5.7。\n\n#### 注：可以先使用`docker volume create --name mysql-data`\n\n#### 步骤 2: 创建并运行 MySQL 容器\n\n**操作**：\n\n```shell\ndocker run --name mysql-5.7 -e MYSQL_ROOT_PASSWORD=123456 -v mysql-data:/var/lib/mysql -p 3306:3306 -d mysql:5.7\n```\n\n**解释**：\n\n- **docker run**：\n  - 这是 Docker 用于启动新容器的基本命令。\n- **--name mysql-5.7**：\n  - `--name` 选项用于为容器指定一个名字，这里命名为 `mysql-5.7`。这个名字用于识别和引用容器。\n- **-e MYSQL_ROOT_PASSWORD=123456**：\n  - `-e` 选项用于设置环境变量。在这个例子中，它设置了 MySQL 的 root 用户的密码为 `123456`。这是 MySQL 容器启动所必需的。\n- **-v mysql-data:/var/lib/mysql**：\n  - `-v` 选项用于挂载卷（volume）。这里，它将名为 `mysql-data` 的 Docker 卷挂载到容器内的 `/var/lib/mysql` 目录。\n  - 这个操作的目的是数据持久化。即使容器被停止或删除，存储在 `/var/lib/mysql` 目录中的数据（即 MySQL 数据库文件）仍然会保留在 `mysql-data` 卷中。\n- **-p 3306:3306**：\n  - `-p` 选项用于端口映射。这里，它将容器内的 3306 端口（MySQL 默认端口）映射到宿主机的同一端口。\n  - 这样可以通过宿主机的 3306 端口访问 MySQL 容器。\n- **-d**：\n  - `-d` 选项告诉 Docker 以“分离模式”运行容器，即在后台运行。\n- **mysql:5.7**：\n  - 指定使用的 Docker 镜像和标签。在这个例子中，它使用的是 MySQL 5.7 版本的官方 Docker 镜像\n\n#### 步骤 3: 检查容器运行状态\n\n**操作**：\n\n```shell\ndocker ps\n```\n\n**解释**：\n\n- 使用 `docker ps` 可以查看当前正在运行的 Docker 容器的列表。\n- 如果 MySQL 容器已经启动并运行，它应该会出现在这个列表中。\n\n#### 步骤4：重新安装MySQL\n\n停止原先`mysql-5.7`容器\n\n```shell\ndocker stop mysql-5.7\n```\n\n删除原先`mysql-5.7`容器\n\n```shell\ndocker rm mysql-5.7\n```\n\n因为我删除了原先的数据库，但是保留了宿主机上的配置，我希望把保留的配置和数据卷重新映射到容器，以下是我重新安装mysql-5.7的命令。\n\n```shell\ndocker run -d \\\n  --name mysql-5.7 \\\n  -e MYSQL_ROOT_PASSWORD=123456 \\\n  -p 3306:3306 \\\n  -v mysql-data:/var/lib/mysql \\\n  -v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf \\\n  mysql:5.7\n```\n\n这条命令通过Docker在后台启动了一个MySQL 5.7版本的容器，并配置了一系列的参数来满足特定的需求：\n\n* **`-d`**: 表示容器在后台运行，让终端不会被当前容器的运行过程占用。\n\n* **`--name mysql-5.7`**: 为运行的容器指定一个名字`mysql-5.7`，这样可以更方便地对容器进行管理。\n\n* **`-e MYSQL_ROOT_PASSWORD=my-secret-pw`**: 设置环境变量`MYSQL_ROOT_PASSWORD`为`my-secret-pw`，这是为MySQL的root用户设置的密码，是MySQL容器启动时必需的配置项。\n\n* **`-p 3306:3306`**: 将容器内部使用的3306端口映射到宿主机的3306端口上，这样可以通过宿主机的端口来访问容器中的MySQL服务。\n\n* **`-v mysql-data:/var/lib/mysql`**: 将名为`mysql-data`的数据卷挂载到容器内的`/var/lib/mysql`目录。这是MySQL存储数据的默认位置，使用数据卷可以实现数据的持久化保存，确保数据不会因为容器的删除而丢失，并且可以在不同的容器间共享这部分数据。\n\n* **`-v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf`**: 将宿主机上的`/etc/my.cnf.d/mysql-clients.cnf`配置文件挂载到容器内的`/etc/mysql/conf.d/mysql-clients.cnf`位置。这样做是为了自定义MySQL服务器的配置，可以根据需要调整MySQL的行为和性能。\n\n* **`mysql:5.7`**: 指定使用`mysql:5.7`镜像创建容器，这个镜像是MySQL官方发布的，版本号为5.7，保证了MySQL服务的标准化和一致性。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/about.png)\n\n","slug":"Docker安装MySQL","published":1,"updated":"2024-07-26T15:43:25.018Z","_id":"clx19s52i0001iotlgejk5hwk","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Docker安装MySQL\"><a href=\"#Docker安装MySQL\" class=\"headerlink\" title=\"Docker安装MySQL\"></a>Docker安装MySQL</h2><h3 id=\"安装-MySQL-5-7-到-Docker-的详细步骤\"><a href=\"#安装-MySQL-5-7-到-Docker-的详细步骤\" class=\"headerlink\" title=\"安装 MySQL 5.7 到 Docker 的详细步骤\"></a>安装 MySQL 5.7 到 Docker 的详细步骤</h3><h4 id=\"步骤-1-拉取-MySQL-5-7-镜像\"><a href=\"#步骤-1-拉取-MySQL-5-7-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 MySQL 5.7 镜像\"></a>步骤 1: 拉取 MySQL 5.7 镜像</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>这个命令会从 Docker Hub（Docker 的官方镜像仓库）拉取 MySQL 5.7 的镜像。</li>\n<li><code>docker pull</code> 是 Docker 获取镜像的命令。</li>\n<li><code>mysql:5.7</code> 指定了您想要拉取的镜像及其版本。这里是 MySQL 版本 5.7。</li>\n</ul>\n<h4 id=\"注：可以先使用docker-volume-create-name-mysql-data\"><a href=\"#注：可以先使用docker-volume-create-name-mysql-data\" class=\"headerlink\" title=\"注：可以先使用docker volume create --name mysql-data\"></a>注：可以先使用<code>docker volume create --name mysql-data</code></h4><h4 id=\"步骤-2-创建并运行-MySQL-容器\"><a href=\"#步骤-2-创建并运行-MySQL-容器\" class=\"headerlink\" title=\"步骤 2: 创建并运行 MySQL 容器\"></a>步骤 2: 创建并运行 MySQL 容器</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mysql-5.7 -e MYSQL_ROOT_PASSWORD=123456 -v mysql-data:/var/lib/mysql -p 3306:3306 -d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li><strong>docker run</strong>：<ul>\n<li>这是 Docker 用于启动新容器的基本命令。</li>\n</ul>\n</li>\n<li><strong>–name mysql-5.7</strong>：<ul>\n<li><code>--name</code> 选项用于为容器指定一个名字，这里命名为 <code>mysql-5.7</code>。这个名字用于识别和引用容器。</li>\n</ul>\n</li>\n<li><strong>-e MYSQL_ROOT_PASSWORD&#x3D;123456</strong>：<ul>\n<li><code>-e</code> 选项用于设置环境变量。在这个例子中，它设置了 MySQL 的 root 用户的密码为 <code>123456</code>。这是 MySQL 容器启动所必需的。</li>\n</ul>\n</li>\n<li><strong>-v mysql-data:&#x2F;var&#x2F;lib&#x2F;mysql</strong>：<ul>\n<li><code>-v</code> 选项用于挂载卷（volume）。这里，它将名为 <code>mysql-data</code> 的 Docker 卷挂载到容器内的 <code>/var/lib/mysql</code> 目录。</li>\n<li>这个操作的目的是数据持久化。即使容器被停止或删除，存储在 <code>/var/lib/mysql</code> 目录中的数据（即 MySQL 数据库文件）仍然会保留在 <code>mysql-data</code> 卷中。</li>\n</ul>\n</li>\n<li><strong>-p 3306:3306</strong>：<ul>\n<li><code>-p</code> 选项用于端口映射。这里，它将容器内的 3306 端口（MySQL 默认端口）映射到宿主机的同一端口。</li>\n<li>这样可以通过宿主机的 3306 端口访问 MySQL 容器。</li>\n</ul>\n</li>\n<li><strong>-d</strong>：<ul>\n<li><code>-d</code> 选项告诉 Docker 以“分离模式”运行容器，即在后台运行。</li>\n</ul>\n</li>\n<li><strong>mysql:5.7</strong>：<ul>\n<li>指定使用的 Docker 镜像和标签。在这个例子中，它使用的是 MySQL 5.7 版本的官方 Docker 镜像</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤-3-检查容器运行状态\"><a href=\"#步骤-3-检查容器运行状态\" class=\"headerlink\" title=\"步骤 3: 检查容器运行状态\"></a>步骤 3: 检查容器运行状态</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>使用 <code>docker ps</code> 可以查看当前正在运行的 Docker 容器的列表。</li>\n<li>如果 MySQL 容器已经启动并运行，它应该会出现在这个列表中。</li>\n</ul>\n<h4 id=\"步骤4：重新安装MySQL\"><a href=\"#步骤4：重新安装MySQL\" class=\"headerlink\" title=\"步骤4：重新安装MySQL\"></a>步骤4：重新安装MySQL</h4><p>停止原先<code>mysql-5.7</code>容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop mysql-5.7</span><br></pre></td></tr></table></figure>\n\n<p>删除原先<code>mysql-5.7</code>容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm mysql-5.7</span><br></pre></td></tr></table></figure>\n\n<p>因为我删除了原先的数据库，但是保留了宿主机上的配置，我希望把保留的配置和数据卷重新映射到容器，以下是我重新安装mysql-5.7的命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql-5.7 \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -v mysql-data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf \\</span><br><span class=\"line\">  mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>这条命令通过Docker在后台启动了一个MySQL 5.7版本的容器，并配置了一系列的参数来满足特定的需求：</p>\n<ul>\n<li><p><strong><code>-d</code></strong>: 表示容器在后台运行，让终端不会被当前容器的运行过程占用。</p>\n</li>\n<li><p><strong><code>--name mysql-5.7</code></strong>: 为运行的容器指定一个名字<code>mysql-5.7</code>，这样可以更方便地对容器进行管理。</p>\n</li>\n<li><p><strong><code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code></strong>: 设置环境变量<code>MYSQL_ROOT_PASSWORD</code>为<code>my-secret-pw</code>，这是为MySQL的root用户设置的密码，是MySQL容器启动时必需的配置项。</p>\n</li>\n<li><p><strong><code>-p 3306:3306</code></strong>: 将容器内部使用的3306端口映射到宿主机的3306端口上，这样可以通过宿主机的端口来访问容器中的MySQL服务。</p>\n</li>\n<li><p><strong><code>-v mysql-data:/var/lib/mysql</code></strong>: 将名为<code>mysql-data</code>的数据卷挂载到容器内的<code>/var/lib/mysql</code>目录。这是MySQL存储数据的默认位置，使用数据卷可以实现数据的持久化保存，确保数据不会因为容器的删除而丢失，并且可以在不同的容器间共享这部分数据。</p>\n</li>\n<li><p><strong><code>-v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf</code></strong>: 将宿主机上的<code>/etc/my.cnf.d/mysql-clients.cnf</code>配置文件挂载到容器内的<code>/etc/mysql/conf.d/mysql-clients.cnf</code>位置。这样做是为了自定义MySQL服务器的配置，可以根据需要调整MySQL的行为和性能。</p>\n</li>\n<li><p><strong><code>mysql:5.7</code></strong>: 指定使用<code>mysql:5.7</code>镜像创建容器，这个镜像是MySQL官方发布的，版本号为5.7，保证了MySQL服务的标准化和一致性。</p>\n</li>\n</ul>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/about.png\"></p>\n","excerpt":"","more":"<h2 id=\"Docker安装MySQL\"><a href=\"#Docker安装MySQL\" class=\"headerlink\" title=\"Docker安装MySQL\"></a>Docker安装MySQL</h2><h3 id=\"安装-MySQL-5-7-到-Docker-的详细步骤\"><a href=\"#安装-MySQL-5-7-到-Docker-的详细步骤\" class=\"headerlink\" title=\"安装 MySQL 5.7 到 Docker 的详细步骤\"></a>安装 MySQL 5.7 到 Docker 的详细步骤</h3><h4 id=\"步骤-1-拉取-MySQL-5-7-镜像\"><a href=\"#步骤-1-拉取-MySQL-5-7-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 MySQL 5.7 镜像\"></a>步骤 1: 拉取 MySQL 5.7 镜像</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>这个命令会从 Docker Hub（Docker 的官方镜像仓库）拉取 MySQL 5.7 的镜像。</li>\n<li><code>docker pull</code> 是 Docker 获取镜像的命令。</li>\n<li><code>mysql:5.7</code> 指定了您想要拉取的镜像及其版本。这里是 MySQL 版本 5.7。</li>\n</ul>\n<h4 id=\"注：可以先使用docker-volume-create-name-mysql-data\"><a href=\"#注：可以先使用docker-volume-create-name-mysql-data\" class=\"headerlink\" title=\"注：可以先使用docker volume create --name mysql-data\"></a>注：可以先使用<code>docker volume create --name mysql-data</code></h4><h4 id=\"步骤-2-创建并运行-MySQL-容器\"><a href=\"#步骤-2-创建并运行-MySQL-容器\" class=\"headerlink\" title=\"步骤 2: 创建并运行 MySQL 容器\"></a>步骤 2: 创建并运行 MySQL 容器</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mysql-5.7 -e MYSQL_ROOT_PASSWORD=123456 -v mysql-data:/var/lib/mysql -p 3306:3306 -d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li><strong>docker run</strong>：<ul>\n<li>这是 Docker 用于启动新容器的基本命令。</li>\n</ul>\n</li>\n<li><strong>–name mysql-5.7</strong>：<ul>\n<li><code>--name</code> 选项用于为容器指定一个名字，这里命名为 <code>mysql-5.7</code>。这个名字用于识别和引用容器。</li>\n</ul>\n</li>\n<li><strong>-e MYSQL_ROOT_PASSWORD&#x3D;123456</strong>：<ul>\n<li><code>-e</code> 选项用于设置环境变量。在这个例子中，它设置了 MySQL 的 root 用户的密码为 <code>123456</code>。这是 MySQL 容器启动所必需的。</li>\n</ul>\n</li>\n<li><strong>-v mysql-data:&#x2F;var&#x2F;lib&#x2F;mysql</strong>：<ul>\n<li><code>-v</code> 选项用于挂载卷（volume）。这里，它将名为 <code>mysql-data</code> 的 Docker 卷挂载到容器内的 <code>/var/lib/mysql</code> 目录。</li>\n<li>这个操作的目的是数据持久化。即使容器被停止或删除，存储在 <code>/var/lib/mysql</code> 目录中的数据（即 MySQL 数据库文件）仍然会保留在 <code>mysql-data</code> 卷中。</li>\n</ul>\n</li>\n<li><strong>-p 3306:3306</strong>：<ul>\n<li><code>-p</code> 选项用于端口映射。这里，它将容器内的 3306 端口（MySQL 默认端口）映射到宿主机的同一端口。</li>\n<li>这样可以通过宿主机的 3306 端口访问 MySQL 容器。</li>\n</ul>\n</li>\n<li><strong>-d</strong>：<ul>\n<li><code>-d</code> 选项告诉 Docker 以“分离模式”运行容器，即在后台运行。</li>\n</ul>\n</li>\n<li><strong>mysql:5.7</strong>：<ul>\n<li>指定使用的 Docker 镜像和标签。在这个例子中，它使用的是 MySQL 5.7 版本的官方 Docker 镜像</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤-3-检查容器运行状态\"><a href=\"#步骤-3-检查容器运行状态\" class=\"headerlink\" title=\"步骤 3: 检查容器运行状态\"></a>步骤 3: 检查容器运行状态</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>使用 <code>docker ps</code> 可以查看当前正在运行的 Docker 容器的列表。</li>\n<li>如果 MySQL 容器已经启动并运行，它应该会出现在这个列表中。</li>\n</ul>\n<h4 id=\"步骤4：重新安装MySQL\"><a href=\"#步骤4：重新安装MySQL\" class=\"headerlink\" title=\"步骤4：重新安装MySQL\"></a>步骤4：重新安装MySQL</h4><p>停止原先<code>mysql-5.7</code>容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop mysql-5.7</span><br></pre></td></tr></table></figure>\n\n<p>删除原先<code>mysql-5.7</code>容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm mysql-5.7</span><br></pre></td></tr></table></figure>\n\n<p>因为我删除了原先的数据库，但是保留了宿主机上的配置，我希望把保留的配置和数据卷重新映射到容器，以下是我重新安装mysql-5.7的命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql-5.7 \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -v mysql-data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf \\</span><br><span class=\"line\">  mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>这条命令通过Docker在后台启动了一个MySQL 5.7版本的容器，并配置了一系列的参数来满足特定的需求：</p>\n<ul>\n<li><p><strong><code>-d</code></strong>: 表示容器在后台运行，让终端不会被当前容器的运行过程占用。</p>\n</li>\n<li><p><strong><code>--name mysql-5.7</code></strong>: 为运行的容器指定一个名字<code>mysql-5.7</code>，这样可以更方便地对容器进行管理。</p>\n</li>\n<li><p><strong><code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code></strong>: 设置环境变量<code>MYSQL_ROOT_PASSWORD</code>为<code>my-secret-pw</code>，这是为MySQL的root用户设置的密码，是MySQL容器启动时必需的配置项。</p>\n</li>\n<li><p><strong><code>-p 3306:3306</code></strong>: 将容器内部使用的3306端口映射到宿主机的3306端口上，这样可以通过宿主机的端口来访问容器中的MySQL服务。</p>\n</li>\n<li><p><strong><code>-v mysql-data:/var/lib/mysql</code></strong>: 将名为<code>mysql-data</code>的数据卷挂载到容器内的<code>/var/lib/mysql</code>目录。这是MySQL存储数据的默认位置，使用数据卷可以实现数据的持久化保存，确保数据不会因为容器的删除而丢失，并且可以在不同的容器间共享这部分数据。</p>\n</li>\n<li><p><strong><code>-v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf</code></strong>: 将宿主机上的<code>/etc/my.cnf.d/mysql-clients.cnf</code>配置文件挂载到容器内的<code>/etc/mysql/conf.d/mysql-clients.cnf</code>位置。这样做是为了自定义MySQL服务器的配置，可以根据需要调整MySQL的行为和性能。</p>\n</li>\n<li><p><strong><code>mysql:5.7</code></strong>: 指定使用<code>mysql:5.7</code>镜像创建容器，这个镜像是MySQL官方发布的，版本号为5.7，保证了MySQL服务的标准化和一致性。</p>\n</li>\n</ul>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/about.png\"></p>\n"},{"title":"五、jar包打包成 Docker 镜像","date":"2024-06-10T14:32:50.000Z","_content":"### Java 应用（jar 包）打包成 Docker 镜像\n\n​\t要将一个 Java 应用（jar 包）打包成 Docker 镜像，你需要编写一个 `Dockerfile`，这是一个文本文件，包含了构建 Docker 镜像所需的指令。以下是一个简单的示例流程，展示如何将一个 Spring Boot 应用的 jar 包转换成 Docker 镜像。\n\n​\t1、使用Xftp，把jar上传到指定的目录下。2、创建Dockerfile文件。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226162321338.png)\n\n#### 步骤 1: 准备 Dockerfile\n\n1. **创建 Dockerfile**: 在你的 Java 项目根目录下创建一个名为 `Dockerfile` 的文件（无文件扩展名）。\n2. **编辑 Dockerfile**: 使用文本编辑器打开 `Dockerfile`，并添加以下内容：\n\n```dockerfile\n# 使用官方的Java运行环境作为基础镜像\nFROM openjdk:8-jdk-alpine\nRUN apk add --no-cache fontconfig ttf-dejavu\n\n# 设置时区（可选）\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# 将jar包添加到容器中，注意修改路径以匹配你的jar包位置\nADD jinzijing-hotel-2.0.0.jar app.jar\n\n# 暴露容器内部的端口号，与Spring Boot应用的端口一致\nEXPOSE 84\n\n# 在容器启动时运行jar包\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\n```\n\n#### 步骤 2: 构建 Docker 镜像\n\n在包含 `Dockerfile` 的目录下，打开终端或命令提示符，运行以下命令来构建 Docker 镜像：\n\n```dockerfile\ndocker build -t hotel-service .\n```\n\n- `-t hotel-service` 为新构建的镜像设置了一个名字 `hotel-service`。\n- `.` 指定了 Dockerfile 所在的目录（当前目录）。\n\n#### 步骤 3: 运行 Docker 容器\n\n使用以下命令运行你的应用：\n\n```dockerfile\ndocker run -d -p 84:84 myapplication\n```\n\n- `-d` 表示后台运行容器。\n- `-p 84:84` 将容器的 84 端口映射到宿主机的 84 端口，允许外部访问。\n\n确保你的应用配置为在 84 端口上监听，或者根据需要调整端口映射。\n\n#### 步骤4：测试SpringBoot服务\n\n使用以下命令测试你的应用是否能正常运行\n\n```shell\ncurl http://localhost:84\n```\n\n如果出现`WELCOME`则说明服务正常运行。\n\n","source":"_posts/Java 应用（jar 包）打包成 Docker 镜像.md","raw":"---\ntitle: 五、jar包打包成 Docker 镜像\ndate: 2024-06-10 22:32:50\ntags: docker\n---\n### Java 应用（jar 包）打包成 Docker 镜像\n\n​\t要将一个 Java 应用（jar 包）打包成 Docker 镜像，你需要编写一个 `Dockerfile`，这是一个文本文件，包含了构建 Docker 镜像所需的指令。以下是一个简单的示例流程，展示如何将一个 Spring Boot 应用的 jar 包转换成 Docker 镜像。\n\n​\t1、使用Xftp，把jar上传到指定的目录下。2、创建Dockerfile文件。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226162321338.png)\n\n#### 步骤 1: 准备 Dockerfile\n\n1. **创建 Dockerfile**: 在你的 Java 项目根目录下创建一个名为 `Dockerfile` 的文件（无文件扩展名）。\n2. **编辑 Dockerfile**: 使用文本编辑器打开 `Dockerfile`，并添加以下内容：\n\n```dockerfile\n# 使用官方的Java运行环境作为基础镜像\nFROM openjdk:8-jdk-alpine\nRUN apk add --no-cache fontconfig ttf-dejavu\n\n# 设置时区（可选）\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# 将jar包添加到容器中，注意修改路径以匹配你的jar包位置\nADD jinzijing-hotel-2.0.0.jar app.jar\n\n# 暴露容器内部的端口号，与Spring Boot应用的端口一致\nEXPOSE 84\n\n# 在容器启动时运行jar包\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\n```\n\n#### 步骤 2: 构建 Docker 镜像\n\n在包含 `Dockerfile` 的目录下，打开终端或命令提示符，运行以下命令来构建 Docker 镜像：\n\n```dockerfile\ndocker build -t hotel-service .\n```\n\n- `-t hotel-service` 为新构建的镜像设置了一个名字 `hotel-service`。\n- `.` 指定了 Dockerfile 所在的目录（当前目录）。\n\n#### 步骤 3: 运行 Docker 容器\n\n使用以下命令运行你的应用：\n\n```dockerfile\ndocker run -d -p 84:84 myapplication\n```\n\n- `-d` 表示后台运行容器。\n- `-p 84:84` 将容器的 84 端口映射到宿主机的 84 端口，允许外部访问。\n\n确保你的应用配置为在 84 端口上监听，或者根据需要调整端口映射。\n\n#### 步骤4：测试SpringBoot服务\n\n使用以下命令测试你的应用是否能正常运行\n\n```shell\ncurl http://localhost:84\n```\n\n如果出现`WELCOME`则说明服务正常运行。\n\n","slug":"Java 应用（jar 包）打包成 Docker 镜像","published":1,"updated":"2024-07-31T15:04:34.046Z","_id":"clx19s52l0002iotlbaoi3yec","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"Java-应用（jar-包）打包成-Docker-镜像\"><a href=\"#Java-应用（jar-包）打包成-Docker-镜像\" class=\"headerlink\" title=\"Java 应用（jar 包）打包成 Docker 镜像\"></a>Java 应用（jar 包）打包成 Docker 镜像</h3><p>​\t要将一个 Java 应用（jar 包）打包成 Docker 镜像，你需要编写一个 <code>Dockerfile</code>，这是一个文本文件，包含了构建 Docker 镜像所需的指令。以下是一个简单的示例流程，展示如何将一个 Spring Boot 应用的 jar 包转换成 Docker 镜像。</p>\n<p>​\t1、使用Xftp，把jar上传到指定的目录下。2、创建Dockerfile文件。</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226162321338.png\"></p>\n<h4 id=\"步骤-1-准备-Dockerfile\"><a href=\"#步骤-1-准备-Dockerfile\" class=\"headerlink\" title=\"步骤 1: 准备 Dockerfile\"></a>步骤 1: 准备 Dockerfile</h4><ol>\n<li><strong>创建 Dockerfile</strong>: 在你的 Java 项目根目录下创建一个名为 <code>Dockerfile</code> 的文件（无文件扩展名）。</li>\n<li><strong>编辑 Dockerfile</strong>: 使用文本编辑器打开 <code>Dockerfile</code>，并添加以下内容：</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方的Java运行环境作为基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-alpine</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk add --no-cache fontconfig ttf-dejavu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置时区（可选）</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> TZ=Asia/Shanghai</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">ln</span> -snf /usr/share/zoneinfo/<span class=\"variable\">$TZ</span> /etc/localtime &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$TZ</span> &gt; /etc/timezone</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将jar包添加到容器中，注意修改路径以匹配你的jar包位置</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> jinzijing-hotel-2.0.0.jar app.jar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴露容器内部的端口号，与Spring Boot应用的端口一致</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">84</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在容器启动时运行jar包</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>, <span class=\"string\">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-2-构建-Docker-镜像\"><a href=\"#步骤-2-构建-Docker-镜像\" class=\"headerlink\" title=\"步骤 2: 构建 Docker 镜像\"></a>步骤 2: 构建 Docker 镜像</h4><p>在包含 <code>Dockerfile</code> 的目录下，打开终端或命令提示符，运行以下命令来构建 Docker 镜像：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t hotel-service .</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-t hotel-service</code> 为新构建的镜像设置了一个名字 <code>hotel-service</code>。</li>\n<li><code>.</code> 指定了 Dockerfile 所在的目录（当前目录）。</li>\n</ul>\n<h4 id=\"步骤-3-运行-Docker-容器\"><a href=\"#步骤-3-运行-Docker-容器\" class=\"headerlink\" title=\"步骤 3: 运行 Docker 容器\"></a>步骤 3: 运行 Docker 容器</h4><p>使用以下命令运行你的应用：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"language-bash\"> -d -p 84:84 myapplication</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-d</code> 表示后台运行容器。</li>\n<li><code>-p 84:84</code> 将容器的 84 端口映射到宿主机的 84 端口，允许外部访问。</li>\n</ul>\n<p>确保你的应用配置为在 84 端口上监听，或者根据需要调整端口映射。</p>\n<h4 id=\"步骤4：测试SpringBoot服务\"><a href=\"#步骤4：测试SpringBoot服务\" class=\"headerlink\" title=\"步骤4：测试SpringBoot服务\"></a>步骤4：测试SpringBoot服务</h4><p>使用以下命令测试你的应用是否能正常运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:84</span><br></pre></td></tr></table></figure>\n\n<p>如果出现<code>WELCOME</code>则说明服务正常运行。</p>\n","excerpt":"","more":"<h3 id=\"Java-应用（jar-包）打包成-Docker-镜像\"><a href=\"#Java-应用（jar-包）打包成-Docker-镜像\" class=\"headerlink\" title=\"Java 应用（jar 包）打包成 Docker 镜像\"></a>Java 应用（jar 包）打包成 Docker 镜像</h3><p>​\t要将一个 Java 应用（jar 包）打包成 Docker 镜像，你需要编写一个 <code>Dockerfile</code>，这是一个文本文件，包含了构建 Docker 镜像所需的指令。以下是一个简单的示例流程，展示如何将一个 Spring Boot 应用的 jar 包转换成 Docker 镜像。</p>\n<p>​\t1、使用Xftp，把jar上传到指定的目录下。2、创建Dockerfile文件。</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226162321338.png\"></p>\n<h4 id=\"步骤-1-准备-Dockerfile\"><a href=\"#步骤-1-准备-Dockerfile\" class=\"headerlink\" title=\"步骤 1: 准备 Dockerfile\"></a>步骤 1: 准备 Dockerfile</h4><ol>\n<li><strong>创建 Dockerfile</strong>: 在你的 Java 项目根目录下创建一个名为 <code>Dockerfile</code> 的文件（无文件扩展名）。</li>\n<li><strong>编辑 Dockerfile</strong>: 使用文本编辑器打开 <code>Dockerfile</code>，并添加以下内容：</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方的Java运行环境作为基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-alpine</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk add --no-cache fontconfig ttf-dejavu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置时区（可选）</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> TZ=Asia/Shanghai</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">ln</span> -snf /usr/share/zoneinfo/<span class=\"variable\">$TZ</span> /etc/localtime &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$TZ</span> &gt; /etc/timezone</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将jar包添加到容器中，注意修改路径以匹配你的jar包位置</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> jinzijing-hotel-2.0.0.jar app.jar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴露容器内部的端口号，与Spring Boot应用的端口一致</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">84</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在容器启动时运行jar包</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>, <span class=\"string\">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-2-构建-Docker-镜像\"><a href=\"#步骤-2-构建-Docker-镜像\" class=\"headerlink\" title=\"步骤 2: 构建 Docker 镜像\"></a>步骤 2: 构建 Docker 镜像</h4><p>在包含 <code>Dockerfile</code> 的目录下，打开终端或命令提示符，运行以下命令来构建 Docker 镜像：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t hotel-service .</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-t hotel-service</code> 为新构建的镜像设置了一个名字 <code>hotel-service</code>。</li>\n<li><code>.</code> 指定了 Dockerfile 所在的目录（当前目录）。</li>\n</ul>\n<h4 id=\"步骤-3-运行-Docker-容器\"><a href=\"#步骤-3-运行-Docker-容器\" class=\"headerlink\" title=\"步骤 3: 运行 Docker 容器\"></a>步骤 3: 运行 Docker 容器</h4><p>使用以下命令运行你的应用：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"language-bash\"> -d -p 84:84 myapplication</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-d</code> 表示后台运行容器。</li>\n<li><code>-p 84:84</code> 将容器的 84 端口映射到宿主机的 84 端口，允许外部访问。</li>\n</ul>\n<p>确保你的应用配置为在 84 端口上监听，或者根据需要调整端口映射。</p>\n<h4 id=\"步骤4：测试SpringBoot服务\"><a href=\"#步骤4：测试SpringBoot服务\" class=\"headerlink\" title=\"步骤4：测试SpringBoot服务\"></a>步骤4：测试SpringBoot服务</h4><p>使用以下命令测试你的应用是否能正常运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:84</span><br></pre></td></tr></table></figure>\n\n<p>如果出现<code>WELCOME</code>则说明服务正常运行。</p>\n"},{"title":"二、Docker操作命令练习","date":"2024-06-02T14:32:50.000Z","_content":"### Docker操作命令\n\n#### 一、简单的`hello-world`示例\n\n#### 步骤 1: 拉取 `hello-world` 镜像\n\n运行以下命令以拉取最新的 `hello-world` 镜像：\n\n```shell\ndocker pull hello-world\n```\n\n#### 步骤 2: 运行 `hello-world` 容器并命名\n\n运行以下命令启动一个 `hello-world` 容器，并给它命名为 `my-hello-world`：\n\n```shell\ndocker run --name my-hello-world hello-world\n```\n\n这个命令会启动一个 `hello-world` 容器，容器运行后会显示一条欢迎消息然后退出。因为 `hello-world` 容器是为了演示目的而设计，它会立即退出并不会长时间运行。\n\n#### 二、使用 `my-redis` 容器作为示例\n\n因为我已经拉取了`redis`的镜像，并且已经成功的运行了`redis`容器，命名为`my-redis`，以下使用 `my-redis` 容器作为示例，提供更多的 Docker 命令。\n\n#### 启动已停止的容器\n\n```shell\ndocker start my-redis\n```\n\n#### 停止容器\n\n```shell\ndocker stop my-redis\n```\n\n#### 重启容器\n\n```shell\ndocker restart my-redis\n```\n\n#### 查看容器日志\n\n```shell\ndocker logs my-redis\n```\n\n#### 查看容器的实时日志\n\n```shell\ndocker logs -f my-redis\n```\n\n#### 检查容器的详细信息\n\n```shell\ndocker inspect my-redis\n```\n\n#### 查看容器内部的进程\n\n```shell\ndocker top my-redis\n```\n\n#### 查看容器的资源使用情况（如 CPU、内存）\n\n```shell\ndocker stats my-redis\n```\n\n#### 进入容器内部的命令\n\n假设你想在 `my-redis` 容器内部：\n\n```shell\ndocker exec -it my-redis /bin/bash (/bin/sh)\n```\n\n执行 `Redis` 命令行界面：终端输入`redis-cli`，进入命令行界面。\n\n#### 复制文件到/从容器\n\n假设你想从你的主机复制一个名为 `dump.rdb` 的文件到 `my-redis` 容器的 `/data` 目录中：\n\n```shell\ndocker cp dump.rdb my-redis:/data/dump.rdb\n```\n\n反向操作，从容器复制文件到主机：\n\n```shell\ndocker cp my-redis:/data/dump.rdb ./dump.rdb\n```\n\n#### 三、使用`hotel-service`作为例子。\n\n#### 查看特定数量的尾部日志行并持续更新\n\n可以结合使用 `-n`（或 `--tail`）选项和 `-f` 选项。例如，查看最后50行日志并持续更新：\n\n```shell\ndocker logs --tail 50 -f hotel-service\n```\n\n#### 进入`hotel-service`容器\n\n```shell\ndocker exec -it my-redis /bin/sh\n```\n\n查看日志，我的日志目录和系统的目录是同级的，（根据实际情况来定，具体还是得看自己的日志目录配在什么地方）。\n\n```shell\ncd app-log/\n```\n\n查看错误日志，\n\n要在 Linux 中查看文件末尾的 100 行，您可以使用 `tail` 命令配合 `-n` 选项，如下所示：\n\n```shell\ntail -n 100 syslog\n```\n\n或者直接输入文件的路径。例如，如果您想查看名为 `/var/log/syslog` 的文件的末尾 100 行，命令将是：\n\n```shell\ntail -n 100 /var/log/syslog\n```\n\n","source":"_posts/Docker操作命令.md","raw":"---\ntitle: 二、Docker操作命令练习\ndate: 2024-06-02 22:32:50\ntags: docker\n---\n### Docker操作命令\n\n#### 一、简单的`hello-world`示例\n\n#### 步骤 1: 拉取 `hello-world` 镜像\n\n运行以下命令以拉取最新的 `hello-world` 镜像：\n\n```shell\ndocker pull hello-world\n```\n\n#### 步骤 2: 运行 `hello-world` 容器并命名\n\n运行以下命令启动一个 `hello-world` 容器，并给它命名为 `my-hello-world`：\n\n```shell\ndocker run --name my-hello-world hello-world\n```\n\n这个命令会启动一个 `hello-world` 容器，容器运行后会显示一条欢迎消息然后退出。因为 `hello-world` 容器是为了演示目的而设计，它会立即退出并不会长时间运行。\n\n#### 二、使用 `my-redis` 容器作为示例\n\n因为我已经拉取了`redis`的镜像，并且已经成功的运行了`redis`容器，命名为`my-redis`，以下使用 `my-redis` 容器作为示例，提供更多的 Docker 命令。\n\n#### 启动已停止的容器\n\n```shell\ndocker start my-redis\n```\n\n#### 停止容器\n\n```shell\ndocker stop my-redis\n```\n\n#### 重启容器\n\n```shell\ndocker restart my-redis\n```\n\n#### 查看容器日志\n\n```shell\ndocker logs my-redis\n```\n\n#### 查看容器的实时日志\n\n```shell\ndocker logs -f my-redis\n```\n\n#### 检查容器的详细信息\n\n```shell\ndocker inspect my-redis\n```\n\n#### 查看容器内部的进程\n\n```shell\ndocker top my-redis\n```\n\n#### 查看容器的资源使用情况（如 CPU、内存）\n\n```shell\ndocker stats my-redis\n```\n\n#### 进入容器内部的命令\n\n假设你想在 `my-redis` 容器内部：\n\n```shell\ndocker exec -it my-redis /bin/bash (/bin/sh)\n```\n\n执行 `Redis` 命令行界面：终端输入`redis-cli`，进入命令行界面。\n\n#### 复制文件到/从容器\n\n假设你想从你的主机复制一个名为 `dump.rdb` 的文件到 `my-redis` 容器的 `/data` 目录中：\n\n```shell\ndocker cp dump.rdb my-redis:/data/dump.rdb\n```\n\n反向操作，从容器复制文件到主机：\n\n```shell\ndocker cp my-redis:/data/dump.rdb ./dump.rdb\n```\n\n#### 三、使用`hotel-service`作为例子。\n\n#### 查看特定数量的尾部日志行并持续更新\n\n可以结合使用 `-n`（或 `--tail`）选项和 `-f` 选项。例如，查看最后50行日志并持续更新：\n\n```shell\ndocker logs --tail 50 -f hotel-service\n```\n\n#### 进入`hotel-service`容器\n\n```shell\ndocker exec -it my-redis /bin/sh\n```\n\n查看日志，我的日志目录和系统的目录是同级的，（根据实际情况来定，具体还是得看自己的日志目录配在什么地方）。\n\n```shell\ncd app-log/\n```\n\n查看错误日志，\n\n要在 Linux 中查看文件末尾的 100 行，您可以使用 `tail` 命令配合 `-n` 选项，如下所示：\n\n```shell\ntail -n 100 syslog\n```\n\n或者直接输入文件的路径。例如，如果您想查看名为 `/var/log/syslog` 的文件的末尾 100 行，命令将是：\n\n```shell\ntail -n 100 /var/log/syslog\n```\n\n","slug":"Docker操作命令","published":1,"updated":"2024-07-26T15:43:18.359Z","_id":"clx19s52m0003iotl9q5408l6","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"Docker操作命令\"><a href=\"#Docker操作命令\" class=\"headerlink\" title=\"Docker操作命令\"></a>Docker操作命令</h3><h4 id=\"一、简单的hello-world示例\"><a href=\"#一、简单的hello-world示例\" class=\"headerlink\" title=\"一、简单的hello-world示例\"></a>一、简单的<code>hello-world</code>示例</h4><h4 id=\"步骤-1-拉取-hello-world-镜像\"><a href=\"#步骤-1-拉取-hello-world-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 hello-world 镜像\"></a>步骤 1: 拉取 <code>hello-world</code> 镜像</h4><p>运行以下命令以拉取最新的 <code>hello-world</code> 镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-2-运行-hello-world-容器并命名\"><a href=\"#步骤-2-运行-hello-world-容器并命名\" class=\"headerlink\" title=\"步骤 2: 运行 hello-world 容器并命名\"></a>步骤 2: 运行 <code>hello-world</code> 容器并命名</h4><p>运行以下命令启动一个 <code>hello-world</code> 容器，并给它命名为 <code>my-hello-world</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-hello-world hello-world</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会启动一个 <code>hello-world</code> 容器，容器运行后会显示一条欢迎消息然后退出。因为 <code>hello-world</code> 容器是为了演示目的而设计，它会立即退出并不会长时间运行。</p>\n<h4 id=\"二、使用-my-redis-容器作为示例\"><a href=\"#二、使用-my-redis-容器作为示例\" class=\"headerlink\" title=\"二、使用 my-redis 容器作为示例\"></a>二、使用 <code>my-redis</code> 容器作为示例</h4><p>因为我已经拉取了<code>redis</code>的镜像，并且已经成功的运行了<code>redis</code>容器，命名为<code>my-redis</code>，以下使用 <code>my-redis</code> 容器作为示例，提供更多的 Docker 命令。</p>\n<h4 id=\"启动已停止的容器\"><a href=\"#启动已停止的容器\" class=\"headerlink\" title=\"启动已停止的容器\"></a>启动已停止的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启容器\"><a href=\"#重启容器\" class=\"headerlink\" title=\"重启容器\"></a>重启容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器日志\"><a href=\"#查看容器日志\" class=\"headerlink\" title=\"查看容器日志\"></a>查看容器日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器的实时日志\"><a href=\"#查看容器的实时日志\" class=\"headerlink\" title=\"查看容器的实时日志\"></a>查看容器的实时日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查容器的详细信息\"><a href=\"#检查容器的详细信息\" class=\"headerlink\" title=\"检查容器的详细信息\"></a>检查容器的详细信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器内部的进程\"><a href=\"#查看容器内部的进程\" class=\"headerlink\" title=\"查看容器内部的进程\"></a>查看容器内部的进程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器的资源使用情况（如-CPU、内存）\"><a href=\"#查看容器的资源使用情况（如-CPU、内存）\" class=\"headerlink\" title=\"查看容器的资源使用情况（如 CPU、内存）\"></a>查看容器的资源使用情况（如 CPU、内存）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入容器内部的命令\"><a href=\"#进入容器内部的命令\" class=\"headerlink\" title=\"进入容器内部的命令\"></a>进入容器内部的命令</h4><p>假设你想在 <code>my-redis</code> 容器内部：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it my-redis /bin/bash (/bin/sh)</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>Redis</code> 命令行界面：终端输入<code>redis-cli</code>，进入命令行界面。</p>\n<h4 id=\"复制文件到-从容器\"><a href=\"#复制文件到-从容器\" class=\"headerlink\" title=\"复制文件到&#x2F;从容器\"></a>复制文件到&#x2F;从容器</h4><p>假设你想从你的主机复制一个名为 <code>dump.rdb</code> 的文件到 <code>my-redis</code> 容器的 <code>/data</code> 目录中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp dump.rdb my-redis:/data/dump.rdb</span><br></pre></td></tr></table></figure>\n\n<p>反向操作，从容器复制文件到主机：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp my-redis:/data/dump.rdb ./dump.rdb</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、使用hotel-service作为例子。\"><a href=\"#三、使用hotel-service作为例子。\" class=\"headerlink\" title=\"三、使用hotel-service作为例子。\"></a>三、使用<code>hotel-service</code>作为例子。</h4><h4 id=\"查看特定数量的尾部日志行并持续更新\"><a href=\"#查看特定数量的尾部日志行并持续更新\" class=\"headerlink\" title=\"查看特定数量的尾部日志行并持续更新\"></a>查看特定数量的尾部日志行并持续更新</h4><p>可以结合使用 <code>-n</code>（或 <code>--tail</code>）选项和 <code>-f</code> 选项。例如，查看最后50行日志并持续更新：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs --tail 50 -f hotel-service</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入hotel-service容器\"><a href=\"#进入hotel-service容器\" class=\"headerlink\" title=\"进入hotel-service容器\"></a>进入<code>hotel-service</code>容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it my-redis /bin/sh</span><br></pre></td></tr></table></figure>\n\n<p>查看日志，我的日志目录和系统的目录是同级的，（根据实际情况来定，具体还是得看自己的日志目录配在什么地方）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd app-log/</span><br></pre></td></tr></table></figure>\n\n<p>查看错误日志，</p>\n<p>要在 Linux 中查看文件末尾的 100 行，您可以使用 <code>tail</code> 命令配合 <code>-n</code> 选项，如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 100 syslog</span><br></pre></td></tr></table></figure>\n\n<p>或者直接输入文件的路径。例如，如果您想查看名为 <code>/var/log/syslog</code> 的文件的末尾 100 行，命令将是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 100 /var/log/syslog</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h3 id=\"Docker操作命令\"><a href=\"#Docker操作命令\" class=\"headerlink\" title=\"Docker操作命令\"></a>Docker操作命令</h3><h4 id=\"一、简单的hello-world示例\"><a href=\"#一、简单的hello-world示例\" class=\"headerlink\" title=\"一、简单的hello-world示例\"></a>一、简单的<code>hello-world</code>示例</h4><h4 id=\"步骤-1-拉取-hello-world-镜像\"><a href=\"#步骤-1-拉取-hello-world-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 hello-world 镜像\"></a>步骤 1: 拉取 <code>hello-world</code> 镜像</h4><p>运行以下命令以拉取最新的 <code>hello-world</code> 镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-2-运行-hello-world-容器并命名\"><a href=\"#步骤-2-运行-hello-world-容器并命名\" class=\"headerlink\" title=\"步骤 2: 运行 hello-world 容器并命名\"></a>步骤 2: 运行 <code>hello-world</code> 容器并命名</h4><p>运行以下命令启动一个 <code>hello-world</code> 容器，并给它命名为 <code>my-hello-world</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-hello-world hello-world</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会启动一个 <code>hello-world</code> 容器，容器运行后会显示一条欢迎消息然后退出。因为 <code>hello-world</code> 容器是为了演示目的而设计，它会立即退出并不会长时间运行。</p>\n<h4 id=\"二、使用-my-redis-容器作为示例\"><a href=\"#二、使用-my-redis-容器作为示例\" class=\"headerlink\" title=\"二、使用 my-redis 容器作为示例\"></a>二、使用 <code>my-redis</code> 容器作为示例</h4><p>因为我已经拉取了<code>redis</code>的镜像，并且已经成功的运行了<code>redis</code>容器，命名为<code>my-redis</code>，以下使用 <code>my-redis</code> 容器作为示例，提供更多的 Docker 命令。</p>\n<h4 id=\"启动已停止的容器\"><a href=\"#启动已停止的容器\" class=\"headerlink\" title=\"启动已停止的容器\"></a>启动已停止的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启容器\"><a href=\"#重启容器\" class=\"headerlink\" title=\"重启容器\"></a>重启容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器日志\"><a href=\"#查看容器日志\" class=\"headerlink\" title=\"查看容器日志\"></a>查看容器日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器的实时日志\"><a href=\"#查看容器的实时日志\" class=\"headerlink\" title=\"查看容器的实时日志\"></a>查看容器的实时日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查容器的详细信息\"><a href=\"#检查容器的详细信息\" class=\"headerlink\" title=\"检查容器的详细信息\"></a>检查容器的详细信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器内部的进程\"><a href=\"#查看容器内部的进程\" class=\"headerlink\" title=\"查看容器内部的进程\"></a>查看容器内部的进程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器的资源使用情况（如-CPU、内存）\"><a href=\"#查看容器的资源使用情况（如-CPU、内存）\" class=\"headerlink\" title=\"查看容器的资源使用情况（如 CPU、内存）\"></a>查看容器的资源使用情况（如 CPU、内存）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入容器内部的命令\"><a href=\"#进入容器内部的命令\" class=\"headerlink\" title=\"进入容器内部的命令\"></a>进入容器内部的命令</h4><p>假设你想在 <code>my-redis</code> 容器内部：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it my-redis /bin/bash (/bin/sh)</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>Redis</code> 命令行界面：终端输入<code>redis-cli</code>，进入命令行界面。</p>\n<h4 id=\"复制文件到-从容器\"><a href=\"#复制文件到-从容器\" class=\"headerlink\" title=\"复制文件到&#x2F;从容器\"></a>复制文件到&#x2F;从容器</h4><p>假设你想从你的主机复制一个名为 <code>dump.rdb</code> 的文件到 <code>my-redis</code> 容器的 <code>/data</code> 目录中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp dump.rdb my-redis:/data/dump.rdb</span><br></pre></td></tr></table></figure>\n\n<p>反向操作，从容器复制文件到主机：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp my-redis:/data/dump.rdb ./dump.rdb</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、使用hotel-service作为例子。\"><a href=\"#三、使用hotel-service作为例子。\" class=\"headerlink\" title=\"三、使用hotel-service作为例子。\"></a>三、使用<code>hotel-service</code>作为例子。</h4><h4 id=\"查看特定数量的尾部日志行并持续更新\"><a href=\"#查看特定数量的尾部日志行并持续更新\" class=\"headerlink\" title=\"查看特定数量的尾部日志行并持续更新\"></a>查看特定数量的尾部日志行并持续更新</h4><p>可以结合使用 <code>-n</code>（或 <code>--tail</code>）选项和 <code>-f</code> 选项。例如，查看最后50行日志并持续更新：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs --tail 50 -f hotel-service</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入hotel-service容器\"><a href=\"#进入hotel-service容器\" class=\"headerlink\" title=\"进入hotel-service容器\"></a>进入<code>hotel-service</code>容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it my-redis /bin/sh</span><br></pre></td></tr></table></figure>\n\n<p>查看日志，我的日志目录和系统的目录是同级的，（根据实际情况来定，具体还是得看自己的日志目录配在什么地方）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd app-log/</span><br></pre></td></tr></table></figure>\n\n<p>查看错误日志，</p>\n<p>要在 Linux 中查看文件末尾的 100 行，您可以使用 <code>tail</code> 命令配合 <code>-n</code> 选项，如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 100 syslog</span><br></pre></td></tr></table></figure>\n\n<p>或者直接输入文件的路径。例如，如果您想查看名为 <code>/var/log/syslog</code> 的文件的末尾 100 行，命令将是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 100 /var/log/syslog</span><br></pre></td></tr></table></figure>\n\n"},{"title":"二、为qinyunjian.cloud安装SSL证书","date":"2024-06-04T14:32:50.000Z","_content":"### 安装SSL证书\n\n​\t前置条件，我现在有一个域名（qinyunjian.cloud），默认使用的是http协议，现在我需要为这个域名安装证书，\n\n#### 步骤 1: 安装 Certbot\n\nCertbot 是 Let's Encrypt 的官方客户端，用于自动化安装和更新 SSL 证书。\n\n1. **启用 EPEL 仓库**：(在安装docker的时候已经安装EPEL 仓库，不必重复安装)\n\n   ```shell\n   sudo yum install epel-release\n   ```\n\n2. **安装 Certbot**：\n\n   对于Nginx：\n\n   ```shell\n   sudo yum -y install certbot-nginx\n   ```\n\n#### 步骤 2: 获取和安装证书\n\n使用 Certbot 为您的域名获取和安装证书：\n\n- Nginx\n\n  ```shell\n  sudo certbot --nginx -d qinyunjian.cloud -d www.qinyunjian.cloud\n  ```\n\n- 如果 Certbot 成功安装证书，它将自动修改您的 Nginx 配置文件以使用 SSL，如果说运行了这一步，但是`nginx.conf`文件没有能被正确的更改，则需要手动配置`nginx.conf`。\n\n#### 步骤 3: 自动续订证书\n\nLet's Encrypt 证书有效期为 90 天，可以通过 Certbot 自动续订：\n\n- 测试自动续订\n\n  ```shell\n  sudo certbot renew --dry-run\n  ```\n\n- 如果测试成功，Certbot 将自动设置定时任务来续订证书。\n\n#### 步骤 4: 确认 HTTPS 生效\n\n在完成上述步骤后，您可以通过访问 `https://qinyunjian.cloud` 来确认 SSL 证书是否成功安装。浏览器应该显示一个锁图标，表示连接是安全的。\n\n#### 手动配置`nginx.conf`\n\n​\t如果 Certbot 运行失败，没有自动修改 Nginx 的配置文件来启用 HTTPS 和配置 HTTP 到 HTTPS 的重定向，您可以手动编辑 Nginx 的配置文件来实现这些功能。以下是一个基本的示例，展示如何为您的域名 `qinyunjian.cloud` 配置 SSL 证书和重定向。\n\n#### 步骤 1: 打开您的 Nginx 配置文件\n\n对于大多数 Nginx 安装来说，配置文件通常位于 `/etc/nginx/nginx.conf` 或者 `/etc/nginx/sites-available/` 目录下的某个文件。如果您使用的是后者，那么您的配置可能位于一个特定的域名文件中，例如 `/etc/nginx/sites-available/qinyunjian.cloud.conf`。\n\n#### 步骤 2: 配置 SSL\n\n以下是一个配置 SSL 的示例。请确保您已经通过 Certbot 获取了证书，并知道证书和私钥文件的路径。\n\n```shell\nserver {\n    listen 80;\n    server_name qinyunjian.cloud www.qinyunjian.cloud;\n\n    # 重定向所有 HTTP 请求到 HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name qinyunjian.cloud www.qinyunjian.cloud;\n\n    # 指定 SSL 证书和密钥的路径\n    ssl_certificate /etc/letsencrypt/live/qinyunjian.cloud/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/qinyunjian.cloud/privkey.pem;\n\n    # 其他 SSL 设置...\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 5m;\n    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';\n    ssl_prefer_server_ciphers on;\n\n    # 配置网站根目录\n    root /var/www/qinyunjian.cloud/html;\n\n    # 其他配置...\n}\n```\n\n#### 步骤 3: 检查 Nginx 配置并重启服务\n\n在编辑配置文件之后，您应该检查配置是否正确：\n\n```shell\nsudo nginx -t\n```\n\n如果显示配置文件语法正确，那么您可以重启 Nginx 以应用更改：\n\n```shell\nsudo systemctl restart nginx\n```","source":"_posts/为qinyunjian.cloud安装SSL证书.md","raw":"---\ntitle: 二、为qinyunjian.cloud安装SSL证书\ndate: 2024-06-04 22:32:50\ntags: nginx\n---\n### 安装SSL证书\n\n​\t前置条件，我现在有一个域名（qinyunjian.cloud），默认使用的是http协议，现在我需要为这个域名安装证书，\n\n#### 步骤 1: 安装 Certbot\n\nCertbot 是 Let's Encrypt 的官方客户端，用于自动化安装和更新 SSL 证书。\n\n1. **启用 EPEL 仓库**：(在安装docker的时候已经安装EPEL 仓库，不必重复安装)\n\n   ```shell\n   sudo yum install epel-release\n   ```\n\n2. **安装 Certbot**：\n\n   对于Nginx：\n\n   ```shell\n   sudo yum -y install certbot-nginx\n   ```\n\n#### 步骤 2: 获取和安装证书\n\n使用 Certbot 为您的域名获取和安装证书：\n\n- Nginx\n\n  ```shell\n  sudo certbot --nginx -d qinyunjian.cloud -d www.qinyunjian.cloud\n  ```\n\n- 如果 Certbot 成功安装证书，它将自动修改您的 Nginx 配置文件以使用 SSL，如果说运行了这一步，但是`nginx.conf`文件没有能被正确的更改，则需要手动配置`nginx.conf`。\n\n#### 步骤 3: 自动续订证书\n\nLet's Encrypt 证书有效期为 90 天，可以通过 Certbot 自动续订：\n\n- 测试自动续订\n\n  ```shell\n  sudo certbot renew --dry-run\n  ```\n\n- 如果测试成功，Certbot 将自动设置定时任务来续订证书。\n\n#### 步骤 4: 确认 HTTPS 生效\n\n在完成上述步骤后，您可以通过访问 `https://qinyunjian.cloud` 来确认 SSL 证书是否成功安装。浏览器应该显示一个锁图标，表示连接是安全的。\n\n#### 手动配置`nginx.conf`\n\n​\t如果 Certbot 运行失败，没有自动修改 Nginx 的配置文件来启用 HTTPS 和配置 HTTP 到 HTTPS 的重定向，您可以手动编辑 Nginx 的配置文件来实现这些功能。以下是一个基本的示例，展示如何为您的域名 `qinyunjian.cloud` 配置 SSL 证书和重定向。\n\n#### 步骤 1: 打开您的 Nginx 配置文件\n\n对于大多数 Nginx 安装来说，配置文件通常位于 `/etc/nginx/nginx.conf` 或者 `/etc/nginx/sites-available/` 目录下的某个文件。如果您使用的是后者，那么您的配置可能位于一个特定的域名文件中，例如 `/etc/nginx/sites-available/qinyunjian.cloud.conf`。\n\n#### 步骤 2: 配置 SSL\n\n以下是一个配置 SSL 的示例。请确保您已经通过 Certbot 获取了证书，并知道证书和私钥文件的路径。\n\n```shell\nserver {\n    listen 80;\n    server_name qinyunjian.cloud www.qinyunjian.cloud;\n\n    # 重定向所有 HTTP 请求到 HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name qinyunjian.cloud www.qinyunjian.cloud;\n\n    # 指定 SSL 证书和密钥的路径\n    ssl_certificate /etc/letsencrypt/live/qinyunjian.cloud/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/qinyunjian.cloud/privkey.pem;\n\n    # 其他 SSL 设置...\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 5m;\n    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';\n    ssl_prefer_server_ciphers on;\n\n    # 配置网站根目录\n    root /var/www/qinyunjian.cloud/html;\n\n    # 其他配置...\n}\n```\n\n#### 步骤 3: 检查 Nginx 配置并重启服务\n\n在编辑配置文件之后，您应该检查配置是否正确：\n\n```shell\nsudo nginx -t\n```\n\n如果显示配置文件语法正确，那么您可以重启 Nginx 以应用更改：\n\n```shell\nsudo systemctl restart nginx\n```","slug":"为qinyunjian.cloud安装SSL证书","published":1,"updated":"2024-07-26T15:40:17.311Z","_id":"clx19s52n0004iotl8bnafz91","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"安装SSL证书\"><a href=\"#安装SSL证书\" class=\"headerlink\" title=\"安装SSL证书\"></a>安装SSL证书</h3><p>​\t前置条件，我现在有一个域名（qinyunjian.cloud），默认使用的是http协议，现在我需要为这个域名安装证书，</p>\n<h4 id=\"步骤-1-安装-Certbot\"><a href=\"#步骤-1-安装-Certbot\" class=\"headerlink\" title=\"步骤 1: 安装 Certbot\"></a>步骤 1: 安装 Certbot</h4><p>Certbot 是 Let’s Encrypt 的官方客户端，用于自动化安装和更新 SSL 证书。</p>\n<ol>\n<li><p><strong>启用 EPEL 仓库</strong>：(在安装docker的时候已经安装EPEL 仓库，不必重复安装)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装 Certbot</strong>：</p>\n<p>对于Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install certbot-nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"步骤-2-获取和安装证书\"><a href=\"#步骤-2-获取和安装证书\" class=\"headerlink\" title=\"步骤 2: 获取和安装证书\"></a>步骤 2: 获取和安装证书</h4><p>使用 Certbot 为您的域名获取和安装证书：</p>\n<ul>\n<li><p>Nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d qinyunjian.cloud -d www.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 Certbot 成功安装证书，它将自动修改您的 Nginx 配置文件以使用 SSL，如果说运行了这一步，但是<code>nginx.conf</code>文件没有能被正确的更改，则需要手动配置<code>nginx.conf</code>。</p>\n</li>\n</ul>\n<h4 id=\"步骤-3-自动续订证书\"><a href=\"#步骤-3-自动续订证书\" class=\"headerlink\" title=\"步骤 3: 自动续订证书\"></a>步骤 3: 自动续订证书</h4><p>Let’s Encrypt 证书有效期为 90 天，可以通过 Certbot 自动续订：</p>\n<ul>\n<li><p>测试自动续订</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果测试成功，Certbot 将自动设置定时任务来续订证书。</p>\n</li>\n</ul>\n<h4 id=\"步骤-4-确认-HTTPS-生效\"><a href=\"#步骤-4-确认-HTTPS-生效\" class=\"headerlink\" title=\"步骤 4: 确认 HTTPS 生效\"></a>步骤 4: 确认 HTTPS 生效</h4><p>在完成上述步骤后，您可以通过访问 <code>https://qinyunjian.cloud</code> 来确认 SSL 证书是否成功安装。浏览器应该显示一个锁图标，表示连接是安全的。</p>\n<h4 id=\"手动配置nginx-conf\"><a href=\"#手动配置nginx-conf\" class=\"headerlink\" title=\"手动配置nginx.conf\"></a>手动配置<code>nginx.conf</code></h4><p>​\t如果 Certbot 运行失败，没有自动修改 Nginx 的配置文件来启用 HTTPS 和配置 HTTP 到 HTTPS 的重定向，您可以手动编辑 Nginx 的配置文件来实现这些功能。以下是一个基本的示例，展示如何为您的域名 <code>qinyunjian.cloud</code> 配置 SSL 证书和重定向。</p>\n<h4 id=\"步骤-1-打开您的-Nginx-配置文件\"><a href=\"#步骤-1-打开您的-Nginx-配置文件\" class=\"headerlink\" title=\"步骤 1: 打开您的 Nginx 配置文件\"></a>步骤 1: 打开您的 Nginx 配置文件</h4><p>对于大多数 Nginx 安装来说，配置文件通常位于 <code>/etc/nginx/nginx.conf</code> 或者 <code>/etc/nginx/sites-available/</code> 目录下的某个文件。如果您使用的是后者，那么您的配置可能位于一个特定的域名文件中，例如 <code>/etc/nginx/sites-available/qinyunjian.cloud.conf</code>。</p>\n<h4 id=\"步骤-2-配置-SSL\"><a href=\"#步骤-2-配置-SSL\" class=\"headerlink\" title=\"步骤 2: 配置 SSL\"></a>步骤 2: 配置 SSL</h4><p>以下是一个配置 SSL 的示例。请确保您已经通过 Certbot 获取了证书，并知道证书和私钥文件的路径。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name qinyunjian.cloud www.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 重定向所有 HTTP 请求到 HTTPS</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    server_name qinyunjian.cloud www.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 指定 SSL 证书和密钥的路径</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/qinyunjian.cloud/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/qinyunjian.cloud/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 其他 SSL 设置...</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers &#x27;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256&#x27;;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 配置网站根目录</span><br><span class=\"line\">    root /var/www/qinyunjian.cloud/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 其他配置...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-3-检查-Nginx-配置并重启服务\"><a href=\"#步骤-3-检查-Nginx-配置并重启服务\" class=\"headerlink\" title=\"步骤 3: 检查 Nginx 配置并重启服务\"></a>步骤 3: 检查 Nginx 配置并重启服务</h4><p>在编辑配置文件之后，您应该检查配置是否正确：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果显示配置文件语法正确，那么您可以重启 Nginx 以应用更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"安装SSL证书\"><a href=\"#安装SSL证书\" class=\"headerlink\" title=\"安装SSL证书\"></a>安装SSL证书</h3><p>​\t前置条件，我现在有一个域名（qinyunjian.cloud），默认使用的是http协议，现在我需要为这个域名安装证书，</p>\n<h4 id=\"步骤-1-安装-Certbot\"><a href=\"#步骤-1-安装-Certbot\" class=\"headerlink\" title=\"步骤 1: 安装 Certbot\"></a>步骤 1: 安装 Certbot</h4><p>Certbot 是 Let’s Encrypt 的官方客户端，用于自动化安装和更新 SSL 证书。</p>\n<ol>\n<li><p><strong>启用 EPEL 仓库</strong>：(在安装docker的时候已经安装EPEL 仓库，不必重复安装)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装 Certbot</strong>：</p>\n<p>对于Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install certbot-nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"步骤-2-获取和安装证书\"><a href=\"#步骤-2-获取和安装证书\" class=\"headerlink\" title=\"步骤 2: 获取和安装证书\"></a>步骤 2: 获取和安装证书</h4><p>使用 Certbot 为您的域名获取和安装证书：</p>\n<ul>\n<li><p>Nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d qinyunjian.cloud -d www.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 Certbot 成功安装证书，它将自动修改您的 Nginx 配置文件以使用 SSL，如果说运行了这一步，但是<code>nginx.conf</code>文件没有能被正确的更改，则需要手动配置<code>nginx.conf</code>。</p>\n</li>\n</ul>\n<h4 id=\"步骤-3-自动续订证书\"><a href=\"#步骤-3-自动续订证书\" class=\"headerlink\" title=\"步骤 3: 自动续订证书\"></a>步骤 3: 自动续订证书</h4><p>Let’s Encrypt 证书有效期为 90 天，可以通过 Certbot 自动续订：</p>\n<ul>\n<li><p>测试自动续订</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果测试成功，Certbot 将自动设置定时任务来续订证书。</p>\n</li>\n</ul>\n<h4 id=\"步骤-4-确认-HTTPS-生效\"><a href=\"#步骤-4-确认-HTTPS-生效\" class=\"headerlink\" title=\"步骤 4: 确认 HTTPS 生效\"></a>步骤 4: 确认 HTTPS 生效</h4><p>在完成上述步骤后，您可以通过访问 <code>https://qinyunjian.cloud</code> 来确认 SSL 证书是否成功安装。浏览器应该显示一个锁图标，表示连接是安全的。</p>\n<h4 id=\"手动配置nginx-conf\"><a href=\"#手动配置nginx-conf\" class=\"headerlink\" title=\"手动配置nginx.conf\"></a>手动配置<code>nginx.conf</code></h4><p>​\t如果 Certbot 运行失败，没有自动修改 Nginx 的配置文件来启用 HTTPS 和配置 HTTP 到 HTTPS 的重定向，您可以手动编辑 Nginx 的配置文件来实现这些功能。以下是一个基本的示例，展示如何为您的域名 <code>qinyunjian.cloud</code> 配置 SSL 证书和重定向。</p>\n<h4 id=\"步骤-1-打开您的-Nginx-配置文件\"><a href=\"#步骤-1-打开您的-Nginx-配置文件\" class=\"headerlink\" title=\"步骤 1: 打开您的 Nginx 配置文件\"></a>步骤 1: 打开您的 Nginx 配置文件</h4><p>对于大多数 Nginx 安装来说，配置文件通常位于 <code>/etc/nginx/nginx.conf</code> 或者 <code>/etc/nginx/sites-available/</code> 目录下的某个文件。如果您使用的是后者，那么您的配置可能位于一个特定的域名文件中，例如 <code>/etc/nginx/sites-available/qinyunjian.cloud.conf</code>。</p>\n<h4 id=\"步骤-2-配置-SSL\"><a href=\"#步骤-2-配置-SSL\" class=\"headerlink\" title=\"步骤 2: 配置 SSL\"></a>步骤 2: 配置 SSL</h4><p>以下是一个配置 SSL 的示例。请确保您已经通过 Certbot 获取了证书，并知道证书和私钥文件的路径。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name qinyunjian.cloud www.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 重定向所有 HTTP 请求到 HTTPS</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    server_name qinyunjian.cloud www.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 指定 SSL 证书和密钥的路径</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/qinyunjian.cloud/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/qinyunjian.cloud/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 其他 SSL 设置...</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers &#x27;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256&#x27;;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 配置网站根目录</span><br><span class=\"line\">    root /var/www/qinyunjian.cloud/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 其他配置...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-3-检查-Nginx-配置并重启服务\"><a href=\"#步骤-3-检查-Nginx-配置并重启服务\" class=\"headerlink\" title=\"步骤 3: 检查 Nginx 配置并重启服务\"></a>步骤 3: 检查 Nginx 配置并重启服务</h4><p>在编辑配置文件之后，您应该检查配置是否正确：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果显示配置文件语法正确，那么您可以重启 Nginx 以应用更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>"},{"title":"三、为qinyunjian.cloud配置二级域名","date":"2024-06-04T14:32:50.000Z","_content":"### 为`qinyunjian.cloud`配置二级域名\n\n​\t前提，我现在购买了一个域名`qinyunjian.cloud`，现在我需要为这个域名添加二级域名`hotel.qinyunjian.cloud`，同时可以把前端Web应用和后端服务部署到这个域名。\n\n#### 步骤 1: 确保域名解析\n\n​\t首先，确保您的二级域名 `hotel.qinyunjian.cloud` 已经通过 DNS 正确解析到您的服务器的公网 IP 地址。我这里购买的是阿里云的域名，所以需要到阿里云解析中心，添加记录。\n\n​\t1、点击域名解析。2、点击你的域名。3、点击添加记录。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226093320058.png)\n\n#### 步骤 2: 使用 Certbot 获取证书\n\n​\t运行 Certbot 并选择 Nginx 插件来自动获取和配置 Let's Encrypt SSL 证书：\n\n```shell\nsudo certbot --nginx -d hotel.qinyunjian.cloud\n```\n\n这个命令会自动为您的二级域名 `hotel.qinyunjian.cloud` 获取 SSL 证书，并更新 Nginx 的配置文件来使用这个证书。\n\n#### 步骤3：配置`/etc/nginx/conf.d`文件\n\n​\t编辑您的 Nginx 配置文件（通常位于 `/etc/nginx/nginx.conf` 或 `/etc/nginx/sites-available/` 目录下的某个文件），添加一个新的 `server` 块，以便将 `hotel.qinyunjian.cloud` ，（以下文件是需要自己新建的）的请求代理到您的 SpringBoot 服务：\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/9132726f9a8ad29222730bed828cae8.png)\n\n​\t以下是配置文件详细说明。\n\n```\n# 重定向所有 HTTP 请求到 HTTPS\nserver {\n    listen 80; # 监听 80 端口\n    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置\n    return 301 https://$host$request_uri; # 将所有 HTTP 请求重定向到 HTTPS\n}\n\n# 处理 HTTPS 请求\nserver {\n    listen 443 ssl http2; # 监听 443 端口，启用 SSL 和 HTTP/2\n    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置\n\n    # SSL 证书配置\n    ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem; # 指定证书文件\n    ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem; # 指定证书密钥文件\n\n    # SSL 性能优化配置\n    ssl_session_cache shared:SSL:10m; # 启用 SSL 会话缓存，提高性能\n    ssl_session_timeout 10m; # 设置 SSL 会话的超时时间\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305'; # 指定加密套件\n    ssl_prefer_server_ciphers on; # 服务器优先选择加密算法\n\n    # Web 应用根目录\n    root /var/www/hotelweb; # 设置 Web 应用的根目录\n\n    # 前端应用路由处理\n    location / {\n        try_files $uri $uri/ /index.html; # 尝试返回请求的文件或目录，如果不存在则返回 index.html\n    }\n\n    # 代理 /service 路径到后端 Spring Boot 应用\n    location /service {\n        rewrite ^/service(.*) /$1 break; # 重写 URL，去除 /service 前缀\n        proxy_pass http://localhost:84; # 代理请求到本地的 84 端口\n        proxy_http_version 1.1; # 使用 HTTP/1.1 与代理服务器通信\n        proxy_set_header Upgrade $http_upgrade; # 传递升级头部，用于 WebSocket 支持\n        proxy_set_header Connection 'upgrade'; # 传递连接头部，同样用于 WebSocket\n        proxy_set_header Host $host; # 传递原始请求的 Host 头部\n        proxy_cache_bypass $http_upgrade; # 绕过缓存处理 WebSocket 请求\n    }\n}\n```\n\n#### 第一个 server 块\n\n1. `listen 80;`：这行配置指示 Nginx 监听 80 端口（HTTP）上的请求。\n2. `server_name hotel.qinyunjian.cloud;`：定义了此配置块处理请求的域名。\n3. `return 301 https://$host$request_uri;`：所有 http (80 端口) 的请求将被永久重定向到 https 版本的相同 URI。这是一种常见的做法，用于强制使用 HTTPS。\n\n#### 第二个 server 块\n\n1. `listen 443 ssl http2;`：这行配置指示 Nginx 监听 443 端口上的请求，并启用 SSL 和 HTTP/2 支持。443 端口是 HTTPS 默认使用的端口。\n2. `server_name hotel.qinyunjian.cloud;`：同样定义了此配置块处理请求的域名。\n3. `ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem;`：指定 SSL 证书的位置。这个证书用于 HTTPS 加密。\n4. `ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem;`：指定 SSL 证书的私钥位置。\n5. `ssl_session_cache shared:SSL:10m;`：启用 SSL 会话缓存，以提高后续请求的性能。\n6. `ssl_session_timeout 10m;`：设置 SSL 会话的超时时间为 10 分钟。\n7. `ssl_ciphers [...]`：指定加密套件的列表，这些加密套件用于 SSL/TLS 握手过程中。\n8. `ssl_prefer_server_ciphers on;`：指示服务器优先使用自己的加密套件偏好，而不是客户端提供的。\n9. `root /var/www/hotelweb;`：定义了服务器的根目录。这是 Nginx 用来查找文件的路径。\n10. `location / {`：这个块指定了对于根路径（`/`）的请求，如何处理。\n    - `try_files $uri $uri/ /index.html;`：尝试按顺序返回请求的文件、目录或 `/index.html`。这用于单页应用，确保路由可以由前端 JavaScript 框架处理。\n11. `location /service {`：指定了对于 `/service` 路径的请求，如何处理。\n    - `rewrite ^/service(.*) /$1 break;`：这行将请求中的 `/service` 重写为 `/`，并停止处理后续的 rewrite 规则。这允许将 API 请求代理到应用而不改变路径。\n    - `proxy_pass http://localhost:84;`：将请求代理到本地 84 端口的应用（通常是一个后端服务，如 Spring Boot 应用）。\n    - `proxy_http_version 1.1;`：使用 HTTP 1.1 协议与代理服务器通信。\n    - `proxy_set_header Upgrade $http_upgrade;`：设置 HTTP 升级头部，用于 WebSockets 支持。\n    - `proxy_set_header Connection 'upgrade';`：设置连接头部，同样是为了 WebSockets。\n    - `proxy_set_header Host $host;`：设置请求的 Host 头部为原始请求的 Host，确保后端服务能正确识别请求的域名。\n    - `proxy_cache_bypass $http_upgrade;`：如果有 HTTP 升级请求，绕过缓存处理。\n\n#### 步骤 4: 检查 Nginx 配置并重启服务\n\n​\t在编辑配置文件后，您需要检查 Nginx 配置文件的语法是否正确：\n\n```\nsudo nginx -t\n```\n\n​\t如果没有问题，重启 Nginx 服务以应用更改：\n\n```shell\nsystemctl restart nginx\n```\n\n​\t现在，当访问 `https://hotel.qinyunjian.cloud` 时，请求应该会被自动代理到运行在服务器 84 端口的 SpringBoot 服务。\n\n","source":"_posts/为qinyunjian.cloud配置二级域名.md","raw":"---\ntitle: 三、为qinyunjian.cloud配置二级域名\ndate: 2024-06-04 22:32:50\ntags: nginx\n---\n### 为`qinyunjian.cloud`配置二级域名\n\n​\t前提，我现在购买了一个域名`qinyunjian.cloud`，现在我需要为这个域名添加二级域名`hotel.qinyunjian.cloud`，同时可以把前端Web应用和后端服务部署到这个域名。\n\n#### 步骤 1: 确保域名解析\n\n​\t首先，确保您的二级域名 `hotel.qinyunjian.cloud` 已经通过 DNS 正确解析到您的服务器的公网 IP 地址。我这里购买的是阿里云的域名，所以需要到阿里云解析中心，添加记录。\n\n​\t1、点击域名解析。2、点击你的域名。3、点击添加记录。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226093320058.png)\n\n#### 步骤 2: 使用 Certbot 获取证书\n\n​\t运行 Certbot 并选择 Nginx 插件来自动获取和配置 Let's Encrypt SSL 证书：\n\n```shell\nsudo certbot --nginx -d hotel.qinyunjian.cloud\n```\n\n这个命令会自动为您的二级域名 `hotel.qinyunjian.cloud` 获取 SSL 证书，并更新 Nginx 的配置文件来使用这个证书。\n\n#### 步骤3：配置`/etc/nginx/conf.d`文件\n\n​\t编辑您的 Nginx 配置文件（通常位于 `/etc/nginx/nginx.conf` 或 `/etc/nginx/sites-available/` 目录下的某个文件），添加一个新的 `server` 块，以便将 `hotel.qinyunjian.cloud` ，（以下文件是需要自己新建的）的请求代理到您的 SpringBoot 服务：\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/9132726f9a8ad29222730bed828cae8.png)\n\n​\t以下是配置文件详细说明。\n\n```\n# 重定向所有 HTTP 请求到 HTTPS\nserver {\n    listen 80; # 监听 80 端口\n    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置\n    return 301 https://$host$request_uri; # 将所有 HTTP 请求重定向到 HTTPS\n}\n\n# 处理 HTTPS 请求\nserver {\n    listen 443 ssl http2; # 监听 443 端口，启用 SSL 和 HTTP/2\n    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置\n\n    # SSL 证书配置\n    ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem; # 指定证书文件\n    ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem; # 指定证书密钥文件\n\n    # SSL 性能优化配置\n    ssl_session_cache shared:SSL:10m; # 启用 SSL 会话缓存，提高性能\n    ssl_session_timeout 10m; # 设置 SSL 会话的超时时间\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305'; # 指定加密套件\n    ssl_prefer_server_ciphers on; # 服务器优先选择加密算法\n\n    # Web 应用根目录\n    root /var/www/hotelweb; # 设置 Web 应用的根目录\n\n    # 前端应用路由处理\n    location / {\n        try_files $uri $uri/ /index.html; # 尝试返回请求的文件或目录，如果不存在则返回 index.html\n    }\n\n    # 代理 /service 路径到后端 Spring Boot 应用\n    location /service {\n        rewrite ^/service(.*) /$1 break; # 重写 URL，去除 /service 前缀\n        proxy_pass http://localhost:84; # 代理请求到本地的 84 端口\n        proxy_http_version 1.1; # 使用 HTTP/1.1 与代理服务器通信\n        proxy_set_header Upgrade $http_upgrade; # 传递升级头部，用于 WebSocket 支持\n        proxy_set_header Connection 'upgrade'; # 传递连接头部，同样用于 WebSocket\n        proxy_set_header Host $host; # 传递原始请求的 Host 头部\n        proxy_cache_bypass $http_upgrade; # 绕过缓存处理 WebSocket 请求\n    }\n}\n```\n\n#### 第一个 server 块\n\n1. `listen 80;`：这行配置指示 Nginx 监听 80 端口（HTTP）上的请求。\n2. `server_name hotel.qinyunjian.cloud;`：定义了此配置块处理请求的域名。\n3. `return 301 https://$host$request_uri;`：所有 http (80 端口) 的请求将被永久重定向到 https 版本的相同 URI。这是一种常见的做法，用于强制使用 HTTPS。\n\n#### 第二个 server 块\n\n1. `listen 443 ssl http2;`：这行配置指示 Nginx 监听 443 端口上的请求，并启用 SSL 和 HTTP/2 支持。443 端口是 HTTPS 默认使用的端口。\n2. `server_name hotel.qinyunjian.cloud;`：同样定义了此配置块处理请求的域名。\n3. `ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem;`：指定 SSL 证书的位置。这个证书用于 HTTPS 加密。\n4. `ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem;`：指定 SSL 证书的私钥位置。\n5. `ssl_session_cache shared:SSL:10m;`：启用 SSL 会话缓存，以提高后续请求的性能。\n6. `ssl_session_timeout 10m;`：设置 SSL 会话的超时时间为 10 分钟。\n7. `ssl_ciphers [...]`：指定加密套件的列表，这些加密套件用于 SSL/TLS 握手过程中。\n8. `ssl_prefer_server_ciphers on;`：指示服务器优先使用自己的加密套件偏好，而不是客户端提供的。\n9. `root /var/www/hotelweb;`：定义了服务器的根目录。这是 Nginx 用来查找文件的路径。\n10. `location / {`：这个块指定了对于根路径（`/`）的请求，如何处理。\n    - `try_files $uri $uri/ /index.html;`：尝试按顺序返回请求的文件、目录或 `/index.html`。这用于单页应用，确保路由可以由前端 JavaScript 框架处理。\n11. `location /service {`：指定了对于 `/service` 路径的请求，如何处理。\n    - `rewrite ^/service(.*) /$1 break;`：这行将请求中的 `/service` 重写为 `/`，并停止处理后续的 rewrite 规则。这允许将 API 请求代理到应用而不改变路径。\n    - `proxy_pass http://localhost:84;`：将请求代理到本地 84 端口的应用（通常是一个后端服务，如 Spring Boot 应用）。\n    - `proxy_http_version 1.1;`：使用 HTTP 1.1 协议与代理服务器通信。\n    - `proxy_set_header Upgrade $http_upgrade;`：设置 HTTP 升级头部，用于 WebSockets 支持。\n    - `proxy_set_header Connection 'upgrade';`：设置连接头部，同样是为了 WebSockets。\n    - `proxy_set_header Host $host;`：设置请求的 Host 头部为原始请求的 Host，确保后端服务能正确识别请求的域名。\n    - `proxy_cache_bypass $http_upgrade;`：如果有 HTTP 升级请求，绕过缓存处理。\n\n#### 步骤 4: 检查 Nginx 配置并重启服务\n\n​\t在编辑配置文件后，您需要检查 Nginx 配置文件的语法是否正确：\n\n```\nsudo nginx -t\n```\n\n​\t如果没有问题，重启 Nginx 服务以应用更改：\n\n```shell\nsystemctl restart nginx\n```\n\n​\t现在，当访问 `https://hotel.qinyunjian.cloud` 时，请求应该会被自动代理到运行在服务器 84 端口的 SpringBoot 服务。\n\n","slug":"为qinyunjian.cloud配置二级域名","published":1,"updated":"2024-07-26T15:39:30.685Z","_id":"clx19s52o0005iotl1t143b39","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"为qinyunjian-cloud配置二级域名\"><a href=\"#为qinyunjian-cloud配置二级域名\" class=\"headerlink\" title=\"为qinyunjian.cloud配置二级域名\"></a>为<code>qinyunjian.cloud</code>配置二级域名</h3><p>​\t前提，我现在购买了一个域名<code>qinyunjian.cloud</code>，现在我需要为这个域名添加二级域名<code>hotel.qinyunjian.cloud</code>，同时可以把前端Web应用和后端服务部署到这个域名。</p>\n<h4 id=\"步骤-1-确保域名解析\"><a href=\"#步骤-1-确保域名解析\" class=\"headerlink\" title=\"步骤 1: 确保域名解析\"></a>步骤 1: 确保域名解析</h4><p>​\t首先，确保您的二级域名 <code>hotel.qinyunjian.cloud</code> 已经通过 DNS 正确解析到您的服务器的公网 IP 地址。我这里购买的是阿里云的域名，所以需要到阿里云解析中心，添加记录。</p>\n<p>​\t1、点击域名解析。2、点击你的域名。3、点击添加记录。</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226093320058.png\"></p>\n<h4 id=\"步骤-2-使用-Certbot-获取证书\"><a href=\"#步骤-2-使用-Certbot-获取证书\" class=\"headerlink\" title=\"步骤 2: 使用 Certbot 获取证书\"></a>步骤 2: 使用 Certbot 获取证书</h4><p>​\t运行 Certbot 并选择 Nginx 插件来自动获取和配置 Let’s Encrypt SSL 证书：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d hotel.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会自动为您的二级域名 <code>hotel.qinyunjian.cloud</code> 获取 SSL 证书，并更新 Nginx 的配置文件来使用这个证书。</p>\n<h4 id=\"步骤3：配置-etc-nginx-conf-d文件\"><a href=\"#步骤3：配置-etc-nginx-conf-d文件\" class=\"headerlink\" title=\"步骤3：配置/etc/nginx/conf.d文件\"></a>步骤3：配置<code>/etc/nginx/conf.d</code>文件</h4><p>​\t编辑您的 Nginx 配置文件（通常位于 <code>/etc/nginx/nginx.conf</code> 或 <code>/etc/nginx/sites-available/</code> 目录下的某个文件），添加一个新的 <code>server</code> 块，以便将 <code>hotel.qinyunjian.cloud</code> ，（以下文件是需要自己新建的）的请求代理到您的 SpringBoot 服务：</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/9132726f9a8ad29222730bed828cae8.png\"></p>\n<p>​\t以下是配置文件详细说明。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重定向所有 HTTP 请求到 HTTPS</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80; # 监听 80 端口</span><br><span class=\"line\">    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置</span><br><span class=\"line\">    return 301 https://$host$request_uri; # 将所有 HTTP 请求重定向到 HTTPS</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 处理 HTTPS 请求</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2; # 监听 443 端口，启用 SSL 和 HTTP/2</span><br><span class=\"line\">    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL 证书配置</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem; # 指定证书文件</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem; # 指定证书密钥文件</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL 性能优化配置</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m; # 启用 SSL 会话缓存，提高性能</span><br><span class=\"line\">    ssl_session_timeout 10m; # 设置 SSL 会话的超时时间</span><br><span class=\"line\">    ssl_ciphers &#x27;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305&#x27;; # 指定加密套件</span><br><span class=\"line\">    ssl_prefer_server_ciphers on; # 服务器优先选择加密算法</span><br><span class=\"line\"></span><br><span class=\"line\">    # Web 应用根目录</span><br><span class=\"line\">    root /var/www/hotelweb; # 设置 Web 应用的根目录</span><br><span class=\"line\"></span><br><span class=\"line\">    # 前端应用路由处理</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 尝试返回请求的文件或目录，如果不存在则返回 index.html</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 代理 /service 路径到后端 Spring Boot 应用</span><br><span class=\"line\">    location /service &#123;</span><br><span class=\"line\">        rewrite ^/service(.*) /$1 break; # 重写 URL，去除 /service 前缀</span><br><span class=\"line\">        proxy_pass http://localhost:84; # 代理请求到本地的 84 端口</span><br><span class=\"line\">        proxy_http_version 1.1; # 使用 HTTP/1.1 与代理服务器通信</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade; # 传递升级头部，用于 WebSocket 支持</span><br><span class=\"line\">        proxy_set_header Connection &#x27;upgrade&#x27;; # 传递连接头部，同样用于 WebSocket</span><br><span class=\"line\">        proxy_set_header Host $host; # 传递原始请求的 Host 头部</span><br><span class=\"line\">        proxy_cache_bypass $http_upgrade; # 绕过缓存处理 WebSocket 请求</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第一个-server-块\"><a href=\"#第一个-server-块\" class=\"headerlink\" title=\"第一个 server 块\"></a>第一个 server 块</h4><ol>\n<li><code>listen 80;</code>：这行配置指示 Nginx 监听 80 端口（HTTP）上的请求。</li>\n<li><code>server_name hotel.qinyunjian.cloud;</code>：定义了此配置块处理请求的域名。</li>\n<li><code>return 301 https://$host$request_uri;</code>：所有 http (80 端口) 的请求将被永久重定向到 https 版本的相同 URI。这是一种常见的做法，用于强制使用 HTTPS。</li>\n</ol>\n<h4 id=\"第二个-server-块\"><a href=\"#第二个-server-块\" class=\"headerlink\" title=\"第二个 server 块\"></a>第二个 server 块</h4><ol>\n<li><code>listen 443 ssl http2;</code>：这行配置指示 Nginx 监听 443 端口上的请求，并启用 SSL 和 HTTP&#x2F;2 支持。443 端口是 HTTPS 默认使用的端口。</li>\n<li><code>server_name hotel.qinyunjian.cloud;</code>：同样定义了此配置块处理请求的域名。</li>\n<li><code>ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem;</code>：指定 SSL 证书的位置。这个证书用于 HTTPS 加密。</li>\n<li><code>ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem;</code>：指定 SSL 证书的私钥位置。</li>\n<li><code>ssl_session_cache shared:SSL:10m;</code>：启用 SSL 会话缓存，以提高后续请求的性能。</li>\n<li><code>ssl_session_timeout 10m;</code>：设置 SSL 会话的超时时间为 10 分钟。</li>\n<li><code>ssl_ciphers [...]</code>：指定加密套件的列表，这些加密套件用于 SSL&#x2F;TLS 握手过程中。</li>\n<li><code>ssl_prefer_server_ciphers on;</code>：指示服务器优先使用自己的加密套件偏好，而不是客户端提供的。</li>\n<li><code>root /var/www/hotelweb;</code>：定义了服务器的根目录。这是 Nginx 用来查找文件的路径。</li>\n<li><code>location / &#123;</code>：这个块指定了对于根路径（<code>/</code>）的请求，如何处理。<ul>\n<li><code>try_files $uri $uri/ /index.html;</code>：尝试按顺序返回请求的文件、目录或 <code>/index.html</code>。这用于单页应用，确保路由可以由前端 JavaScript 框架处理。</li>\n</ul>\n</li>\n<li><code>location /service &#123;</code>：指定了对于 <code>/service</code> 路径的请求，如何处理。<ul>\n<li><code>rewrite ^/service(.*) /$1 break;</code>：这行将请求中的 <code>/service</code> 重写为 <code>/</code>，并停止处理后续的 rewrite 规则。这允许将 API 请求代理到应用而不改变路径。</li>\n<li><code>proxy_pass http://localhost:84;</code>：将请求代理到本地 84 端口的应用（通常是一个后端服务，如 Spring Boot 应用）。</li>\n<li><code>proxy_http_version 1.1;</code>：使用 HTTP 1.1 协议与代理服务器通信。</li>\n<li><code>proxy_set_header Upgrade $http_upgrade;</code>：设置 HTTP 升级头部，用于 WebSockets 支持。</li>\n<li><code>proxy_set_header Connection &#39;upgrade&#39;;</code>：设置连接头部，同样是为了 WebSockets。</li>\n<li><code>proxy_set_header Host $host;</code>：设置请求的 Host 头部为原始请求的 Host，确保后端服务能正确识别请求的域名。</li>\n<li><code>proxy_cache_bypass $http_upgrade;</code>：如果有 HTTP 升级请求，绕过缓存处理。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"步骤-4-检查-Nginx-配置并重启服务\"><a href=\"#步骤-4-检查-Nginx-配置并重启服务\" class=\"headerlink\" title=\"步骤 4: 检查 Nginx 配置并重启服务\"></a>步骤 4: 检查 Nginx 配置并重启服务</h4><p>​\t在编辑配置文件后，您需要检查 Nginx 配置文件的语法是否正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>​\t如果没有问题，重启 Nginx 服务以应用更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<p>​\t现在，当访问 <code>https://hotel.qinyunjian.cloud</code> 时，请求应该会被自动代理到运行在服务器 84 端口的 SpringBoot 服务。</p>\n","excerpt":"","more":"<h3 id=\"为qinyunjian-cloud配置二级域名\"><a href=\"#为qinyunjian-cloud配置二级域名\" class=\"headerlink\" title=\"为qinyunjian.cloud配置二级域名\"></a>为<code>qinyunjian.cloud</code>配置二级域名</h3><p>​\t前提，我现在购买了一个域名<code>qinyunjian.cloud</code>，现在我需要为这个域名添加二级域名<code>hotel.qinyunjian.cloud</code>，同时可以把前端Web应用和后端服务部署到这个域名。</p>\n<h4 id=\"步骤-1-确保域名解析\"><a href=\"#步骤-1-确保域名解析\" class=\"headerlink\" title=\"步骤 1: 确保域名解析\"></a>步骤 1: 确保域名解析</h4><p>​\t首先，确保您的二级域名 <code>hotel.qinyunjian.cloud</code> 已经通过 DNS 正确解析到您的服务器的公网 IP 地址。我这里购买的是阿里云的域名，所以需要到阿里云解析中心，添加记录。</p>\n<p>​\t1、点击域名解析。2、点击你的域名。3、点击添加记录。</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226093320058.png\"></p>\n<h4 id=\"步骤-2-使用-Certbot-获取证书\"><a href=\"#步骤-2-使用-Certbot-获取证书\" class=\"headerlink\" title=\"步骤 2: 使用 Certbot 获取证书\"></a>步骤 2: 使用 Certbot 获取证书</h4><p>​\t运行 Certbot 并选择 Nginx 插件来自动获取和配置 Let’s Encrypt SSL 证书：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d hotel.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会自动为您的二级域名 <code>hotel.qinyunjian.cloud</code> 获取 SSL 证书，并更新 Nginx 的配置文件来使用这个证书。</p>\n<h4 id=\"步骤3：配置-etc-nginx-conf-d文件\"><a href=\"#步骤3：配置-etc-nginx-conf-d文件\" class=\"headerlink\" title=\"步骤3：配置/etc/nginx/conf.d文件\"></a>步骤3：配置<code>/etc/nginx/conf.d</code>文件</h4><p>​\t编辑您的 Nginx 配置文件（通常位于 <code>/etc/nginx/nginx.conf</code> 或 <code>/etc/nginx/sites-available/</code> 目录下的某个文件），添加一个新的 <code>server</code> 块，以便将 <code>hotel.qinyunjian.cloud</code> ，（以下文件是需要自己新建的）的请求代理到您的 SpringBoot 服务：</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/9132726f9a8ad29222730bed828cae8.png\"></p>\n<p>​\t以下是配置文件详细说明。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重定向所有 HTTP 请求到 HTTPS</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80; # 监听 80 端口</span><br><span class=\"line\">    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置</span><br><span class=\"line\">    return 301 https://$host$request_uri; # 将所有 HTTP 请求重定向到 HTTPS</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 处理 HTTPS 请求</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2; # 监听 443 端口，启用 SSL 和 HTTP/2</span><br><span class=\"line\">    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL 证书配置</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem; # 指定证书文件</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem; # 指定证书密钥文件</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL 性能优化配置</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m; # 启用 SSL 会话缓存，提高性能</span><br><span class=\"line\">    ssl_session_timeout 10m; # 设置 SSL 会话的超时时间</span><br><span class=\"line\">    ssl_ciphers &#x27;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305&#x27;; # 指定加密套件</span><br><span class=\"line\">    ssl_prefer_server_ciphers on; # 服务器优先选择加密算法</span><br><span class=\"line\"></span><br><span class=\"line\">    # Web 应用根目录</span><br><span class=\"line\">    root /var/www/hotelweb; # 设置 Web 应用的根目录</span><br><span class=\"line\"></span><br><span class=\"line\">    # 前端应用路由处理</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 尝试返回请求的文件或目录，如果不存在则返回 index.html</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 代理 /service 路径到后端 Spring Boot 应用</span><br><span class=\"line\">    location /service &#123;</span><br><span class=\"line\">        rewrite ^/service(.*) /$1 break; # 重写 URL，去除 /service 前缀</span><br><span class=\"line\">        proxy_pass http://localhost:84; # 代理请求到本地的 84 端口</span><br><span class=\"line\">        proxy_http_version 1.1; # 使用 HTTP/1.1 与代理服务器通信</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade; # 传递升级头部，用于 WebSocket 支持</span><br><span class=\"line\">        proxy_set_header Connection &#x27;upgrade&#x27;; # 传递连接头部，同样用于 WebSocket</span><br><span class=\"line\">        proxy_set_header Host $host; # 传递原始请求的 Host 头部</span><br><span class=\"line\">        proxy_cache_bypass $http_upgrade; # 绕过缓存处理 WebSocket 请求</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第一个-server-块\"><a href=\"#第一个-server-块\" class=\"headerlink\" title=\"第一个 server 块\"></a>第一个 server 块</h4><ol>\n<li><code>listen 80;</code>：这行配置指示 Nginx 监听 80 端口（HTTP）上的请求。</li>\n<li><code>server_name hotel.qinyunjian.cloud;</code>：定义了此配置块处理请求的域名。</li>\n<li><code>return 301 https://$host$request_uri;</code>：所有 http (80 端口) 的请求将被永久重定向到 https 版本的相同 URI。这是一种常见的做法，用于强制使用 HTTPS。</li>\n</ol>\n<h4 id=\"第二个-server-块\"><a href=\"#第二个-server-块\" class=\"headerlink\" title=\"第二个 server 块\"></a>第二个 server 块</h4><ol>\n<li><code>listen 443 ssl http2;</code>：这行配置指示 Nginx 监听 443 端口上的请求，并启用 SSL 和 HTTP&#x2F;2 支持。443 端口是 HTTPS 默认使用的端口。</li>\n<li><code>server_name hotel.qinyunjian.cloud;</code>：同样定义了此配置块处理请求的域名。</li>\n<li><code>ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem;</code>：指定 SSL 证书的位置。这个证书用于 HTTPS 加密。</li>\n<li><code>ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem;</code>：指定 SSL 证书的私钥位置。</li>\n<li><code>ssl_session_cache shared:SSL:10m;</code>：启用 SSL 会话缓存，以提高后续请求的性能。</li>\n<li><code>ssl_session_timeout 10m;</code>：设置 SSL 会话的超时时间为 10 分钟。</li>\n<li><code>ssl_ciphers [...]</code>：指定加密套件的列表，这些加密套件用于 SSL&#x2F;TLS 握手过程中。</li>\n<li><code>ssl_prefer_server_ciphers on;</code>：指示服务器优先使用自己的加密套件偏好，而不是客户端提供的。</li>\n<li><code>root /var/www/hotelweb;</code>：定义了服务器的根目录。这是 Nginx 用来查找文件的路径。</li>\n<li><code>location / &#123;</code>：这个块指定了对于根路径（<code>/</code>）的请求，如何处理。<ul>\n<li><code>try_files $uri $uri/ /index.html;</code>：尝试按顺序返回请求的文件、目录或 <code>/index.html</code>。这用于单页应用，确保路由可以由前端 JavaScript 框架处理。</li>\n</ul>\n</li>\n<li><code>location /service &#123;</code>：指定了对于 <code>/service</code> 路径的请求，如何处理。<ul>\n<li><code>rewrite ^/service(.*) /$1 break;</code>：这行将请求中的 <code>/service</code> 重写为 <code>/</code>，并停止处理后续的 rewrite 规则。这允许将 API 请求代理到应用而不改变路径。</li>\n<li><code>proxy_pass http://localhost:84;</code>：将请求代理到本地 84 端口的应用（通常是一个后端服务，如 Spring Boot 应用）。</li>\n<li><code>proxy_http_version 1.1;</code>：使用 HTTP 1.1 协议与代理服务器通信。</li>\n<li><code>proxy_set_header Upgrade $http_upgrade;</code>：设置 HTTP 升级头部，用于 WebSockets 支持。</li>\n<li><code>proxy_set_header Connection &#39;upgrade&#39;;</code>：设置连接头部，同样是为了 WebSockets。</li>\n<li><code>proxy_set_header Host $host;</code>：设置请求的 Host 头部为原始请求的 Host，确保后端服务能正确识别请求的域名。</li>\n<li><code>proxy_cache_bypass $http_upgrade;</code>：如果有 HTTP 升级请求，绕过缓存处理。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"步骤-4-检查-Nginx-配置并重启服务\"><a href=\"#步骤-4-检查-Nginx-配置并重启服务\" class=\"headerlink\" title=\"步骤 4: 检查 Nginx 配置并重启服务\"></a>步骤 4: 检查 Nginx 配置并重启服务</h4><p>​\t在编辑配置文件后，您需要检查 Nginx 配置文件的语法是否正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>​\t如果没有问题，重启 Nginx 服务以应用更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<p>​\t现在，当访问 <code>https://hotel.qinyunjian.cloud</code> 时，请求应该会被自动代理到运行在服务器 84 端口的 SpringBoot 服务。</p>\n"},{"title":"二、Docker安装minio","date":"2024-06-12T09:33:50.000Z","_content":"\nMinIO 是一个高性能的分布式对象存储服务，它可以用于存储大量非结构化数据，如照片、视频、日志文件等。通过 Docker 安装和运行 MinIO 是一种快速且方便的方法。下面是在 Docker 上安装和运行 MinIO 的步骤：\n\n## Docker安装minio\n\n### 1. 拉取 MinIO Docker 镜像\n\n首先，你需要从 Docker Hub 拉取最新的 MinIO 镜像。在你的终端中运行以下命令：\n\n```shell\ndocker pull minio/minio\n```\n\n### 2.启动minio容器\n\n```shell\ndocker run -d \\\n --name minio \\\n --cgroupns host \\\n --env MINIO_ROOT_USER=admin \\\n --env MINIO_ROOT_PASSWORD=******** \\\n -p 9000:9000/tcp \\\n -p 9090:9090/tcp \\\n --restart=always \\\n -v /mydata/minio/data:/data \\\n minio/minio server /data --console-address :9090 --address :9000 \n```\n\n Docker 运行 MinIO 服务，一个高性能的分布式对象存储服务，常用于存储大规模的非结构化数据。下面我将详细解释这个命令的各个部分：\n\n1. `docker run -d`：\n   - `docker run`：告诉 Docker 运行一个新的容器。\n   - `-d`：代表后台运行，让容器在后台执行。\n2. `--name minio`：\n   - `--name`：设置容器的名称，这里名称被设为 `minio`。\n3. `--cgroupns host`：\n   - `--cgroupns`：指定容器使用的 cgroup 命名空间类型。这里使用的是 `host`，意味着容器将使用宿主机的 cgroup 命名空间，而不是创建新的。\n4. `--env MINIO_ROOT_USER=admin` 和 `--env MINIO_ROOT_PASSWORD=********`：\n   - `--env`：设置环境变量。\n   - `MINIO_ROOT_USER` 和 `MINIO_ROOT_PASSWORD`：分别设置 MinIO 服务的根用户名称和密码。\n5. `-p 9000:9000/tcp` 和 `-p 9090:9090/tcp`：\n   - `-p`：端口映射，格式为 `宿主机端口:容器端口/tcp`。\n   - `9000:9000/tcp`：将容器的 9000 端口映射到宿主机的 9000 端口，MinIO 的主服务通常在此端口运行。\n   - `9090:9090/tcp`：将容器的 9090 端口映射到宿主机的 9090 端口，MinIO 的管理控制台通常在此端口运行。\n6. `--restart=always`：\n   - `--restart`：设置容器的重启策略。`always` 意味着无论容器的退出状态如何，只要 Docker 守护进程被重新启动，容器也将被重新启动。\n7. `-v /mydata/minio/data:/data`：\n   - `-v`：挂载卷，格式为 `宿主机路径:容器内路径`。\n   - `/mydata/minio/data:/data`：将宿主机的 `/mydata/minio/data` 目录挂载到容器内的 `/data` 目录，用于数据持久化。\n8. `minio/minio server /data`：\n   - `minio/minio`：Docker 镜像名称，表示使用 MinIO 的官方 Docker 镜像。\n   - `server /data`：MinIO 服务的启动命令，指定 `/data` 为数据存储位置。\n9. `--console-address :9090 --address :9000`：\n   - `--console-address :9090`：设置 MinIO 控制台的监听地址和端口。\n   - `--address :9000`：设置 MinIO 服务的监听地址和端口。\n\n整个命令的作用是在 Docker 中运行一个名为 `minio` 的容器，配置了环境变量、端口映射和卷挂载，并设定了服务及控制台的监听端口，用于提供一个持久化的分布式对象存储服务。\n\n## Docker安装MinIO Client (`mc`)\n\n### 1. 拉取 `mc` Docker 镜像\n\n```shell\ndocker pull minio/mc\n```\n\n这个命令从 Docker Hub 上拉取最新的 MinIO Client (`mc`) 镜像。这样可以确保你使用的是最新版的客户端。\n\n### 2. 通过 Docker 运行 `mc` 并进入其 Shell\n\n```shell\ndocker run -it --entrypoint=/bin/sh minio/mc\n```\n\n### 3. 配置 MinIO 客户端\n\n```shell\nmc config host add <ALIAS> <YOUR-S3-ENDPOINT> <YOUR-ACCESS-KEY> <YOUR-SECRET-KEY> [--api API-SIGNATURE]\n```\n\n这个命令用于配置 `mc`，使其可以连接到一个特定的 MinIO 服务或兼容 S3 的存储服务。\n\n- `<ALIAS>` 是你为这个存储服务定义的简称。\n- `<YOUR-S3-ENDPOINT>` 是服务的访问 URL。\n- `<YOUR-ACCESS-KEY>` 和 `<YOUR-SECRET-KEY>` 是你的访问密钥和密钥密码，用于身份验证。\n- `[--api API-SIGNATURE]` 是可选的，用于指定 API 签名类型，通常是 `S3v4`。\n\n### 4. 添加特定的 MinIO 服务配置\n\n```shell\nmc config host add minio http://47.113.216.154:9000 admin ********\n```\n\n这个命令添加一个名为 `minio` 的 MinIO 服务配置，使用的是 IP 地址 `117.72.14.166` 和端口 `9000`，以及提供的访问密钥和密钥密码。\n\n### 5. 列出存储桶创建名`qyj`的储存桶\n\n```shell\nmc ls minio\nmc mb minio/qyj\n```\n\n这个命令列出与别名 `minio` 相关联的存储服务中的所有存储桶。\n\n### 6. 启用匿名访问模式\n\n```shell\nmc anonymous\n```\n\n这个命令启动 `mc` 的匿名访问模式，允许用户在没有提供 API 密钥的情况下执行操作。\n\n### 7. 设置匿名下载权限\n\n```shell\nmc anonymous set download minio/qyj\n```","source":"_posts/ubuntu-Docker安装minio.md","raw":"---\ntitle: 二、Docker安装minio\ndate: 2024-06-12 17:33:50\ntags: ubuntu\n---\n\nMinIO 是一个高性能的分布式对象存储服务，它可以用于存储大量非结构化数据，如照片、视频、日志文件等。通过 Docker 安装和运行 MinIO 是一种快速且方便的方法。下面是在 Docker 上安装和运行 MinIO 的步骤：\n\n## Docker安装minio\n\n### 1. 拉取 MinIO Docker 镜像\n\n首先，你需要从 Docker Hub 拉取最新的 MinIO 镜像。在你的终端中运行以下命令：\n\n```shell\ndocker pull minio/minio\n```\n\n### 2.启动minio容器\n\n```shell\ndocker run -d \\\n --name minio \\\n --cgroupns host \\\n --env MINIO_ROOT_USER=admin \\\n --env MINIO_ROOT_PASSWORD=******** \\\n -p 9000:9000/tcp \\\n -p 9090:9090/tcp \\\n --restart=always \\\n -v /mydata/minio/data:/data \\\n minio/minio server /data --console-address :9090 --address :9000 \n```\n\n Docker 运行 MinIO 服务，一个高性能的分布式对象存储服务，常用于存储大规模的非结构化数据。下面我将详细解释这个命令的各个部分：\n\n1. `docker run -d`：\n   - `docker run`：告诉 Docker 运行一个新的容器。\n   - `-d`：代表后台运行，让容器在后台执行。\n2. `--name minio`：\n   - `--name`：设置容器的名称，这里名称被设为 `minio`。\n3. `--cgroupns host`：\n   - `--cgroupns`：指定容器使用的 cgroup 命名空间类型。这里使用的是 `host`，意味着容器将使用宿主机的 cgroup 命名空间，而不是创建新的。\n4. `--env MINIO_ROOT_USER=admin` 和 `--env MINIO_ROOT_PASSWORD=********`：\n   - `--env`：设置环境变量。\n   - `MINIO_ROOT_USER` 和 `MINIO_ROOT_PASSWORD`：分别设置 MinIO 服务的根用户名称和密码。\n5. `-p 9000:9000/tcp` 和 `-p 9090:9090/tcp`：\n   - `-p`：端口映射，格式为 `宿主机端口:容器端口/tcp`。\n   - `9000:9000/tcp`：将容器的 9000 端口映射到宿主机的 9000 端口，MinIO 的主服务通常在此端口运行。\n   - `9090:9090/tcp`：将容器的 9090 端口映射到宿主机的 9090 端口，MinIO 的管理控制台通常在此端口运行。\n6. `--restart=always`：\n   - `--restart`：设置容器的重启策略。`always` 意味着无论容器的退出状态如何，只要 Docker 守护进程被重新启动，容器也将被重新启动。\n7. `-v /mydata/minio/data:/data`：\n   - `-v`：挂载卷，格式为 `宿主机路径:容器内路径`。\n   - `/mydata/minio/data:/data`：将宿主机的 `/mydata/minio/data` 目录挂载到容器内的 `/data` 目录，用于数据持久化。\n8. `minio/minio server /data`：\n   - `minio/minio`：Docker 镜像名称，表示使用 MinIO 的官方 Docker 镜像。\n   - `server /data`：MinIO 服务的启动命令，指定 `/data` 为数据存储位置。\n9. `--console-address :9090 --address :9000`：\n   - `--console-address :9090`：设置 MinIO 控制台的监听地址和端口。\n   - `--address :9000`：设置 MinIO 服务的监听地址和端口。\n\n整个命令的作用是在 Docker 中运行一个名为 `minio` 的容器，配置了环境变量、端口映射和卷挂载，并设定了服务及控制台的监听端口，用于提供一个持久化的分布式对象存储服务。\n\n## Docker安装MinIO Client (`mc`)\n\n### 1. 拉取 `mc` Docker 镜像\n\n```shell\ndocker pull minio/mc\n```\n\n这个命令从 Docker Hub 上拉取最新的 MinIO Client (`mc`) 镜像。这样可以确保你使用的是最新版的客户端。\n\n### 2. 通过 Docker 运行 `mc` 并进入其 Shell\n\n```shell\ndocker run -it --entrypoint=/bin/sh minio/mc\n```\n\n### 3. 配置 MinIO 客户端\n\n```shell\nmc config host add <ALIAS> <YOUR-S3-ENDPOINT> <YOUR-ACCESS-KEY> <YOUR-SECRET-KEY> [--api API-SIGNATURE]\n```\n\n这个命令用于配置 `mc`，使其可以连接到一个特定的 MinIO 服务或兼容 S3 的存储服务。\n\n- `<ALIAS>` 是你为这个存储服务定义的简称。\n- `<YOUR-S3-ENDPOINT>` 是服务的访问 URL。\n- `<YOUR-ACCESS-KEY>` 和 `<YOUR-SECRET-KEY>` 是你的访问密钥和密钥密码，用于身份验证。\n- `[--api API-SIGNATURE]` 是可选的，用于指定 API 签名类型，通常是 `S3v4`。\n\n### 4. 添加特定的 MinIO 服务配置\n\n```shell\nmc config host add minio http://47.113.216.154:9000 admin ********\n```\n\n这个命令添加一个名为 `minio` 的 MinIO 服务配置，使用的是 IP 地址 `117.72.14.166` 和端口 `9000`，以及提供的访问密钥和密钥密码。\n\n### 5. 列出存储桶创建名`qyj`的储存桶\n\n```shell\nmc ls minio\nmc mb minio/qyj\n```\n\n这个命令列出与别名 `minio` 相关联的存储服务中的所有存储桶。\n\n### 6. 启用匿名访问模式\n\n```shell\nmc anonymous\n```\n\n这个命令启动 `mc` 的匿名访问模式，允许用户在没有提供 API 密钥的情况下执行操作。\n\n### 7. 设置匿名下载权限\n\n```shell\nmc anonymous set download minio/qyj\n```","slug":"ubuntu-Docker安装minio","published":1,"updated":"2024-07-26T15:44:16.526Z","_id":"clxbmxg700000lotl5k8e5oah","comments":1,"layout":"post","photos":[],"content":"<p>MinIO 是一个高性能的分布式对象存储服务，它可以用于存储大量非结构化数据，如照片、视频、日志文件等。通过 Docker 安装和运行 MinIO 是一种快速且方便的方法。下面是在 Docker 上安装和运行 MinIO 的步骤：</p>\n<h2 id=\"Docker安装minio\"><a href=\"#Docker安装minio\" class=\"headerlink\" title=\"Docker安装minio\"></a>Docker安装minio</h2><h3 id=\"1-拉取-MinIO-Docker-镜像\"><a href=\"#1-拉取-MinIO-Docker-镜像\" class=\"headerlink\" title=\"1. 拉取 MinIO Docker 镜像\"></a>1. 拉取 MinIO Docker 镜像</h3><p>首先，你需要从 Docker Hub 拉取最新的 MinIO 镜像。在你的终端中运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull minio/minio</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-启动minio容器\"><a href=\"#2-启动minio容器\" class=\"headerlink\" title=\"2.启动minio容器\"></a>2.启动minio容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\"> --name minio \\</span><br><span class=\"line\"> --cgroupns host \\</span><br><span class=\"line\"> --env MINIO_ROOT_USER=admin \\</span><br><span class=\"line\"> --env MINIO_ROOT_PASSWORD=******** \\</span><br><span class=\"line\"> -p 9000:9000/tcp \\</span><br><span class=\"line\"> -p 9090:9090/tcp \\</span><br><span class=\"line\"> --restart=always \\</span><br><span class=\"line\"> -v /mydata/minio/data:/data \\</span><br><span class=\"line\"> minio/minio server /data --console-address :9090 --address :9000 </span><br></pre></td></tr></table></figure>\n\n<p> Docker 运行 MinIO 服务，一个高性能的分布式对象存储服务，常用于存储大规模的非结构化数据。下面我将详细解释这个命令的各个部分：</p>\n<ol>\n<li><code>docker run -d</code>：<ul>\n<li><code>docker run</code>：告诉 Docker 运行一个新的容器。</li>\n<li><code>-d</code>：代表后台运行，让容器在后台执行。</li>\n</ul>\n</li>\n<li><code>--name minio</code>：<ul>\n<li><code>--name</code>：设置容器的名称，这里名称被设为 <code>minio</code>。</li>\n</ul>\n</li>\n<li><code>--cgroupns host</code>：<ul>\n<li><code>--cgroupns</code>：指定容器使用的 cgroup 命名空间类型。这里使用的是 <code>host</code>，意味着容器将使用宿主机的 cgroup 命名空间，而不是创建新的。</li>\n</ul>\n</li>\n<li><code>--env MINIO_ROOT_USER=admin</code> 和 <code>--env MINIO_ROOT_PASSWORD=********</code>：<ul>\n<li><code>--env</code>：设置环境变量。</li>\n<li><code>MINIO_ROOT_USER</code> 和 <code>MINIO_ROOT_PASSWORD</code>：分别设置 MinIO 服务的根用户名称和密码。</li>\n</ul>\n</li>\n<li><code>-p 9000:9000/tcp</code> 和 <code>-p 9090:9090/tcp</code>：<ul>\n<li><code>-p</code>：端口映射，格式为 <code>宿主机端口:容器端口/tcp</code>。</li>\n<li><code>9000:9000/tcp</code>：将容器的 9000 端口映射到宿主机的 9000 端口，MinIO 的主服务通常在此端口运行。</li>\n<li><code>9090:9090/tcp</code>：将容器的 9090 端口映射到宿主机的 9090 端口，MinIO 的管理控制台通常在此端口运行。</li>\n</ul>\n</li>\n<li><code>--restart=always</code>：<ul>\n<li><code>--restart</code>：设置容器的重启策略。<code>always</code> 意味着无论容器的退出状态如何，只要 Docker 守护进程被重新启动，容器也将被重新启动。</li>\n</ul>\n</li>\n<li><code>-v /mydata/minio/data:/data</code>：<ul>\n<li><code>-v</code>：挂载卷，格式为 <code>宿主机路径:容器内路径</code>。</li>\n<li><code>/mydata/minio/data:/data</code>：将宿主机的 <code>/mydata/minio/data</code> 目录挂载到容器内的 <code>/data</code> 目录，用于数据持久化。</li>\n</ul>\n</li>\n<li><code>minio/minio server /data</code>：<ul>\n<li><code>minio/minio</code>：Docker 镜像名称，表示使用 MinIO 的官方 Docker 镜像。</li>\n<li><code>server /data</code>：MinIO 服务的启动命令，指定 <code>/data</code> 为数据存储位置。</li>\n</ul>\n</li>\n<li><code>--console-address :9090 --address :9000</code>：<ul>\n<li><code>--console-address :9090</code>：设置 MinIO 控制台的监听地址和端口。</li>\n<li><code>--address :9000</code>：设置 MinIO 服务的监听地址和端口。</li>\n</ul>\n</li>\n</ol>\n<p>整个命令的作用是在 Docker 中运行一个名为 <code>minio</code> 的容器，配置了环境变量、端口映射和卷挂载，并设定了服务及控制台的监听端口，用于提供一个持久化的分布式对象存储服务。</p>\n<h2 id=\"Docker安装MinIO-Client-mc\"><a href=\"#Docker安装MinIO-Client-mc\" class=\"headerlink\" title=\"Docker安装MinIO Client (mc)\"></a>Docker安装MinIO Client (<code>mc</code>)</h2><h3 id=\"1-拉取-mc-Docker-镜像\"><a href=\"#1-拉取-mc-Docker-镜像\" class=\"headerlink\" title=\"1. 拉取 mc Docker 镜像\"></a>1. 拉取 <code>mc</code> Docker 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull minio/mc</span><br></pre></td></tr></table></figure>\n\n<p>这个命令从 Docker Hub 上拉取最新的 MinIO Client (<code>mc</code>) 镜像。这样可以确保你使用的是最新版的客户端。</p>\n<h3 id=\"2-通过-Docker-运行-mc-并进入其-Shell\"><a href=\"#2-通过-Docker-运行-mc-并进入其-Shell\" class=\"headerlink\" title=\"2. 通过 Docker 运行 mc 并进入其 Shell\"></a>2. 通过 Docker 运行 <code>mc</code> 并进入其 Shell</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --entrypoint=/bin/sh minio/mc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-配置-MinIO-客户端\"><a href=\"#3-配置-MinIO-客户端\" class=\"headerlink\" title=\"3. 配置 MinIO 客户端\"></a>3. 配置 MinIO 客户端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc config host add &lt;ALIAS&gt; &lt;YOUR-S3-ENDPOINT&gt; &lt;YOUR-ACCESS-KEY&gt; &lt;YOUR-SECRET-KEY&gt; [--api API-SIGNATURE]</span><br></pre></td></tr></table></figure>\n\n<p>这个命令用于配置 <code>mc</code>，使其可以连接到一个特定的 MinIO 服务或兼容 S3 的存储服务。</p>\n<ul>\n<li><code>&lt;ALIAS&gt;</code> 是你为这个存储服务定义的简称。</li>\n<li><code>&lt;YOUR-S3-ENDPOINT&gt;</code> 是服务的访问 URL。</li>\n<li><code>&lt;YOUR-ACCESS-KEY&gt;</code> 和 <code>&lt;YOUR-SECRET-KEY&gt;</code> 是你的访问密钥和密钥密码，用于身份验证。</li>\n<li><code>[--api API-SIGNATURE]</code> 是可选的，用于指定 API 签名类型，通常是 <code>S3v4</code>。</li>\n</ul>\n<h3 id=\"4-添加特定的-MinIO-服务配置\"><a href=\"#4-添加特定的-MinIO-服务配置\" class=\"headerlink\" title=\"4. 添加特定的 MinIO 服务配置\"></a>4. 添加特定的 MinIO 服务配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc config host add minio http://47.113.216.154:9000 admin ********</span><br></pre></td></tr></table></figure>\n\n<p>这个命令添加一个名为 <code>minio</code> 的 MinIO 服务配置，使用的是 IP 地址 <code>117.72.14.166</code> 和端口 <code>9000</code>，以及提供的访问密钥和密钥密码。</p>\n<h3 id=\"5-列出存储桶创建名qyj的储存桶\"><a href=\"#5-列出存储桶创建名qyj的储存桶\" class=\"headerlink\" title=\"5. 列出存储桶创建名qyj的储存桶\"></a>5. 列出存储桶创建名<code>qyj</code>的储存桶</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc ls minio</span><br><span class=\"line\">mc mb minio/qyj</span><br></pre></td></tr></table></figure>\n\n<p>这个命令列出与别名 <code>minio</code> 相关联的存储服务中的所有存储桶。</p>\n<h3 id=\"6-启用匿名访问模式\"><a href=\"#6-启用匿名访问模式\" class=\"headerlink\" title=\"6. 启用匿名访问模式\"></a>6. 启用匿名访问模式</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc anonymous</span><br></pre></td></tr></table></figure>\n\n<p>这个命令启动 <code>mc</code> 的匿名访问模式，允许用户在没有提供 API 密钥的情况下执行操作。</p>\n<h3 id=\"7-设置匿名下载权限\"><a href=\"#7-设置匿名下载权限\" class=\"headerlink\" title=\"7. 设置匿名下载权限\"></a>7. 设置匿名下载权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc anonymous set download minio/qyj</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>MinIO 是一个高性能的分布式对象存储服务，它可以用于存储大量非结构化数据，如照片、视频、日志文件等。通过 Docker 安装和运行 MinIO 是一种快速且方便的方法。下面是在 Docker 上安装和运行 MinIO 的步骤：</p>\n<h2 id=\"Docker安装minio\"><a href=\"#Docker安装minio\" class=\"headerlink\" title=\"Docker安装minio\"></a>Docker安装minio</h2><h3 id=\"1-拉取-MinIO-Docker-镜像\"><a href=\"#1-拉取-MinIO-Docker-镜像\" class=\"headerlink\" title=\"1. 拉取 MinIO Docker 镜像\"></a>1. 拉取 MinIO Docker 镜像</h3><p>首先，你需要从 Docker Hub 拉取最新的 MinIO 镜像。在你的终端中运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull minio/minio</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-启动minio容器\"><a href=\"#2-启动minio容器\" class=\"headerlink\" title=\"2.启动minio容器\"></a>2.启动minio容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\"> --name minio \\</span><br><span class=\"line\"> --cgroupns host \\</span><br><span class=\"line\"> --env MINIO_ROOT_USER=admin \\</span><br><span class=\"line\"> --env MINIO_ROOT_PASSWORD=******** \\</span><br><span class=\"line\"> -p 9000:9000/tcp \\</span><br><span class=\"line\"> -p 9090:9090/tcp \\</span><br><span class=\"line\"> --restart=always \\</span><br><span class=\"line\"> -v /mydata/minio/data:/data \\</span><br><span class=\"line\"> minio/minio server /data --console-address :9090 --address :9000 </span><br></pre></td></tr></table></figure>\n\n<p> Docker 运行 MinIO 服务，一个高性能的分布式对象存储服务，常用于存储大规模的非结构化数据。下面我将详细解释这个命令的各个部分：</p>\n<ol>\n<li><code>docker run -d</code>：<ul>\n<li><code>docker run</code>：告诉 Docker 运行一个新的容器。</li>\n<li><code>-d</code>：代表后台运行，让容器在后台执行。</li>\n</ul>\n</li>\n<li><code>--name minio</code>：<ul>\n<li><code>--name</code>：设置容器的名称，这里名称被设为 <code>minio</code>。</li>\n</ul>\n</li>\n<li><code>--cgroupns host</code>：<ul>\n<li><code>--cgroupns</code>：指定容器使用的 cgroup 命名空间类型。这里使用的是 <code>host</code>，意味着容器将使用宿主机的 cgroup 命名空间，而不是创建新的。</li>\n</ul>\n</li>\n<li><code>--env MINIO_ROOT_USER=admin</code> 和 <code>--env MINIO_ROOT_PASSWORD=********</code>：<ul>\n<li><code>--env</code>：设置环境变量。</li>\n<li><code>MINIO_ROOT_USER</code> 和 <code>MINIO_ROOT_PASSWORD</code>：分别设置 MinIO 服务的根用户名称和密码。</li>\n</ul>\n</li>\n<li><code>-p 9000:9000/tcp</code> 和 <code>-p 9090:9090/tcp</code>：<ul>\n<li><code>-p</code>：端口映射，格式为 <code>宿主机端口:容器端口/tcp</code>。</li>\n<li><code>9000:9000/tcp</code>：将容器的 9000 端口映射到宿主机的 9000 端口，MinIO 的主服务通常在此端口运行。</li>\n<li><code>9090:9090/tcp</code>：将容器的 9090 端口映射到宿主机的 9090 端口，MinIO 的管理控制台通常在此端口运行。</li>\n</ul>\n</li>\n<li><code>--restart=always</code>：<ul>\n<li><code>--restart</code>：设置容器的重启策略。<code>always</code> 意味着无论容器的退出状态如何，只要 Docker 守护进程被重新启动，容器也将被重新启动。</li>\n</ul>\n</li>\n<li><code>-v /mydata/minio/data:/data</code>：<ul>\n<li><code>-v</code>：挂载卷，格式为 <code>宿主机路径:容器内路径</code>。</li>\n<li><code>/mydata/minio/data:/data</code>：将宿主机的 <code>/mydata/minio/data</code> 目录挂载到容器内的 <code>/data</code> 目录，用于数据持久化。</li>\n</ul>\n</li>\n<li><code>minio/minio server /data</code>：<ul>\n<li><code>minio/minio</code>：Docker 镜像名称，表示使用 MinIO 的官方 Docker 镜像。</li>\n<li><code>server /data</code>：MinIO 服务的启动命令，指定 <code>/data</code> 为数据存储位置。</li>\n</ul>\n</li>\n<li><code>--console-address :9090 --address :9000</code>：<ul>\n<li><code>--console-address :9090</code>：设置 MinIO 控制台的监听地址和端口。</li>\n<li><code>--address :9000</code>：设置 MinIO 服务的监听地址和端口。</li>\n</ul>\n</li>\n</ol>\n<p>整个命令的作用是在 Docker 中运行一个名为 <code>minio</code> 的容器，配置了环境变量、端口映射和卷挂载，并设定了服务及控制台的监听端口，用于提供一个持久化的分布式对象存储服务。</p>\n<h2 id=\"Docker安装MinIO-Client-mc\"><a href=\"#Docker安装MinIO-Client-mc\" class=\"headerlink\" title=\"Docker安装MinIO Client (mc)\"></a>Docker安装MinIO Client (<code>mc</code>)</h2><h3 id=\"1-拉取-mc-Docker-镜像\"><a href=\"#1-拉取-mc-Docker-镜像\" class=\"headerlink\" title=\"1. 拉取 mc Docker 镜像\"></a>1. 拉取 <code>mc</code> Docker 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull minio/mc</span><br></pre></td></tr></table></figure>\n\n<p>这个命令从 Docker Hub 上拉取最新的 MinIO Client (<code>mc</code>) 镜像。这样可以确保你使用的是最新版的客户端。</p>\n<h3 id=\"2-通过-Docker-运行-mc-并进入其-Shell\"><a href=\"#2-通过-Docker-运行-mc-并进入其-Shell\" class=\"headerlink\" title=\"2. 通过 Docker 运行 mc 并进入其 Shell\"></a>2. 通过 Docker 运行 <code>mc</code> 并进入其 Shell</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --entrypoint=/bin/sh minio/mc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-配置-MinIO-客户端\"><a href=\"#3-配置-MinIO-客户端\" class=\"headerlink\" title=\"3. 配置 MinIO 客户端\"></a>3. 配置 MinIO 客户端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc config host add &lt;ALIAS&gt; &lt;YOUR-S3-ENDPOINT&gt; &lt;YOUR-ACCESS-KEY&gt; &lt;YOUR-SECRET-KEY&gt; [--api API-SIGNATURE]</span><br></pre></td></tr></table></figure>\n\n<p>这个命令用于配置 <code>mc</code>，使其可以连接到一个特定的 MinIO 服务或兼容 S3 的存储服务。</p>\n<ul>\n<li><code>&lt;ALIAS&gt;</code> 是你为这个存储服务定义的简称。</li>\n<li><code>&lt;YOUR-S3-ENDPOINT&gt;</code> 是服务的访问 URL。</li>\n<li><code>&lt;YOUR-ACCESS-KEY&gt;</code> 和 <code>&lt;YOUR-SECRET-KEY&gt;</code> 是你的访问密钥和密钥密码，用于身份验证。</li>\n<li><code>[--api API-SIGNATURE]</code> 是可选的，用于指定 API 签名类型，通常是 <code>S3v4</code>。</li>\n</ul>\n<h3 id=\"4-添加特定的-MinIO-服务配置\"><a href=\"#4-添加特定的-MinIO-服务配置\" class=\"headerlink\" title=\"4. 添加特定的 MinIO 服务配置\"></a>4. 添加特定的 MinIO 服务配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc config host add minio http://47.113.216.154:9000 admin ********</span><br></pre></td></tr></table></figure>\n\n<p>这个命令添加一个名为 <code>minio</code> 的 MinIO 服务配置，使用的是 IP 地址 <code>117.72.14.166</code> 和端口 <code>9000</code>，以及提供的访问密钥和密钥密码。</p>\n<h3 id=\"5-列出存储桶创建名qyj的储存桶\"><a href=\"#5-列出存储桶创建名qyj的储存桶\" class=\"headerlink\" title=\"5. 列出存储桶创建名qyj的储存桶\"></a>5. 列出存储桶创建名<code>qyj</code>的储存桶</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc ls minio</span><br><span class=\"line\">mc mb minio/qyj</span><br></pre></td></tr></table></figure>\n\n<p>这个命令列出与别名 <code>minio</code> 相关联的存储服务中的所有存储桶。</p>\n<h3 id=\"6-启用匿名访问模式\"><a href=\"#6-启用匿名访问模式\" class=\"headerlink\" title=\"6. 启用匿名访问模式\"></a>6. 启用匿名访问模式</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc anonymous</span><br></pre></td></tr></table></figure>\n\n<p>这个命令启动 <code>mc</code> 的匿名访问模式，允许用户在没有提供 API 密钥的情况下执行操作。</p>\n<h3 id=\"7-设置匿名下载权限\"><a href=\"#7-设置匿名下载权限\" class=\"headerlink\" title=\"7. 设置匿名下载权限\"></a>7. 设置匿名下载权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc anonymous set download minio/qyj</span><br></pre></td></tr></table></figure>"},{"title":"三、minio的域名映射","date":"2024-06-12T09:33:50.000Z","_content":"\n### Nginx和Certbot安装和minio的域名映射\n\n### 步骤1: 更新软件包列表\n\n首先，打开终端并更新Ubuntu的软件包列表以确保安装最新版本的软件。运行以下命令：\n\n```shell\nsudo apt update\n```\n\n### 步骤2: 安装Nginx\n\n使用`apt`命令安装Nginx：\n\n```shell\nsudo apt install nginx\n```\n\n### 步骤3: 安装 Certbot\n\n对于大多数 Linux 发行版，如 Ubuntu，你可以使用以下命令安装 Certbot：\n\n```shell\nsudo apt-get install certbot\nsudo apt-get install python3-certbot-nginx\n```\n\n### 步骤4: 使用 Certbot 获取和安装证书\n\n对于 Nginx：\n\n```shell\nsudo certbot --nginx -d minio.qinyunjian.cloud\n```\n\n### 步骤5：编辑配置，路径：/etc/nginx/conf.d\n\n```shell\nserver {\n    listen 443 ssl;\n    server_name minio.qinyunjian.cloud;\n\n    ssl_certificate /etc/letsencrypt/live/minio.qinyunjian.cloud/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/minio.qinyunjian.cloud/privkey.pem;\n\n    location / {\n        proxy_pass http://localhost:9090;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### 步骤6：\n\n1. **保存配置文件**：保存Nginx 配置文件。\n\n   ```shell\n   sudo nano /etc/nginx/conf.d/minio.qinyunjian.cloud.conf\n   ```\n\n2. **检查配置并重启 Nginx**：在保存修改后，再次运行  来验证配置文件是否正确。`nginx -t`\n\n   ```shell\n   sudo nginx -t\n   ```\n\n   如果输出显示“test is successful”，则表示配置文件没有语法错误。 然后，你可以安全地重启 Nginx：\n\n   ```shell\n   sudo systemctl restart nginx\n   ```","source":"_posts/ubuntu-Nginx和Certbot安装和minio的域名映射.md","raw":"---\ntitle: 三、minio的域名映射\ndate: 2024-06-12 17:33:50\ntags: ubuntu\n---\n\n### Nginx和Certbot安装和minio的域名映射\n\n### 步骤1: 更新软件包列表\n\n首先，打开终端并更新Ubuntu的软件包列表以确保安装最新版本的软件。运行以下命令：\n\n```shell\nsudo apt update\n```\n\n### 步骤2: 安装Nginx\n\n使用`apt`命令安装Nginx：\n\n```shell\nsudo apt install nginx\n```\n\n### 步骤3: 安装 Certbot\n\n对于大多数 Linux 发行版，如 Ubuntu，你可以使用以下命令安装 Certbot：\n\n```shell\nsudo apt-get install certbot\nsudo apt-get install python3-certbot-nginx\n```\n\n### 步骤4: 使用 Certbot 获取和安装证书\n\n对于 Nginx：\n\n```shell\nsudo certbot --nginx -d minio.qinyunjian.cloud\n```\n\n### 步骤5：编辑配置，路径：/etc/nginx/conf.d\n\n```shell\nserver {\n    listen 443 ssl;\n    server_name minio.qinyunjian.cloud;\n\n    ssl_certificate /etc/letsencrypt/live/minio.qinyunjian.cloud/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/minio.qinyunjian.cloud/privkey.pem;\n\n    location / {\n        proxy_pass http://localhost:9090;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### 步骤6：\n\n1. **保存配置文件**：保存Nginx 配置文件。\n\n   ```shell\n   sudo nano /etc/nginx/conf.d/minio.qinyunjian.cloud.conf\n   ```\n\n2. **检查配置并重启 Nginx**：在保存修改后，再次运行  来验证配置文件是否正确。`nginx -t`\n\n   ```shell\n   sudo nginx -t\n   ```\n\n   如果输出显示“test is successful”，则表示配置文件没有语法错误。 然后，你可以安全地重启 Nginx：\n\n   ```shell\n   sudo systemctl restart nginx\n   ```","slug":"ubuntu-Nginx和Certbot安装和minio的域名映射","published":1,"updated":"2024-08-13T15:59:58.848Z","_id":"clxbmxg740001lotlh18s04yp","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"Nginx和Certbot安装和minio的域名映射\"><a href=\"#Nginx和Certbot安装和minio的域名映射\" class=\"headerlink\" title=\"Nginx和Certbot安装和minio的域名映射\"></a>Nginx和Certbot安装和minio的域名映射</h3><h3 id=\"步骤1-更新软件包列表\"><a href=\"#步骤1-更新软件包列表\" class=\"headerlink\" title=\"步骤1: 更新软件包列表\"></a>步骤1: 更新软件包列表</h3><p>首先，打开终端并更新Ubuntu的软件包列表以确保安装最新版本的软件。运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤2-安装Nginx\"><a href=\"#步骤2-安装Nginx\" class=\"headerlink\" title=\"步骤2: 安装Nginx\"></a>步骤2: 安装Nginx</h3><p>使用<code>apt</code>命令安装Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤3-安装-Certbot\"><a href=\"#步骤3-安装-Certbot\" class=\"headerlink\" title=\"步骤3: 安装 Certbot\"></a>步骤3: 安装 Certbot</h3><p>对于大多数 Linux 发行版，如 Ubuntu，你可以使用以下命令安装 Certbot：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install certbot</span><br><span class=\"line\">sudo apt-get install python3-certbot-nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤4-使用-Certbot-获取和安装证书\"><a href=\"#步骤4-使用-Certbot-获取和安装证书\" class=\"headerlink\" title=\"步骤4: 使用 Certbot 获取和安装证书\"></a>步骤4: 使用 Certbot 获取和安装证书</h3><p>对于 Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d minio.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤5：编辑配置，路径：-etc-nginx-conf-d\"><a href=\"#步骤5：编辑配置，路径：-etc-nginx-conf-d\" class=\"headerlink\" title=\"步骤5：编辑配置，路径：&#x2F;etc&#x2F;nginx&#x2F;conf.d\"></a>步骤5：编辑配置，路径：&#x2F;etc&#x2F;nginx&#x2F;conf.d</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name minio.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/minio.qinyunjian.cloud/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/minio.qinyunjian.cloud/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:9090;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤6：\"><a href=\"#步骤6：\" class=\"headerlink\" title=\"步骤6：\"></a>步骤6：</h3><ol>\n<li><p><strong>保存配置文件</strong>：保存Nginx 配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/nginx/conf.d/minio.qinyunjian.cloud.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>检查配置并重启 Nginx</strong>：在保存修改后，再次运行  来验证配置文件是否正确。<code>nginx -t</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果输出显示“test is successful”，则表示配置文件没有语法错误。 然后，你可以安全地重启 Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h3 id=\"Nginx和Certbot安装和minio的域名映射\"><a href=\"#Nginx和Certbot安装和minio的域名映射\" class=\"headerlink\" title=\"Nginx和Certbot安装和minio的域名映射\"></a>Nginx和Certbot安装和minio的域名映射</h3><h3 id=\"步骤1-更新软件包列表\"><a href=\"#步骤1-更新软件包列表\" class=\"headerlink\" title=\"步骤1: 更新软件包列表\"></a>步骤1: 更新软件包列表</h3><p>首先，打开终端并更新Ubuntu的软件包列表以确保安装最新版本的软件。运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤2-安装Nginx\"><a href=\"#步骤2-安装Nginx\" class=\"headerlink\" title=\"步骤2: 安装Nginx\"></a>步骤2: 安装Nginx</h3><p>使用<code>apt</code>命令安装Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤3-安装-Certbot\"><a href=\"#步骤3-安装-Certbot\" class=\"headerlink\" title=\"步骤3: 安装 Certbot\"></a>步骤3: 安装 Certbot</h3><p>对于大多数 Linux 发行版，如 Ubuntu，你可以使用以下命令安装 Certbot：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install certbot</span><br><span class=\"line\">sudo apt-get install python3-certbot-nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤4-使用-Certbot-获取和安装证书\"><a href=\"#步骤4-使用-Certbot-获取和安装证书\" class=\"headerlink\" title=\"步骤4: 使用 Certbot 获取和安装证书\"></a>步骤4: 使用 Certbot 获取和安装证书</h3><p>对于 Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d minio.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤5：编辑配置，路径：-etc-nginx-conf-d\"><a href=\"#步骤5：编辑配置，路径：-etc-nginx-conf-d\" class=\"headerlink\" title=\"步骤5：编辑配置，路径：&#x2F;etc&#x2F;nginx&#x2F;conf.d\"></a>步骤5：编辑配置，路径：&#x2F;etc&#x2F;nginx&#x2F;conf.d</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name minio.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/minio.qinyunjian.cloud/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/minio.qinyunjian.cloud/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:9090;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤6：\"><a href=\"#步骤6：\" class=\"headerlink\" title=\"步骤6：\"></a>步骤6：</h3><ol>\n<li><p><strong>保存配置文件</strong>：保存Nginx 配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/nginx/conf.d/minio.qinyunjian.cloud.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>检查配置并重启 Nginx</strong>：在保存修改后，再次运行  来验证配置文件是否正确。<code>nginx -t</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果输出显示“test is successful”，则表示配置文件没有语法错误。 然后，你可以安全地重启 Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"一、Ubuntu安装docker","date":"2024-06-12T09:33:50.000Z","_content":"\n安装 Docker 时使用阿里云的镜像源可以加快下载速度。以下是在 Ubuntu 系统上安装 Docker 的步骤，使用阿里云提供的公共镜像源：\n\n### 1. 更新软件包索引\n\n打开你的终端，并执行以下命令以更新你的软件包索引：\n\n```sh\nsudo apt-get update\n```\n\n### 2. 安装 HTTPS 支持和证书\n\n首先需要安装软件包，以确保可以通过 HTTPS 安全地下载软件包。可以使用以下命令来安装必要的依赖：\n\n```sh\nsudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n```\n\n### 3. 添加 Docker 的官方 GPG 密钥\n\n为了确保下载的 Docker 软件包的真实性，需要导入 Docker 的官方 GPG 密钥。使用阿里云的镜像服务器来替代 Docker 的官方密钥服务器，可以加快这一过程：\n\n```sh\ncurl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n### 4. 设置 Docker 稳定版仓库\n\n要使用阿里云的 Docker 仓库地址设置 APT 源，执行以下命令来添加阿里云的 Docker 稳定版仓库：\n\n```sh\nsudo add-apt-repository \"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n### 5. 安装 Docker Engine\n\n现在，更新 apt 索引，并安装 Docker Engine 和 containerd：\n\n```sh\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n### 6. 验证 Docker 是否安装成功\n\n安装完成后，启动 Docker 并运行 `hello-world` 镜像来验证是否正确安装：\n\n```sh\nsudo systemctl start docker\nsudo docker run hello-world\n```\n\n如果看到返回消息，说明 Docker 已经正确安装并运行。\n\n### 7. 配置 Docker Hub\n\n为了进一步提高镜像拉取速度，可以配置 Docker 使用阿里云的镜像加速器：\n\n1. 创建或编辑 `/etc/docker/daemon.json`：\n\n   ```sh\n   sudo nano /inc/docker/daemon.json\n   ```\n\n2. 添加以下内容（替换 `<你的阿里云加速器地址>` 为你实际的加速器地址）：\n\n   ```json\n   {\n     \"registry-mirrors\": [\n       \"https://docker.m.daocloud.io\",\n       \"https://docker.nju.edu.cn\",\n       \"https://hub-mirror.c.163.com\",\n       \"https://mirror.baidubce.com\",\n       \"https://2e63y970.mirror.aliyuncs.com\"\n     ]\n   }\n   \n   ```\n\n3. 保存并关闭文件，然后重启 Docker 服务：\n\n   ```sh\n   sudo systemctl daemon-reload\n   sudo systemctl restart docker\n   ```\n\n默认情况下，只有 root 或者 有 sudo 权限的用户可以执行 Docker 命令。想要以非 root 用户执行 Docker 命令，你需要将你的用户添加到 Docker 用户组，该用户组在 Docker CE 软件包安装过程中被创建。想要这么做，输入：\n\n```shell\nsudo usermod -aG docker $USER\n```\n\n`$USER`是一个环境变量，代表当前用户名。","source":"_posts/ubuntu-安装docker.md","raw":"---\ntitle: 一、Ubuntu安装docker\ndate: 2024-06-12 17:33:50\ntags: ubuntu\n---\n\n安装 Docker 时使用阿里云的镜像源可以加快下载速度。以下是在 Ubuntu 系统上安装 Docker 的步骤，使用阿里云提供的公共镜像源：\n\n### 1. 更新软件包索引\n\n打开你的终端，并执行以下命令以更新你的软件包索引：\n\n```sh\nsudo apt-get update\n```\n\n### 2. 安装 HTTPS 支持和证书\n\n首先需要安装软件包，以确保可以通过 HTTPS 安全地下载软件包。可以使用以下命令来安装必要的依赖：\n\n```sh\nsudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n```\n\n### 3. 添加 Docker 的官方 GPG 密钥\n\n为了确保下载的 Docker 软件包的真实性，需要导入 Docker 的官方 GPG 密钥。使用阿里云的镜像服务器来替代 Docker 的官方密钥服务器，可以加快这一过程：\n\n```sh\ncurl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n### 4. 设置 Docker 稳定版仓库\n\n要使用阿里云的 Docker 仓库地址设置 APT 源，执行以下命令来添加阿里云的 Docker 稳定版仓库：\n\n```sh\nsudo add-apt-repository \"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n### 5. 安装 Docker Engine\n\n现在，更新 apt 索引，并安装 Docker Engine 和 containerd：\n\n```sh\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n### 6. 验证 Docker 是否安装成功\n\n安装完成后，启动 Docker 并运行 `hello-world` 镜像来验证是否正确安装：\n\n```sh\nsudo systemctl start docker\nsudo docker run hello-world\n```\n\n如果看到返回消息，说明 Docker 已经正确安装并运行。\n\n### 7. 配置 Docker Hub\n\n为了进一步提高镜像拉取速度，可以配置 Docker 使用阿里云的镜像加速器：\n\n1. 创建或编辑 `/etc/docker/daemon.json`：\n\n   ```sh\n   sudo nano /inc/docker/daemon.json\n   ```\n\n2. 添加以下内容（替换 `<你的阿里云加速器地址>` 为你实际的加速器地址）：\n\n   ```json\n   {\n     \"registry-mirrors\": [\n       \"https://docker.m.daocloud.io\",\n       \"https://docker.nju.edu.cn\",\n       \"https://hub-mirror.c.163.com\",\n       \"https://mirror.baidubce.com\",\n       \"https://2e63y970.mirror.aliyuncs.com\"\n     ]\n   }\n   \n   ```\n\n3. 保存并关闭文件，然后重启 Docker 服务：\n\n   ```sh\n   sudo systemctl daemon-reload\n   sudo systemctl restart docker\n   ```\n\n默认情况下，只有 root 或者 有 sudo 权限的用户可以执行 Docker 命令。想要以非 root 用户执行 Docker 命令，你需要将你的用户添加到 Docker 用户组，该用户组在 Docker CE 软件包安装过程中被创建。想要这么做，输入：\n\n```shell\nsudo usermod -aG docker $USER\n```\n\n`$USER`是一个环境变量，代表当前用户名。","slug":"ubuntu-安装docker","published":1,"updated":"2024-07-26T15:44:20.081Z","_id":"clxbmxg770002lotl81dffcfq","comments":1,"layout":"post","photos":[],"content":"<p>安装 Docker 时使用阿里云的镜像源可以加快下载速度。以下是在 Ubuntu 系统上安装 Docker 的步骤，使用阿里云提供的公共镜像源：</p>\n<h3 id=\"1-更新软件包索引\"><a href=\"#1-更新软件包索引\" class=\"headerlink\" title=\"1. 更新软件包索引\"></a>1. 更新软件包索引</h3><p>打开你的终端，并执行以下命令以更新你的软件包索引：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装-HTTPS-支持和证书\"><a href=\"#2-安装-HTTPS-支持和证书\" class=\"headerlink\" title=\"2. 安装 HTTPS 支持和证书\"></a>2. 安装 HTTPS 支持和证书</h3><p>首先需要安装软件包，以确保可以通过 HTTPS 安全地下载软件包。可以使用以下命令来安装必要的依赖：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-添加-Docker-的官方-GPG-密钥\"><a href=\"#3-添加-Docker-的官方-GPG-密钥\" class=\"headerlink\" title=\"3. 添加 Docker 的官方 GPG 密钥\"></a>3. 添加 Docker 的官方 GPG 密钥</h3><p>为了确保下载的 Docker 软件包的真实性，需要导入 Docker 的官方 GPG 密钥。使用阿里云的镜像服务器来替代 Docker 的官方密钥服务器，可以加快这一过程：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-设置-Docker-稳定版仓库\"><a href=\"#4-设置-Docker-稳定版仓库\" class=\"headerlink\" title=\"4. 设置 Docker 稳定版仓库\"></a>4. 设置 Docker 稳定版仓库</h3><p>要使用阿里云的 Docker 仓库地址设置 APT 源，执行以下命令来添加阿里云的 Docker 稳定版仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository <span class=\"string\">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-安装-Docker-Engine\"><a href=\"#5-安装-Docker-Engine\" class=\"headerlink\" title=\"5. 安装 Docker Engine\"></a>5. 安装 Docker Engine</h3><p>现在，更新 apt 索引，并安装 Docker Engine 和 containerd：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-验证-Docker-是否安装成功\"><a href=\"#6-验证-Docker-是否安装成功\" class=\"headerlink\" title=\"6. 验证 Docker 是否安装成功\"></a>6. 验证 Docker 是否安装成功</h3><p>安装完成后，启动 Docker 并运行 <code>hello-world</code> 镜像来验证是否正确安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>如果看到返回消息，说明 Docker 已经正确安装并运行。</p>\n<h3 id=\"7-配置-Docker-Hub\"><a href=\"#7-配置-Docker-Hub\" class=\"headerlink\" title=\"7. 配置 Docker Hub\"></a>7. 配置 Docker Hub</h3><p>为了进一步提高镜像拉取速度，可以配置 Docker 使用阿里云的镜像加速器：</p>\n<ol>\n<li><p>创建或编辑 <code>/etc/docker/daemon.json</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /inc/docker/daemon.json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加以下内容（替换 <code>&lt;你的阿里云加速器地址&gt;</code> 为你实际的加速器地址）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.m.daocloud.io&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.nju.edu.cn&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://hub-mirror.c.163.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://mirror.baidubce.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://2e63y970.mirror.aliyuncs.com&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存并关闭文件，然后重启 Docker 服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>默认情况下，只有 root 或者 有 sudo 权限的用户可以执行 Docker 命令。想要以非 root 用户执行 Docker 命令，你需要将你的用户添加到 Docker 用户组，该用户组在 Docker CE 软件包安装过程中被创建。想要这么做，输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>\n\n<p><code>$USER</code>是一个环境变量，代表当前用户名。</p>\n","excerpt":"","more":"<p>安装 Docker 时使用阿里云的镜像源可以加快下载速度。以下是在 Ubuntu 系统上安装 Docker 的步骤，使用阿里云提供的公共镜像源：</p>\n<h3 id=\"1-更新软件包索引\"><a href=\"#1-更新软件包索引\" class=\"headerlink\" title=\"1. 更新软件包索引\"></a>1. 更新软件包索引</h3><p>打开你的终端，并执行以下命令以更新你的软件包索引：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装-HTTPS-支持和证书\"><a href=\"#2-安装-HTTPS-支持和证书\" class=\"headerlink\" title=\"2. 安装 HTTPS 支持和证书\"></a>2. 安装 HTTPS 支持和证书</h3><p>首先需要安装软件包，以确保可以通过 HTTPS 安全地下载软件包。可以使用以下命令来安装必要的依赖：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-添加-Docker-的官方-GPG-密钥\"><a href=\"#3-添加-Docker-的官方-GPG-密钥\" class=\"headerlink\" title=\"3. 添加 Docker 的官方 GPG 密钥\"></a>3. 添加 Docker 的官方 GPG 密钥</h3><p>为了确保下载的 Docker 软件包的真实性，需要导入 Docker 的官方 GPG 密钥。使用阿里云的镜像服务器来替代 Docker 的官方密钥服务器，可以加快这一过程：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-设置-Docker-稳定版仓库\"><a href=\"#4-设置-Docker-稳定版仓库\" class=\"headerlink\" title=\"4. 设置 Docker 稳定版仓库\"></a>4. 设置 Docker 稳定版仓库</h3><p>要使用阿里云的 Docker 仓库地址设置 APT 源，执行以下命令来添加阿里云的 Docker 稳定版仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository <span class=\"string\">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-安装-Docker-Engine\"><a href=\"#5-安装-Docker-Engine\" class=\"headerlink\" title=\"5. 安装 Docker Engine\"></a>5. 安装 Docker Engine</h3><p>现在，更新 apt 索引，并安装 Docker Engine 和 containerd：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-验证-Docker-是否安装成功\"><a href=\"#6-验证-Docker-是否安装成功\" class=\"headerlink\" title=\"6. 验证 Docker 是否安装成功\"></a>6. 验证 Docker 是否安装成功</h3><p>安装完成后，启动 Docker 并运行 <code>hello-world</code> 镜像来验证是否正确安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>如果看到返回消息，说明 Docker 已经正确安装并运行。</p>\n<h3 id=\"7-配置-Docker-Hub\"><a href=\"#7-配置-Docker-Hub\" class=\"headerlink\" title=\"7. 配置 Docker Hub\"></a>7. 配置 Docker Hub</h3><p>为了进一步提高镜像拉取速度，可以配置 Docker 使用阿里云的镜像加速器：</p>\n<ol>\n<li><p>创建或编辑 <code>/etc/docker/daemon.json</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /inc/docker/daemon.json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加以下内容（替换 <code>&lt;你的阿里云加速器地址&gt;</code> 为你实际的加速器地址）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.m.daocloud.io&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.nju.edu.cn&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://hub-mirror.c.163.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://mirror.baidubce.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://2e63y970.mirror.aliyuncs.com&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存并关闭文件，然后重启 Docker 服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>默认情况下，只有 root 或者 有 sudo 权限的用户可以执行 Docker 命令。想要以非 root 用户执行 Docker 命令，你需要将你的用户添加到 Docker 用户组，该用户组在 Docker CE 软件包安装过程中被创建。想要这么做，输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>\n\n<p><code>$USER</code>是一个环境变量，代表当前用户名。</p>\n"},{"title":"一、css布局","date":"2024-07-08T14:32:50.000Z","_content":"\n### css布局\n\n​\t\t在CSS中，常用的布局方法有多种，每种方法都有其独特的优点和适用场景。下面是一些常见的布局方法及其主要属性：\n\n#### 1. Display属性\n\n`display` 属性决定了一个元素是如何显示在文档中的。常见的值包括：\n\n- `display: block;`：块级元素，`block-item`占据父容器的整个宽度，所以元素会自动换行，同时也可以设置`block-item`的高度。\n- `display: inline;`：行内元素，`inline-item`只占据内容所需的宽度，宽度自适应，无法修改`inline-item`的宽度和高度。\n- `display: inline-block;`：行内块元素，`inline-block-item`像行内元素那样排列，但可以设置宽度和高度。\n- `display: none;`：隐藏元素，不占据任何空间。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Display 属性示例</title>\n    <style>\n        .container {\n            margin-bottom: 20px;\n        }\n        .block-item {\n            display: block;\n            background-color: lightcoral;\n            margin: 5px 0;\n            padding: 10px;\n            color: white;\n        }\n        .inline-item {\n            display: inline;\n            background-color: lightseagreen;\n            margin: 5px;\n            padding: 10px;\n            color: white;\n        }\n        .inline-block-item {\n            display: inline-block;\n            background-color: lightblue;\n            margin: 5px;\n            padding: 10px;\n            width: 100px;\n            color: white;\n        }\n        .none-item {\n            display: none;\n        }\n    </style>\n</head>\n<body>\n\n    <!-- Display Block -->\n    <div class=\"container\">\n        <div class=\"block-item\">Block Item 1</div>\n        <div class=\"block-item\">Block Item 2</div>\n    </div>\n\n    <!-- Display Inline -->\n    <div class=\"container\">\n        <div class=\"inline-item\">Inline Item 1</div>\n        <div class=\"inline-item\">Inline Item 2</div>\n        <div class=\"inline-item\">Inline Item 3</div>\n    </div>\n\n    <!-- Display Inline-Block -->\n    <div class=\"container\">\n        <div class=\"inline-block-item\">Inline-Block Item 1</div>\n        <div class=\"inline-block-item\">Inline-Block Item 2</div>\n        <div class=\"inline-block-item\">Inline-Block Item 3</div>\n    </div>\n\n    <!-- Display None (Hidden) -->\n    <div class=\"container\">\n        <div class=\"none-item\">This item is hidden</div>\n        <div>This item is visible</div>\n    </div>\n\n</body>\n</html>\n```\n\n#### 2. Float属性\n\n`float` 属性用于让元素在其容器中左右浮动。\n\n**Float Left**:\n\n- `float-left` 元素使用 `float: left;` 属性，元素左浮动，后面的内容环绕在右侧。\n- `clear-left` 元素使用 `clear: left;` 属性，清除左侧浮动，这样 `clear-left` 元素就不会受到前面浮动元素的影响。\n\n**Float Right**:\n\n- `float-right` 元素使用 `float: right;` 属性，元素右浮动，后面的内容环绕在左侧。\n- `clear-right` 元素使用 `clear: right;` 属性，清除右侧浮动，这样 `clear-right` 元素就不会受到前面浮动元素的影响。\n\n**Clear Both**:\n\n- `float-left` 和 `float-right` 元素分别使用 `float: left;` 和 `float: right;` 属性，使元素分别左浮动和右浮动。\n- `clear-both` 元素使用 `clear: both;` 属性，清除左右两侧浮动，确保它不会受到前面所有浮动元素的影响。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Float 属性示例</title>\n    <style>\n        .container {\n            margin-bottom: 20px;\n            background-color: #f0f0f0;\n            padding: 10px;\n        }\n        .float-left {\n            float: left;\n            background-color: lightcoral;\n            margin: 5px;\n            padding: 10px;\n            width: 100px;\n            color: white;\n        }\n        .float-right {\n            float: right;\n            background-color: lightseagreen;\n            margin: 5px;\n            padding: 10px;\n            width: 100px;\n            color: white;\n        }\n        .clear-left {\n            clear: left;\n            background-color: lightblue;\n            margin: 5px;\n            padding: 10px;\n            color: white;\n        }\n        .clear-right {\n            clear: right;\n            background-color: lightpink;\n            margin: 5px;\n            padding: 10px;\n            color: white;\n        }\n        .clear-both {\n            clear: both;\n            background-color: lightgoldenrodyellow;\n            margin: 5px;\n            padding: 10px;\n            color: black;\n        }\n    </style>\n</head>\n<body>\n\n    <!-- Float Left -->\n    <div class=\"container\">\n        <div class=\"float-left\">Float Left 1</div>\n        <div class=\"float-left\">Float Left 2</div>\n        <div class=\"clear-left\">Clear Left</div>\n    </div>\n\n    <!-- Float Right -->\n    <div class=\"container\">\n        <div class=\"float-right\">Float Right 1</div>\n        <div class=\"float-right\">Float Right 2</div>\n        <div class=\"clear-right\">Clear Right</div>\n    </div>\n\n    <!-- Clear Both -->\n    <div class=\"container\">\n        <div class=\"float-left\">Float Left 3</div>\n        <div class=\"float-right\">Float Right 3</div>\n        <div class=\"clear-both\">Clear Both</div>\n    </div>\n\n</body>\n</html>\n```\n\n#### 3. Flexbox布局\n\n`flex` 布局是一种一维布局模型，可以非常方便地在容器中分配空间并对齐内容。主轴（项目的排列方向），交叉轴（垂直主轴），常见的属性包括：\n\n- `display: flex;`：将容器设置为弹性布局容器。\n- `flex-direction`：定义主轴方向（项目的排列方向），常见值有 `row`、`row-reverse`、`column`、`column-reverse`。\n- `justify-content`：定义主轴上的对齐方式，常见值有 `flex-start`、`flex-end`、`center`、`space-between`、`space-around`。\n- `align-items`：定义交叉轴上的对齐方式，常见值有 `flex-start`、`flex-end`、`center`、`baseline`、`stretch`。\n- `flex-wrap`：定义项目是否换行，常见值有 `nowrap`、`wrap`、`wrap-reverse`。\n- `flex-grow`：定义项目的扩展比例。\n- `flex-shrink`：定义项目的收缩比例。\n- `flex-basis`：定义项目的初始大小。\n\n**Flex Direction**:\n\n- `flex-direction: row;`：主轴方向为横向，从左到右排列。\n- `flex-direction: column;`：主轴方向为纵向，从上到下排列。\n\n**Justify Content**:\n\n- `justify-content: space-between;`：项目在主轴上均匀分布，第一个项目与最后一个项目贴边对齐。\n- `justify-content: center;`：项目在主轴上居中对齐。\n\n**Align Items**:\n\n- `align-items: flex-start;`：项目在交叉轴上起点对齐。\n- `align-items: center;`：项目在交叉轴上居中对齐。\n\n**Flex Wrap**:\n\n- `flex-wrap: wrap;`：项目在容器中换行，超出父容器宽度时会自动换行排列。\n\n**Flex Grow**:\n\n- `flex: 1;`、`flex: 2;` 和 `flex: 3;`：分别定义项目的扩展比例。`flex: 2` 的项目扩展比例是 `flex: 1` 的两倍，以此类推。\n\n**Flex Shrink**:\n\n- `flex: 1 1 200px;`：定义项目的收缩比例为1，初始大小为200px。当父容器宽度不足时，项目会按比例收缩。\n\n**Flex Basis**:\n\n- `flex-basis: 100px;`、`200px;` 和 `300px;`：分别定义项目的初始大小为100px、200px和300px。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flexbox 布局示例</title>\n    <style>\n        .container {\n            border: 1px solid #ddd;\n            margin-bottom: 20px;\n            padding: 10px;\n        }\n        .flex-container {\n            display: flex;\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin-bottom: 20px;\n        }\n        .flex-item {\n            background-color: lightcoral;\n            margin: 5px;\n            padding: 10px;\n            color: white;\n        }\n        .flex-item-1 { flex: 1; }\n        .flex-item-2 { flex: 2; }\n        .flex-item-3 { flex: 3; }\n    </style>\n</head>\n<body>\n\n    <!-- Flex Direction -->\n    <div class=\"container\">\n        <h3>Flex Direction (row)</h3>\n        <div class=\"flex-container\" style=\"flex-direction: row;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n        <h3>Flex Direction (column)</h3>\n        <div class=\"flex-container\" style=\"flex-direction: column;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n    </div>\n\n    <!-- Justify Content -->\n    <div class=\"container\">\n        <h3>Justify Content (space-between)</h3>\n        <div class=\"flex-container\" style=\"justify-content: space-between;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n        <h3>Justify Content (center)</h3>\n        <div class=\"flex-container\" style=\"justify-content: center;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n    </div>\n\n    <!-- Align Items -->\n    <div class=\"container\">\n        <h3>Align Items (flex-start)</h3>\n        <div class=\"flex-container\" style=\"align-items: flex-start; height: 200px;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n        <h3>Align Items (center)</h3>\n        <div class=\"flex-container\" style=\"align-items: center; height: 200px;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n    </div>\n\n    <!-- Flex Wrap -->\n    <div class=\"container\">\n        <h3>Flex Wrap (wrap)</h3>\n        <div class=\"flex-container\" style=\"flex-wrap: wrap;\">\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 1</div>\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 2</div>\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 3</div>\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 4</div>\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 5</div>\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 6</div>\n        </div>\n    </div>\n\n    <!-- Flex Grow -->\n    <div class=\"container\">\n        <h3>Flex Grow</h3>\n        <div class=\"flex-container\">\n            <div class=\"flex-item flex-item-1\">Item 1 (flex: 1)</div>\n            <div class=\"flex-item flex-item-2\">Item 2 (flex: 2)</div>\n            <div class=\"flex-item flex-item-3\">Item 3 (flex: 3)</div>\n        </div>\n    </div>\n\n    <!-- Flex Shrink -->\n    <div class=\"container\">\n        <h3>Flex Shrink</h3>\n        <div class=\"flex-container\" style=\"width: 300px;\">\n            <div class=\"flex-item\" style=\"flex: 1 1 200px;\">Item 1 (flex: 1 1 200px)</div>\n            <div class=\"flex-item\" style=\"flex: 1 1 200px;\">Item 2 (flex: 1 1 200px)</div>\n            <div class=\"flex-item\" style=\"flex: 1 1 200px;\">Item 3 (flex: 1 1 200px)</div>\n        </div>\n    </div>\n\n    <!-- Flex Basis -->\n    <div class=\"container\">\n        <h3>Flex Basis</h3>\n        <div class=\"flex-container\">\n            <div class=\"flex-item\" style=\"flex-basis: 100px;\">Item 1 (flex-basis: 100px)</div>\n            <div class=\"flex-item\" style=\"flex-basis: 200px;\">Item 2 (flex-basis: 200px)</div>\n            <div class=\"flex-item\" style=\"flex-basis: 300px;\">Item 3 (flex-basis: 300px)</div>\n        </div>\n    </div>\n\n</body>\n</html>\n```\n\n#### 4. Grid布局\n\n`grid` 布局是一种二维布局模型，可以在行和列中同时定义布局。常见的属性包括：\n\n- `display: grid;`：将容器设置为网格布局容器。\n- `grid-template-columns`：定义列的布局，例如 `grid-template-columns: 1fr 1fr;`。\n- `grid-template-rows`：定义行的布局，例如 `grid-template-rows: 100px 200px;`。\n- `gap`：定义网格间的间距。\n- `justify-items`：定义网格项目在行方向上的对齐方式。\n- `align-items`：定义网格项目在列方向上的对齐方式。\n\n**Grid Template Columns**:\n\n- `grid-template-columns: 1fr 1fr 1fr;`：将网格容器分为三列，每列占据相同的空间。\n\n**Grid Template Rows**:\n\n- `grid-template-rows: 100px 200px;`：将网格容器分为两行，第一行高度为 100px，第二行高度为 200px。\n\n**Gap**:\n\n- `gap: 10px;`：设置网格项目之间的间距为 10px。\n\n**Justify Items**:\n\n- `justify-items: center;`：设置网格项目在行方向上居中对齐。\n\n**Align Items**:\n\n- `align-items: center;`：设置网格项目在列方向上居中对齐。网格容器高度为 300px，网格项目高度为 50px，因此项目在容器中垂直居中对齐。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Grid 布局示例</title>\n    <style>\n        .container {\n            display: grid;\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin-bottom: 20px;\n        }\n        .grid-container {\n            display: grid;\n            border: 1px solid #ccc;\n            padding: 10px;\n            gap: 10px; /* 定义网格间的间距 */\n        }\n        .grid-item {\n            background-color: lightcoral;\n            padding: 10px;\n            color: white;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n\n    <!-- Grid Template Columns -->\n    <div class=\"container\">\n        <h3>Grid Template Columns (1fr 1fr 1fr)</h3>\n        <div class=\"grid-container\" style=\"grid-template-columns: 1fr 1fr 1fr;\">\n            <div class=\"grid-item\">Item 1</div>\n            <div class=\"grid-item\">Item 2</div>\n            <div class=\"grid-item\">Item 3</div>\n            <div class=\"grid-item\">Item 4</div>\n            <div class=\"grid-item\">Item 5</div>\n            <div class=\"grid-item\">Item 6</div>\n        </div>\n    </div>\n\n    <!-- Grid Template Rows -->\n    <div class=\"container\">\n        <h3>Grid Template Rows (100px 200px)</h3>\n        <div class=\"grid-container\" style=\"grid-template-rows: 100px 200px;\">\n            <div class=\"grid-item\">Item 1</div>\n            <div class=\"grid-item\">Item 2</div>\n            <div class=\"grid-item\">Item 3</div>\n            <div class=\"grid-item\">Item 4</div>\n        </div>\n    </div>\n\n    <!-- Justify Items -->\n    <div class=\"container\">\n        <h3>Justify Items (center)</h3>\n        <div class=\"grid-container\" style=\"grid-template-columns: 1fr 1fr 1fr; justify-items: center;\">\n            <div class=\"grid-item\">Item 1</div>\n            <div class=\"grid-item\">Item 2</div>\n            <div class=\"grid-item\">Item 3</div>\n            <div class=\"grid-item\">Item 4</div>\n            <div class=\"grid-item\">Item 5</div>\n            <div class=\"grid-item\">Item 6</div>\n        </div>\n    </div>\n\n    <!-- Align Items -->\n    <div class=\"container\">\n        <h3>Align Items (center)</h3>\n        <div class=\"grid-container\" style=\"grid-template-columns: 1fr 1fr 1fr; align-items: center; height: 300px;\">\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 1</div>\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 2</div>\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 3</div>\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 4</div>\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 5</div>\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 6</div>\n        </div>\n    </div>\n\n</body>\n</html>\n```\n\n### 5. Position属性\n\n`position` 属性用于指定元素的定位方式，常见的值包括：\n\n- `position: static;`：默认值，无特殊定位。\n- `position: relative;`：相对定位，相对于其正常位置进行偏移。\n- `position: absolute;`：绝对定位，相对于最近的定位祖先进行偏移。\n- `position: fixed;`：固定定位，相对于浏览器窗口进行偏移。\n- `position: sticky;`：粘性定位，在特定的滚动位置时定位。\n\n**Static Position**:\n\n- `position: static;`：这是默认值，元素按正常的文档流进行定位，没有任何偏移。\n\n**Relative Position**:\n\n- `position: relative;`：相对定位，元素相对于其正常位置进行偏移。示例中，元素向下偏移了 20px，向右偏移了 20px。\n\n**Absolute Position**:\n\n- `position: absolute;`：绝对定位，元素相对于最近的定位祖先进行偏移。示例中，元素相对于 `.container` 容器向下偏移了 20px，向右偏移了 20px。\n\n**Fixed Position**:\n\n- `position: fixed;`：固定定位，元素相对于浏览器窗口进行偏移。示例中，元素固定在窗口的右上角，向下偏移了 20px，向右偏移了 20px。\n\n**Sticky Position**:\n\n- `position: sticky;`：粘性定位，元素在特定的滚动位置时定位。示例中，元素在滚动到顶部时会固定在容器顶部。这里使用了 `-webkit-sticky` 以兼容旧版浏览器。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Position 属性示例</title>\n    <style>\n        .container {\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin-bottom: 20px;\n            height: 200px;\n            position: relative; /* 为了演示绝对定位 */\n        }\n        .box {\n            background-color: lightcoral;\n            padding: 10px;\n            color: white;\n            text-align: center;\n            margin-bottom: 10px;\n        }\n        .static-box {\n            position: static; /* 默认定位 */\n        }\n        .relative-box {\n            position: relative; /* 相对定位 */\n            top: 20px;\n            left: 20px;\n        }\n        .absolute-box {\n            position: absolute; /* 绝对定位 */\n            top: 20px;\n            left: 20px;\n        }\n        .fixed-box {\n            position: fixed; /* 固定定位 */\n            top: 20px;\n            right: 20px;\n        }\n        .sticky-box {\n            position: -webkit-sticky; /* 兼容旧版浏览器 */\n            position: sticky; /* 粘性定位 */\n            top: 0;\n            background-color: lightblue;\n        }\n    </style>\n</head>\n<body>\n\n    <!-- Static Position -->\n    <div class=\"container\">\n        <h3>Static Position</h3>\n        <div class=\"box static-box\">Static Box</div>\n    </div>\n\n    <!-- Relative Position -->\n    <div class=\"container\">\n        <h3>Relative Position</h3>\n        <div class=\"box relative-box\">Relative Box</div>\n    </div>\n\n    <!-- Absolute Position -->\n    <div class=\"container\">\n        <h3>Absolute Position</h3>\n        <div class=\"box absolute-box\">Absolute Box</div>\n    </div>\n\n    <!-- Fixed Position -->\n    <div class=\"container\">\n        <h3>Fixed Position</h3>\n        <div class=\"box fixed-box\">Fixed Box</div>\n    </div>\n\n    <!-- Sticky Position -->\n    <div class=\"container\" style=\"height: 500px; overflow-y: scroll;\">\n        <h3>Sticky Position</h3>\n        <div class=\"box sticky-box\">Sticky Box</div>\n            <p>1MySQL 事务，存储过程，索引，常用的语法，锁机制</p>\n        \t<p>2Redis用法，redisTemplate常见的用法，封装</p>\n        \t<p>3RocketMq或者rabbitMq用法</p>\n        \t<p>4mybatis用法，相关知识</p>\n        \t<p>5Java常见的集合，用法，Stream流，Optional类的使用</p>\n        \t<p>6在虚拟机上练习Linux命令，或者直接尝试用来部署项目</p>\n        \t<p>7vuex的用法，vue2基础框架结构，vue3的用法特性。</p>\n        \t<p>8Java多线程 锁机制 线程安全</p>\n        \t<p>9Linux基础命令练习</p>\n        \t<p>10常见的css布局</p> \n    </div>\n</body>\n</html>\n```\n\n","source":"_posts/css布局.md","raw":"---\ntitle: 一、css布局\ndate: 2024-07-08 22:32:50\ntags: css\n---\n\n### css布局\n\n​\t\t在CSS中，常用的布局方法有多种，每种方法都有其独特的优点和适用场景。下面是一些常见的布局方法及其主要属性：\n\n#### 1. Display属性\n\n`display` 属性决定了一个元素是如何显示在文档中的。常见的值包括：\n\n- `display: block;`：块级元素，`block-item`占据父容器的整个宽度，所以元素会自动换行，同时也可以设置`block-item`的高度。\n- `display: inline;`：行内元素，`inline-item`只占据内容所需的宽度，宽度自适应，无法修改`inline-item`的宽度和高度。\n- `display: inline-block;`：行内块元素，`inline-block-item`像行内元素那样排列，但可以设置宽度和高度。\n- `display: none;`：隐藏元素，不占据任何空间。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Display 属性示例</title>\n    <style>\n        .container {\n            margin-bottom: 20px;\n        }\n        .block-item {\n            display: block;\n            background-color: lightcoral;\n            margin: 5px 0;\n            padding: 10px;\n            color: white;\n        }\n        .inline-item {\n            display: inline;\n            background-color: lightseagreen;\n            margin: 5px;\n            padding: 10px;\n            color: white;\n        }\n        .inline-block-item {\n            display: inline-block;\n            background-color: lightblue;\n            margin: 5px;\n            padding: 10px;\n            width: 100px;\n            color: white;\n        }\n        .none-item {\n            display: none;\n        }\n    </style>\n</head>\n<body>\n\n    <!-- Display Block -->\n    <div class=\"container\">\n        <div class=\"block-item\">Block Item 1</div>\n        <div class=\"block-item\">Block Item 2</div>\n    </div>\n\n    <!-- Display Inline -->\n    <div class=\"container\">\n        <div class=\"inline-item\">Inline Item 1</div>\n        <div class=\"inline-item\">Inline Item 2</div>\n        <div class=\"inline-item\">Inline Item 3</div>\n    </div>\n\n    <!-- Display Inline-Block -->\n    <div class=\"container\">\n        <div class=\"inline-block-item\">Inline-Block Item 1</div>\n        <div class=\"inline-block-item\">Inline-Block Item 2</div>\n        <div class=\"inline-block-item\">Inline-Block Item 3</div>\n    </div>\n\n    <!-- Display None (Hidden) -->\n    <div class=\"container\">\n        <div class=\"none-item\">This item is hidden</div>\n        <div>This item is visible</div>\n    </div>\n\n</body>\n</html>\n```\n\n#### 2. Float属性\n\n`float` 属性用于让元素在其容器中左右浮动。\n\n**Float Left**:\n\n- `float-left` 元素使用 `float: left;` 属性，元素左浮动，后面的内容环绕在右侧。\n- `clear-left` 元素使用 `clear: left;` 属性，清除左侧浮动，这样 `clear-left` 元素就不会受到前面浮动元素的影响。\n\n**Float Right**:\n\n- `float-right` 元素使用 `float: right;` 属性，元素右浮动，后面的内容环绕在左侧。\n- `clear-right` 元素使用 `clear: right;` 属性，清除右侧浮动，这样 `clear-right` 元素就不会受到前面浮动元素的影响。\n\n**Clear Both**:\n\n- `float-left` 和 `float-right` 元素分别使用 `float: left;` 和 `float: right;` 属性，使元素分别左浮动和右浮动。\n- `clear-both` 元素使用 `clear: both;` 属性，清除左右两侧浮动，确保它不会受到前面所有浮动元素的影响。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Float 属性示例</title>\n    <style>\n        .container {\n            margin-bottom: 20px;\n            background-color: #f0f0f0;\n            padding: 10px;\n        }\n        .float-left {\n            float: left;\n            background-color: lightcoral;\n            margin: 5px;\n            padding: 10px;\n            width: 100px;\n            color: white;\n        }\n        .float-right {\n            float: right;\n            background-color: lightseagreen;\n            margin: 5px;\n            padding: 10px;\n            width: 100px;\n            color: white;\n        }\n        .clear-left {\n            clear: left;\n            background-color: lightblue;\n            margin: 5px;\n            padding: 10px;\n            color: white;\n        }\n        .clear-right {\n            clear: right;\n            background-color: lightpink;\n            margin: 5px;\n            padding: 10px;\n            color: white;\n        }\n        .clear-both {\n            clear: both;\n            background-color: lightgoldenrodyellow;\n            margin: 5px;\n            padding: 10px;\n            color: black;\n        }\n    </style>\n</head>\n<body>\n\n    <!-- Float Left -->\n    <div class=\"container\">\n        <div class=\"float-left\">Float Left 1</div>\n        <div class=\"float-left\">Float Left 2</div>\n        <div class=\"clear-left\">Clear Left</div>\n    </div>\n\n    <!-- Float Right -->\n    <div class=\"container\">\n        <div class=\"float-right\">Float Right 1</div>\n        <div class=\"float-right\">Float Right 2</div>\n        <div class=\"clear-right\">Clear Right</div>\n    </div>\n\n    <!-- Clear Both -->\n    <div class=\"container\">\n        <div class=\"float-left\">Float Left 3</div>\n        <div class=\"float-right\">Float Right 3</div>\n        <div class=\"clear-both\">Clear Both</div>\n    </div>\n\n</body>\n</html>\n```\n\n#### 3. Flexbox布局\n\n`flex` 布局是一种一维布局模型，可以非常方便地在容器中分配空间并对齐内容。主轴（项目的排列方向），交叉轴（垂直主轴），常见的属性包括：\n\n- `display: flex;`：将容器设置为弹性布局容器。\n- `flex-direction`：定义主轴方向（项目的排列方向），常见值有 `row`、`row-reverse`、`column`、`column-reverse`。\n- `justify-content`：定义主轴上的对齐方式，常见值有 `flex-start`、`flex-end`、`center`、`space-between`、`space-around`。\n- `align-items`：定义交叉轴上的对齐方式，常见值有 `flex-start`、`flex-end`、`center`、`baseline`、`stretch`。\n- `flex-wrap`：定义项目是否换行，常见值有 `nowrap`、`wrap`、`wrap-reverse`。\n- `flex-grow`：定义项目的扩展比例。\n- `flex-shrink`：定义项目的收缩比例。\n- `flex-basis`：定义项目的初始大小。\n\n**Flex Direction**:\n\n- `flex-direction: row;`：主轴方向为横向，从左到右排列。\n- `flex-direction: column;`：主轴方向为纵向，从上到下排列。\n\n**Justify Content**:\n\n- `justify-content: space-between;`：项目在主轴上均匀分布，第一个项目与最后一个项目贴边对齐。\n- `justify-content: center;`：项目在主轴上居中对齐。\n\n**Align Items**:\n\n- `align-items: flex-start;`：项目在交叉轴上起点对齐。\n- `align-items: center;`：项目在交叉轴上居中对齐。\n\n**Flex Wrap**:\n\n- `flex-wrap: wrap;`：项目在容器中换行，超出父容器宽度时会自动换行排列。\n\n**Flex Grow**:\n\n- `flex: 1;`、`flex: 2;` 和 `flex: 3;`：分别定义项目的扩展比例。`flex: 2` 的项目扩展比例是 `flex: 1` 的两倍，以此类推。\n\n**Flex Shrink**:\n\n- `flex: 1 1 200px;`：定义项目的收缩比例为1，初始大小为200px。当父容器宽度不足时，项目会按比例收缩。\n\n**Flex Basis**:\n\n- `flex-basis: 100px;`、`200px;` 和 `300px;`：分别定义项目的初始大小为100px、200px和300px。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flexbox 布局示例</title>\n    <style>\n        .container {\n            border: 1px solid #ddd;\n            margin-bottom: 20px;\n            padding: 10px;\n        }\n        .flex-container {\n            display: flex;\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin-bottom: 20px;\n        }\n        .flex-item {\n            background-color: lightcoral;\n            margin: 5px;\n            padding: 10px;\n            color: white;\n        }\n        .flex-item-1 { flex: 1; }\n        .flex-item-2 { flex: 2; }\n        .flex-item-3 { flex: 3; }\n    </style>\n</head>\n<body>\n\n    <!-- Flex Direction -->\n    <div class=\"container\">\n        <h3>Flex Direction (row)</h3>\n        <div class=\"flex-container\" style=\"flex-direction: row;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n        <h3>Flex Direction (column)</h3>\n        <div class=\"flex-container\" style=\"flex-direction: column;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n    </div>\n\n    <!-- Justify Content -->\n    <div class=\"container\">\n        <h3>Justify Content (space-between)</h3>\n        <div class=\"flex-container\" style=\"justify-content: space-between;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n        <h3>Justify Content (center)</h3>\n        <div class=\"flex-container\" style=\"justify-content: center;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n    </div>\n\n    <!-- Align Items -->\n    <div class=\"container\">\n        <h3>Align Items (flex-start)</h3>\n        <div class=\"flex-container\" style=\"align-items: flex-start; height: 200px;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n        <h3>Align Items (center)</h3>\n        <div class=\"flex-container\" style=\"align-items: center; height: 200px;\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n        </div>\n    </div>\n\n    <!-- Flex Wrap -->\n    <div class=\"container\">\n        <h3>Flex Wrap (wrap)</h3>\n        <div class=\"flex-container\" style=\"flex-wrap: wrap;\">\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 1</div>\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 2</div>\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 3</div>\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 4</div>\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 5</div>\n            <div class=\"flex-item\" style=\"width: 30%;\">Item 6</div>\n        </div>\n    </div>\n\n    <!-- Flex Grow -->\n    <div class=\"container\">\n        <h3>Flex Grow</h3>\n        <div class=\"flex-container\">\n            <div class=\"flex-item flex-item-1\">Item 1 (flex: 1)</div>\n            <div class=\"flex-item flex-item-2\">Item 2 (flex: 2)</div>\n            <div class=\"flex-item flex-item-3\">Item 3 (flex: 3)</div>\n        </div>\n    </div>\n\n    <!-- Flex Shrink -->\n    <div class=\"container\">\n        <h3>Flex Shrink</h3>\n        <div class=\"flex-container\" style=\"width: 300px;\">\n            <div class=\"flex-item\" style=\"flex: 1 1 200px;\">Item 1 (flex: 1 1 200px)</div>\n            <div class=\"flex-item\" style=\"flex: 1 1 200px;\">Item 2 (flex: 1 1 200px)</div>\n            <div class=\"flex-item\" style=\"flex: 1 1 200px;\">Item 3 (flex: 1 1 200px)</div>\n        </div>\n    </div>\n\n    <!-- Flex Basis -->\n    <div class=\"container\">\n        <h3>Flex Basis</h3>\n        <div class=\"flex-container\">\n            <div class=\"flex-item\" style=\"flex-basis: 100px;\">Item 1 (flex-basis: 100px)</div>\n            <div class=\"flex-item\" style=\"flex-basis: 200px;\">Item 2 (flex-basis: 200px)</div>\n            <div class=\"flex-item\" style=\"flex-basis: 300px;\">Item 3 (flex-basis: 300px)</div>\n        </div>\n    </div>\n\n</body>\n</html>\n```\n\n#### 4. Grid布局\n\n`grid` 布局是一种二维布局模型，可以在行和列中同时定义布局。常见的属性包括：\n\n- `display: grid;`：将容器设置为网格布局容器。\n- `grid-template-columns`：定义列的布局，例如 `grid-template-columns: 1fr 1fr;`。\n- `grid-template-rows`：定义行的布局，例如 `grid-template-rows: 100px 200px;`。\n- `gap`：定义网格间的间距。\n- `justify-items`：定义网格项目在行方向上的对齐方式。\n- `align-items`：定义网格项目在列方向上的对齐方式。\n\n**Grid Template Columns**:\n\n- `grid-template-columns: 1fr 1fr 1fr;`：将网格容器分为三列，每列占据相同的空间。\n\n**Grid Template Rows**:\n\n- `grid-template-rows: 100px 200px;`：将网格容器分为两行，第一行高度为 100px，第二行高度为 200px。\n\n**Gap**:\n\n- `gap: 10px;`：设置网格项目之间的间距为 10px。\n\n**Justify Items**:\n\n- `justify-items: center;`：设置网格项目在行方向上居中对齐。\n\n**Align Items**:\n\n- `align-items: center;`：设置网格项目在列方向上居中对齐。网格容器高度为 300px，网格项目高度为 50px，因此项目在容器中垂直居中对齐。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Grid 布局示例</title>\n    <style>\n        .container {\n            display: grid;\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin-bottom: 20px;\n        }\n        .grid-container {\n            display: grid;\n            border: 1px solid #ccc;\n            padding: 10px;\n            gap: 10px; /* 定义网格间的间距 */\n        }\n        .grid-item {\n            background-color: lightcoral;\n            padding: 10px;\n            color: white;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n\n    <!-- Grid Template Columns -->\n    <div class=\"container\">\n        <h3>Grid Template Columns (1fr 1fr 1fr)</h3>\n        <div class=\"grid-container\" style=\"grid-template-columns: 1fr 1fr 1fr;\">\n            <div class=\"grid-item\">Item 1</div>\n            <div class=\"grid-item\">Item 2</div>\n            <div class=\"grid-item\">Item 3</div>\n            <div class=\"grid-item\">Item 4</div>\n            <div class=\"grid-item\">Item 5</div>\n            <div class=\"grid-item\">Item 6</div>\n        </div>\n    </div>\n\n    <!-- Grid Template Rows -->\n    <div class=\"container\">\n        <h3>Grid Template Rows (100px 200px)</h3>\n        <div class=\"grid-container\" style=\"grid-template-rows: 100px 200px;\">\n            <div class=\"grid-item\">Item 1</div>\n            <div class=\"grid-item\">Item 2</div>\n            <div class=\"grid-item\">Item 3</div>\n            <div class=\"grid-item\">Item 4</div>\n        </div>\n    </div>\n\n    <!-- Justify Items -->\n    <div class=\"container\">\n        <h3>Justify Items (center)</h3>\n        <div class=\"grid-container\" style=\"grid-template-columns: 1fr 1fr 1fr; justify-items: center;\">\n            <div class=\"grid-item\">Item 1</div>\n            <div class=\"grid-item\">Item 2</div>\n            <div class=\"grid-item\">Item 3</div>\n            <div class=\"grid-item\">Item 4</div>\n            <div class=\"grid-item\">Item 5</div>\n            <div class=\"grid-item\">Item 6</div>\n        </div>\n    </div>\n\n    <!-- Align Items -->\n    <div class=\"container\">\n        <h3>Align Items (center)</h3>\n        <div class=\"grid-container\" style=\"grid-template-columns: 1fr 1fr 1fr; align-items: center; height: 300px;\">\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 1</div>\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 2</div>\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 3</div>\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 4</div>\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 5</div>\n            <div class=\"grid-item\" style=\"height: 50px;\">Item 6</div>\n        </div>\n    </div>\n\n</body>\n</html>\n```\n\n### 5. Position属性\n\n`position` 属性用于指定元素的定位方式，常见的值包括：\n\n- `position: static;`：默认值，无特殊定位。\n- `position: relative;`：相对定位，相对于其正常位置进行偏移。\n- `position: absolute;`：绝对定位，相对于最近的定位祖先进行偏移。\n- `position: fixed;`：固定定位，相对于浏览器窗口进行偏移。\n- `position: sticky;`：粘性定位，在特定的滚动位置时定位。\n\n**Static Position**:\n\n- `position: static;`：这是默认值，元素按正常的文档流进行定位，没有任何偏移。\n\n**Relative Position**:\n\n- `position: relative;`：相对定位，元素相对于其正常位置进行偏移。示例中，元素向下偏移了 20px，向右偏移了 20px。\n\n**Absolute Position**:\n\n- `position: absolute;`：绝对定位，元素相对于最近的定位祖先进行偏移。示例中，元素相对于 `.container` 容器向下偏移了 20px，向右偏移了 20px。\n\n**Fixed Position**:\n\n- `position: fixed;`：固定定位，元素相对于浏览器窗口进行偏移。示例中，元素固定在窗口的右上角，向下偏移了 20px，向右偏移了 20px。\n\n**Sticky Position**:\n\n- `position: sticky;`：粘性定位，元素在特定的滚动位置时定位。示例中，元素在滚动到顶部时会固定在容器顶部。这里使用了 `-webkit-sticky` 以兼容旧版浏览器。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Position 属性示例</title>\n    <style>\n        .container {\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin-bottom: 20px;\n            height: 200px;\n            position: relative; /* 为了演示绝对定位 */\n        }\n        .box {\n            background-color: lightcoral;\n            padding: 10px;\n            color: white;\n            text-align: center;\n            margin-bottom: 10px;\n        }\n        .static-box {\n            position: static; /* 默认定位 */\n        }\n        .relative-box {\n            position: relative; /* 相对定位 */\n            top: 20px;\n            left: 20px;\n        }\n        .absolute-box {\n            position: absolute; /* 绝对定位 */\n            top: 20px;\n            left: 20px;\n        }\n        .fixed-box {\n            position: fixed; /* 固定定位 */\n            top: 20px;\n            right: 20px;\n        }\n        .sticky-box {\n            position: -webkit-sticky; /* 兼容旧版浏览器 */\n            position: sticky; /* 粘性定位 */\n            top: 0;\n            background-color: lightblue;\n        }\n    </style>\n</head>\n<body>\n\n    <!-- Static Position -->\n    <div class=\"container\">\n        <h3>Static Position</h3>\n        <div class=\"box static-box\">Static Box</div>\n    </div>\n\n    <!-- Relative Position -->\n    <div class=\"container\">\n        <h3>Relative Position</h3>\n        <div class=\"box relative-box\">Relative Box</div>\n    </div>\n\n    <!-- Absolute Position -->\n    <div class=\"container\">\n        <h3>Absolute Position</h3>\n        <div class=\"box absolute-box\">Absolute Box</div>\n    </div>\n\n    <!-- Fixed Position -->\n    <div class=\"container\">\n        <h3>Fixed Position</h3>\n        <div class=\"box fixed-box\">Fixed Box</div>\n    </div>\n\n    <!-- Sticky Position -->\n    <div class=\"container\" style=\"height: 500px; overflow-y: scroll;\">\n        <h3>Sticky Position</h3>\n        <div class=\"box sticky-box\">Sticky Box</div>\n            <p>1MySQL 事务，存储过程，索引，常用的语法，锁机制</p>\n        \t<p>2Redis用法，redisTemplate常见的用法，封装</p>\n        \t<p>3RocketMq或者rabbitMq用法</p>\n        \t<p>4mybatis用法，相关知识</p>\n        \t<p>5Java常见的集合，用法，Stream流，Optional类的使用</p>\n        \t<p>6在虚拟机上练习Linux命令，或者直接尝试用来部署项目</p>\n        \t<p>7vuex的用法，vue2基础框架结构，vue3的用法特性。</p>\n        \t<p>8Java多线程 锁机制 线程安全</p>\n        \t<p>9Linux基础命令练习</p>\n        \t<p>10常见的css布局</p> \n    </div>\n</body>\n</html>\n```\n\n","slug":"css布局","published":1,"updated":"2024-07-26T15:44:47.971Z","_id":"clyfygjj70000jcu41n8h9ogi","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"css布局\"><a href=\"#css布局\" class=\"headerlink\" title=\"css布局\"></a>css布局</h3><p>​\t\t在CSS中，常用的布局方法有多种，每种方法都有其独特的优点和适用场景。下面是一些常见的布局方法及其主要属性：</p>\n<h4 id=\"1-Display属性\"><a href=\"#1-Display属性\" class=\"headerlink\" title=\"1. Display属性\"></a>1. Display属性</h4><p><code>display</code> 属性决定了一个元素是如何显示在文档中的。常见的值包括：</p>\n<ul>\n<li><code>display: block;</code>：块级元素，<code>block-item</code>占据父容器的整个宽度，所以元素会自动换行，同时也可以设置<code>block-item</code>的高度。</li>\n<li><code>display: inline;</code>：行内元素，<code>inline-item</code>只占据内容所需的宽度，宽度自适应，无法修改<code>inline-item</code>的宽度和高度。</li>\n<li><code>display: inline-block;</code>：行内块元素，<code>inline-block-item</code>像行内元素那样排列，但可以设置宽度和高度。</li>\n<li><code>display: none;</code>：隐藏元素，不占据任何空间。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Display 属性示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.block-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightcoral;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.inline-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightseagreen;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.inline-block-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightblue;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.none-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Display Block --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;block-item&quot;</span>&gt;</span>Block Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;block-item&quot;</span>&gt;</span>Block Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Display Inline --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-item&quot;</span>&gt;</span>Inline Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-item&quot;</span>&gt;</span>Inline Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-item&quot;</span>&gt;</span>Inline Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Display Inline-Block --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-block-item&quot;</span>&gt;</span>Inline-Block Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-block-item&quot;</span>&gt;</span>Inline-Block Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-block-item&quot;</span>&gt;</span>Inline-Block Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Display None (Hidden) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;none-item&quot;</span>&gt;</span>This item is hidden<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This item is visible<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Float属性\"><a href=\"#2-Float属性\" class=\"headerlink\" title=\"2. Float属性\"></a>2. Float属性</h4><p><code>float</code> 属性用于让元素在其容器中左右浮动。</p>\n<p><strong>Float Left</strong>:</p>\n<ul>\n<li><code>float-left</code> 元素使用 <code>float: left;</code> 属性，元素左浮动，后面的内容环绕在右侧。</li>\n<li><code>clear-left</code> 元素使用 <code>clear: left;</code> 属性，清除左侧浮动，这样 <code>clear-left</code> 元素就不会受到前面浮动元素的影响。</li>\n</ul>\n<p><strong>Float Right</strong>:</p>\n<ul>\n<li><code>float-right</code> 元素使用 <code>float: right;</code> 属性，元素右浮动，后面的内容环绕在左侧。</li>\n<li><code>clear-right</code> 元素使用 <code>clear: right;</code> 属性，清除右侧浮动，这样 <code>clear-right</code> 元素就不会受到前面浮动元素的影响。</li>\n</ul>\n<p><strong>Clear Both</strong>:</p>\n<ul>\n<li><code>float-left</code> 和 <code>float-right</code> 元素分别使用 <code>float: left;</code> 和 <code>float: right;</code> 属性，使元素分别左浮动和右浮动。</li>\n<li><code>clear-both</code> 元素使用 <code>clear: both;</code> 属性，清除左右两侧浮动，确保它不会受到前面所有浮动元素的影响。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Float 属性示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f0f0f0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.float-left</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">float</span>: left;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightcoral;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.float-right</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">float</span>: right;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightseagreen;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.clear-left</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">clear</span>: left;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightblue;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.clear-right</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">clear</span>: right;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightpink;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.clear-both</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">clear</span>: both;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightgoldenrodyellow;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: black;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Float Left --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-left&quot;</span>&gt;</span>Float Left 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-left&quot;</span>&gt;</span>Float Left 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clear-left&quot;</span>&gt;</span>Clear Left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Float Right --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-right&quot;</span>&gt;</span>Float Right 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-right&quot;</span>&gt;</span>Float Right 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clear-right&quot;</span>&gt;</span>Clear Right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Clear Both --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-left&quot;</span>&gt;</span>Float Left 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-right&quot;</span>&gt;</span>Float Right 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clear-both&quot;</span>&gt;</span>Clear Both<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Flexbox布局\"><a href=\"#3-Flexbox布局\" class=\"headerlink\" title=\"3. Flexbox布局\"></a>3. Flexbox布局</h4><p><code>flex</code> 布局是一种一维布局模型，可以非常方便地在容器中分配空间并对齐内容。主轴（项目的排列方向），交叉轴（垂直主轴），常见的属性包括：</p>\n<ul>\n<li><code>display: flex;</code>：将容器设置为弹性布局容器。</li>\n<li><code>flex-direction</code>：定义主轴方向（项目的排列方向），常见值有 <code>row</code>、<code>row-reverse</code>、<code>column</code>、<code>column-reverse</code>。</li>\n<li><code>justify-content</code>：定义主轴上的对齐方式，常见值有 <code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>space-between</code>、<code>space-around</code>。</li>\n<li><code>align-items</code>：定义交叉轴上的对齐方式，常见值有 <code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>baseline</code>、<code>stretch</code>。</li>\n<li><code>flex-wrap</code>：定义项目是否换行，常见值有 <code>nowrap</code>、<code>wrap</code>、<code>wrap-reverse</code>。</li>\n<li><code>flex-grow</code>：定义项目的扩展比例。</li>\n<li><code>flex-shrink</code>：定义项目的收缩比例。</li>\n<li><code>flex-basis</code>：定义项目的初始大小。</li>\n</ul>\n<p><strong>Flex Direction</strong>:</p>\n<ul>\n<li><code>flex-direction: row;</code>：主轴方向为横向，从左到右排列。</li>\n<li><code>flex-direction: column;</code>：主轴方向为纵向，从上到下排列。</li>\n</ul>\n<p><strong>Justify Content</strong>:</p>\n<ul>\n<li><code>justify-content: space-between;</code>：项目在主轴上均匀分布，第一个项目与最后一个项目贴边对齐。</li>\n<li><code>justify-content: center;</code>：项目在主轴上居中对齐。</li>\n</ul>\n<p><strong>Align Items</strong>:</p>\n<ul>\n<li><code>align-items: flex-start;</code>：项目在交叉轴上起点对齐。</li>\n<li><code>align-items: center;</code>：项目在交叉轴上居中对齐。</li>\n</ul>\n<p><strong>Flex Wrap</strong>:</p>\n<ul>\n<li><code>flex-wrap: wrap;</code>：项目在容器中换行，超出父容器宽度时会自动换行排列。</li>\n</ul>\n<p><strong>Flex Grow</strong>:</p>\n<ul>\n<li><code>flex: 1;</code>、<code>flex: 2;</code> 和 <code>flex: 3;</code>：分别定义项目的扩展比例。<code>flex: 2</code> 的项目扩展比例是 <code>flex: 1</code> 的两倍，以此类推。</li>\n</ul>\n<p><strong>Flex Shrink</strong>:</p>\n<ul>\n<li><code>flex: 1 1 200px;</code>：定义项目的收缩比例为1，初始大小为200px。当父容器宽度不足时，项目会按比例收缩。</li>\n</ul>\n<p><strong>Flex Basis</strong>:</p>\n<ul>\n<li><code>flex-basis: 100px;</code>、<code>200px;</code> 和 <code>300px;</code>：分别定义项目的初始大小为100px、200px和300px。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Flexbox 布局示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.flex-container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.flex-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightcoral;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.flex-item-1</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.flex-item-2</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">2</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.flex-item-3</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">3</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Flex Direction --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Direction (row)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-direction: row;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Direction (column)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-direction: column;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Justify Content --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Justify Content (space-between)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;justify-content: space-between;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Justify Content (center)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;justify-content: center;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Align Items --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Align Items (flex-start)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;align-items: flex-start; height: 200px;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Align Items (center)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;align-items: center; height: 200px;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Flex Wrap --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Wrap (wrap)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-wrap: wrap;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Flex Grow --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Grow<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item flex-item-1&quot;</span>&gt;</span>Item 1 (flex: 1)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item flex-item-2&quot;</span>&gt;</span>Item 2 (flex: 2)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item flex-item-3&quot;</span>&gt;</span>Item 3 (flex: 3)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Flex Shrink --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Shrink<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 300px;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex: 1 1 200px;&quot;</span>&gt;</span>Item 1 (flex: 1 1 200px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex: 1 1 200px;&quot;</span>&gt;</span>Item 2 (flex: 1 1 200px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex: 1 1 200px;&quot;</span>&gt;</span>Item 3 (flex: 1 1 200px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Flex Basis --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Basis<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-basis: 100px;&quot;</span>&gt;</span>Item 1 (flex-basis: 100px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-basis: 200px;&quot;</span>&gt;</span>Item 2 (flex-basis: 200px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-basis: 300px;&quot;</span>&gt;</span>Item 3 (flex-basis: 300px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Grid布局\"><a href=\"#4-Grid布局\" class=\"headerlink\" title=\"4. Grid布局\"></a>4. Grid布局</h4><p><code>grid</code> 布局是一种二维布局模型，可以在行和列中同时定义布局。常见的属性包括：</p>\n<ul>\n<li><code>display: grid;</code>：将容器设置为网格布局容器。</li>\n<li><code>grid-template-columns</code>：定义列的布局，例如 <code>grid-template-columns: 1fr 1fr;</code>。</li>\n<li><code>grid-template-rows</code>：定义行的布局，例如 <code>grid-template-rows: 100px 200px;</code>。</li>\n<li><code>gap</code>：定义网格间的间距。</li>\n<li><code>justify-items</code>：定义网格项目在行方向上的对齐方式。</li>\n<li><code>align-items</code>：定义网格项目在列方向上的对齐方式。</li>\n</ul>\n<p><strong>Grid Template Columns</strong>:</p>\n<ul>\n<li><code>grid-template-columns: 1fr 1fr 1fr;</code>：将网格容器分为三列，每列占据相同的空间。</li>\n</ul>\n<p><strong>Grid Template Rows</strong>:</p>\n<ul>\n<li><code>grid-template-rows: 100px 200px;</code>：将网格容器分为两行，第一行高度为 100px，第二行高度为 200px。</li>\n</ul>\n<p><strong>Gap</strong>:</p>\n<ul>\n<li><code>gap: 10px;</code>：设置网格项目之间的间距为 10px。</li>\n</ul>\n<p><strong>Justify Items</strong>:</p>\n<ul>\n<li><code>justify-items: center;</code>：设置网格项目在行方向上居中对齐。</li>\n</ul>\n<p><strong>Align Items</strong>:</p>\n<ul>\n<li><code>align-items: center;</code>：设置网格项目在列方向上居中对齐。网格容器高度为 300px，网格项目高度为 50px，因此项目在容器中垂直居中对齐。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Grid 布局示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: grid;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.grid-container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: grid;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">gap</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/* 定义网格间的间距 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.grid-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightcoral;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Grid Template Columns --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Grid Template Columns (1fr 1fr 1fr)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;grid-template-columns: 1fr 1fr 1fr;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Grid Template Rows --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Grid Template Rows (100px 200px)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;grid-template-rows: 100px 200px;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Justify Items --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Justify Items (center)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;grid-template-columns: 1fr 1fr 1fr; justify-items: center;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Align Items --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Align Items (center)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;grid-template-columns: 1fr 1fr 1fr; align-items: center; height: 300px;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Position属性\"><a href=\"#5-Position属性\" class=\"headerlink\" title=\"5. Position属性\"></a>5. Position属性</h3><p><code>position</code> 属性用于指定元素的定位方式，常见的值包括：</p>\n<ul>\n<li><code>position: static;</code>：默认值，无特殊定位。</li>\n<li><code>position: relative;</code>：相对定位，相对于其正常位置进行偏移。</li>\n<li><code>position: absolute;</code>：绝对定位，相对于最近的定位祖先进行偏移。</li>\n<li><code>position: fixed;</code>：固定定位，相对于浏览器窗口进行偏移。</li>\n<li><code>position: sticky;</code>：粘性定位，在特定的滚动位置时定位。</li>\n</ul>\n<p><strong>Static Position</strong>:</p>\n<ul>\n<li><code>position: static;</code>：这是默认值，元素按正常的文档流进行定位，没有任何偏移。</li>\n</ul>\n<p><strong>Relative Position</strong>:</p>\n<ul>\n<li><code>position: relative;</code>：相对定位，元素相对于其正常位置进行偏移。示例中，元素向下偏移了 20px，向右偏移了 20px。</li>\n</ul>\n<p><strong>Absolute Position</strong>:</p>\n<ul>\n<li><code>position: absolute;</code>：绝对定位，元素相对于最近的定位祖先进行偏移。示例中，元素相对于 <code>.container</code> 容器向下偏移了 20px，向右偏移了 20px。</li>\n</ul>\n<p><strong>Fixed Position</strong>:</p>\n<ul>\n<li><code>position: fixed;</code>：固定定位，元素相对于浏览器窗口进行偏移。示例中，元素固定在窗口的右上角，向下偏移了 20px，向右偏移了 20px。</li>\n</ul>\n<p><strong>Sticky Position</strong>:</p>\n<ul>\n<li><code>position: sticky;</code>：粘性定位，元素在特定的滚动位置时定位。示例中，元素在滚动到顶部时会固定在容器顶部。这里使用了 <code>-webkit-sticky</code> 以兼容旧版浏览器。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Position 属性示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: relative; <span class=\"comment\">/* 为了演示绝对定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightcoral;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.static-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: static; <span class=\"comment\">/* 默认定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.relative-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: relative; <span class=\"comment\">/* 相对定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">left</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.absolute-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: absolute; <span class=\"comment\">/* 绝对定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">left</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.fixed-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: fixed; <span class=\"comment\">/* 固定定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.sticky-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: -webkit-sticky; <span class=\"comment\">/* 兼容旧版浏览器 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: sticky; <span class=\"comment\">/* 粘性定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightblue;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Static Position --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Static Position<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box static-box&quot;</span>&gt;</span>Static Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Relative Position --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Relative Position<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box relative-box&quot;</span>&gt;</span>Relative Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Absolute Position --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Absolute Position<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box absolute-box&quot;</span>&gt;</span>Absolute Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Fixed Position --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Fixed Position<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box fixed-box&quot;</span>&gt;</span>Fixed Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Sticky Position --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 500px; overflow-y: scroll;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Sticky Position<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box sticky-box&quot;</span>&gt;</span>Sticky Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1MySQL 事务，存储过程，索引，常用的语法，锁机制<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2Redis用法，redisTemplate常见的用法，封装<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3RocketMq或者rabbitMq用法<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>4mybatis用法，相关知识<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>5Java常见的集合，用法，Stream流，Optional类的使用<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>6在虚拟机上练习Linux命令，或者直接尝试用来部署项目<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>7vuex的用法，vue2基础框架结构，vue3的用法特性。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>8Java多线程 锁机制 线程安全<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>9Linux基础命令练习<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>10常见的css布局<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h3 id=\"css布局\"><a href=\"#css布局\" class=\"headerlink\" title=\"css布局\"></a>css布局</h3><p>​\t\t在CSS中，常用的布局方法有多种，每种方法都有其独特的优点和适用场景。下面是一些常见的布局方法及其主要属性：</p>\n<h4 id=\"1-Display属性\"><a href=\"#1-Display属性\" class=\"headerlink\" title=\"1. Display属性\"></a>1. Display属性</h4><p><code>display</code> 属性决定了一个元素是如何显示在文档中的。常见的值包括：</p>\n<ul>\n<li><code>display: block;</code>：块级元素，<code>block-item</code>占据父容器的整个宽度，所以元素会自动换行，同时也可以设置<code>block-item</code>的高度。</li>\n<li><code>display: inline;</code>：行内元素，<code>inline-item</code>只占据内容所需的宽度，宽度自适应，无法修改<code>inline-item</code>的宽度和高度。</li>\n<li><code>display: inline-block;</code>：行内块元素，<code>inline-block-item</code>像行内元素那样排列，但可以设置宽度和高度。</li>\n<li><code>display: none;</code>：隐藏元素，不占据任何空间。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Display 属性示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.block-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightcoral;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.inline-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightseagreen;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.inline-block-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightblue;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.none-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Display Block --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;block-item&quot;</span>&gt;</span>Block Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;block-item&quot;</span>&gt;</span>Block Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Display Inline --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-item&quot;</span>&gt;</span>Inline Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-item&quot;</span>&gt;</span>Inline Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-item&quot;</span>&gt;</span>Inline Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Display Inline-Block --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-block-item&quot;</span>&gt;</span>Inline-Block Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-block-item&quot;</span>&gt;</span>Inline-Block Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inline-block-item&quot;</span>&gt;</span>Inline-Block Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Display None (Hidden) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;none-item&quot;</span>&gt;</span>This item is hidden<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This item is visible<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Float属性\"><a href=\"#2-Float属性\" class=\"headerlink\" title=\"2. Float属性\"></a>2. Float属性</h4><p><code>float</code> 属性用于让元素在其容器中左右浮动。</p>\n<p><strong>Float Left</strong>:</p>\n<ul>\n<li><code>float-left</code> 元素使用 <code>float: left;</code> 属性，元素左浮动，后面的内容环绕在右侧。</li>\n<li><code>clear-left</code> 元素使用 <code>clear: left;</code> 属性，清除左侧浮动，这样 <code>clear-left</code> 元素就不会受到前面浮动元素的影响。</li>\n</ul>\n<p><strong>Float Right</strong>:</p>\n<ul>\n<li><code>float-right</code> 元素使用 <code>float: right;</code> 属性，元素右浮动，后面的内容环绕在左侧。</li>\n<li><code>clear-right</code> 元素使用 <code>clear: right;</code> 属性，清除右侧浮动，这样 <code>clear-right</code> 元素就不会受到前面浮动元素的影响。</li>\n</ul>\n<p><strong>Clear Both</strong>:</p>\n<ul>\n<li><code>float-left</code> 和 <code>float-right</code> 元素分别使用 <code>float: left;</code> 和 <code>float: right;</code> 属性，使元素分别左浮动和右浮动。</li>\n<li><code>clear-both</code> 元素使用 <code>clear: both;</code> 属性，清除左右两侧浮动，确保它不会受到前面所有浮动元素的影响。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Float 属性示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f0f0f0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.float-left</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">float</span>: left;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightcoral;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.float-right</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">float</span>: right;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightseagreen;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.clear-left</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">clear</span>: left;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightblue;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.clear-right</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">clear</span>: right;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightpink;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.clear-both</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">clear</span>: both;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightgoldenrodyellow;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: black;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Float Left --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-left&quot;</span>&gt;</span>Float Left 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-left&quot;</span>&gt;</span>Float Left 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clear-left&quot;</span>&gt;</span>Clear Left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Float Right --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-right&quot;</span>&gt;</span>Float Right 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-right&quot;</span>&gt;</span>Float Right 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clear-right&quot;</span>&gt;</span>Clear Right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Clear Both --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-left&quot;</span>&gt;</span>Float Left 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float-right&quot;</span>&gt;</span>Float Right 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clear-both&quot;</span>&gt;</span>Clear Both<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Flexbox布局\"><a href=\"#3-Flexbox布局\" class=\"headerlink\" title=\"3. Flexbox布局\"></a>3. Flexbox布局</h4><p><code>flex</code> 布局是一种一维布局模型，可以非常方便地在容器中分配空间并对齐内容。主轴（项目的排列方向），交叉轴（垂直主轴），常见的属性包括：</p>\n<ul>\n<li><code>display: flex;</code>：将容器设置为弹性布局容器。</li>\n<li><code>flex-direction</code>：定义主轴方向（项目的排列方向），常见值有 <code>row</code>、<code>row-reverse</code>、<code>column</code>、<code>column-reverse</code>。</li>\n<li><code>justify-content</code>：定义主轴上的对齐方式，常见值有 <code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>space-between</code>、<code>space-around</code>。</li>\n<li><code>align-items</code>：定义交叉轴上的对齐方式，常见值有 <code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>baseline</code>、<code>stretch</code>。</li>\n<li><code>flex-wrap</code>：定义项目是否换行，常见值有 <code>nowrap</code>、<code>wrap</code>、<code>wrap-reverse</code>。</li>\n<li><code>flex-grow</code>：定义项目的扩展比例。</li>\n<li><code>flex-shrink</code>：定义项目的收缩比例。</li>\n<li><code>flex-basis</code>：定义项目的初始大小。</li>\n</ul>\n<p><strong>Flex Direction</strong>:</p>\n<ul>\n<li><code>flex-direction: row;</code>：主轴方向为横向，从左到右排列。</li>\n<li><code>flex-direction: column;</code>：主轴方向为纵向，从上到下排列。</li>\n</ul>\n<p><strong>Justify Content</strong>:</p>\n<ul>\n<li><code>justify-content: space-between;</code>：项目在主轴上均匀分布，第一个项目与最后一个项目贴边对齐。</li>\n<li><code>justify-content: center;</code>：项目在主轴上居中对齐。</li>\n</ul>\n<p><strong>Align Items</strong>:</p>\n<ul>\n<li><code>align-items: flex-start;</code>：项目在交叉轴上起点对齐。</li>\n<li><code>align-items: center;</code>：项目在交叉轴上居中对齐。</li>\n</ul>\n<p><strong>Flex Wrap</strong>:</p>\n<ul>\n<li><code>flex-wrap: wrap;</code>：项目在容器中换行，超出父容器宽度时会自动换行排列。</li>\n</ul>\n<p><strong>Flex Grow</strong>:</p>\n<ul>\n<li><code>flex: 1;</code>、<code>flex: 2;</code> 和 <code>flex: 3;</code>：分别定义项目的扩展比例。<code>flex: 2</code> 的项目扩展比例是 <code>flex: 1</code> 的两倍，以此类推。</li>\n</ul>\n<p><strong>Flex Shrink</strong>:</p>\n<ul>\n<li><code>flex: 1 1 200px;</code>：定义项目的收缩比例为1，初始大小为200px。当父容器宽度不足时，项目会按比例收缩。</li>\n</ul>\n<p><strong>Flex Basis</strong>:</p>\n<ul>\n<li><code>flex-basis: 100px;</code>、<code>200px;</code> 和 <code>300px;</code>：分别定义项目的初始大小为100px、200px和300px。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Flexbox 布局示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.flex-container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.flex-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightcoral;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.flex-item-1</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.flex-item-2</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">2</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.flex-item-3</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">3</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Flex Direction --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Direction (row)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-direction: row;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Direction (column)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-direction: column;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Justify Content --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Justify Content (space-between)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;justify-content: space-between;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Justify Content (center)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;justify-content: center;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Align Items --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Align Items (flex-start)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;align-items: flex-start; height: 200px;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Align Items (center)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;align-items: center; height: 200px;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Flex Wrap --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Wrap (wrap)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-wrap: wrap;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 30%;&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Flex Grow --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Grow<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item flex-item-1&quot;</span>&gt;</span>Item 1 (flex: 1)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item flex-item-2&quot;</span>&gt;</span>Item 2 (flex: 2)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item flex-item-3&quot;</span>&gt;</span>Item 3 (flex: 3)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Flex Shrink --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Shrink<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 300px;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex: 1 1 200px;&quot;</span>&gt;</span>Item 1 (flex: 1 1 200px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex: 1 1 200px;&quot;</span>&gt;</span>Item 2 (flex: 1 1 200px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex: 1 1 200px;&quot;</span>&gt;</span>Item 3 (flex: 1 1 200px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Flex Basis --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Flex Basis<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-container&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-basis: 100px;&quot;</span>&gt;</span>Item 1 (flex-basis: 100px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-basis: 200px;&quot;</span>&gt;</span>Item 2 (flex-basis: 200px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;flex-basis: 300px;&quot;</span>&gt;</span>Item 3 (flex-basis: 300px)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Grid布局\"><a href=\"#4-Grid布局\" class=\"headerlink\" title=\"4. Grid布局\"></a>4. Grid布局</h4><p><code>grid</code> 布局是一种二维布局模型，可以在行和列中同时定义布局。常见的属性包括：</p>\n<ul>\n<li><code>display: grid;</code>：将容器设置为网格布局容器。</li>\n<li><code>grid-template-columns</code>：定义列的布局，例如 <code>grid-template-columns: 1fr 1fr;</code>。</li>\n<li><code>grid-template-rows</code>：定义行的布局，例如 <code>grid-template-rows: 100px 200px;</code>。</li>\n<li><code>gap</code>：定义网格间的间距。</li>\n<li><code>justify-items</code>：定义网格项目在行方向上的对齐方式。</li>\n<li><code>align-items</code>：定义网格项目在列方向上的对齐方式。</li>\n</ul>\n<p><strong>Grid Template Columns</strong>:</p>\n<ul>\n<li><code>grid-template-columns: 1fr 1fr 1fr;</code>：将网格容器分为三列，每列占据相同的空间。</li>\n</ul>\n<p><strong>Grid Template Rows</strong>:</p>\n<ul>\n<li><code>grid-template-rows: 100px 200px;</code>：将网格容器分为两行，第一行高度为 100px，第二行高度为 200px。</li>\n</ul>\n<p><strong>Gap</strong>:</p>\n<ul>\n<li><code>gap: 10px;</code>：设置网格项目之间的间距为 10px。</li>\n</ul>\n<p><strong>Justify Items</strong>:</p>\n<ul>\n<li><code>justify-items: center;</code>：设置网格项目在行方向上居中对齐。</li>\n</ul>\n<p><strong>Align Items</strong>:</p>\n<ul>\n<li><code>align-items: center;</code>：设置网格项目在列方向上居中对齐。网格容器高度为 300px，网格项目高度为 50px，因此项目在容器中垂直居中对齐。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Grid 布局示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: grid;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.grid-container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: grid;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">gap</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/* 定义网格间的间距 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.grid-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightcoral;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Grid Template Columns --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Grid Template Columns (1fr 1fr 1fr)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;grid-template-columns: 1fr 1fr 1fr;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Grid Template Rows --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Grid Template Rows (100px 200px)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;grid-template-rows: 100px 200px;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Justify Items --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Justify Items (center)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;grid-template-columns: 1fr 1fr 1fr; justify-items: center;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Align Items --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Align Items (center)<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;grid-template-columns: 1fr 1fr 1fr; align-items: center; height: 300px;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;grid-item&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 50px;&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Position属性\"><a href=\"#5-Position属性\" class=\"headerlink\" title=\"5. Position属性\"></a>5. Position属性</h3><p><code>position</code> 属性用于指定元素的定位方式，常见的值包括：</p>\n<ul>\n<li><code>position: static;</code>：默认值，无特殊定位。</li>\n<li><code>position: relative;</code>：相对定位，相对于其正常位置进行偏移。</li>\n<li><code>position: absolute;</code>：绝对定位，相对于最近的定位祖先进行偏移。</li>\n<li><code>position: fixed;</code>：固定定位，相对于浏览器窗口进行偏移。</li>\n<li><code>position: sticky;</code>：粘性定位，在特定的滚动位置时定位。</li>\n</ul>\n<p><strong>Static Position</strong>:</p>\n<ul>\n<li><code>position: static;</code>：这是默认值，元素按正常的文档流进行定位，没有任何偏移。</li>\n</ul>\n<p><strong>Relative Position</strong>:</p>\n<ul>\n<li><code>position: relative;</code>：相对定位，元素相对于其正常位置进行偏移。示例中，元素向下偏移了 20px，向右偏移了 20px。</li>\n</ul>\n<p><strong>Absolute Position</strong>:</p>\n<ul>\n<li><code>position: absolute;</code>：绝对定位，元素相对于最近的定位祖先进行偏移。示例中，元素相对于 <code>.container</code> 容器向下偏移了 20px，向右偏移了 20px。</li>\n</ul>\n<p><strong>Fixed Position</strong>:</p>\n<ul>\n<li><code>position: fixed;</code>：固定定位，元素相对于浏览器窗口进行偏移。示例中，元素固定在窗口的右上角，向下偏移了 20px，向右偏移了 20px。</li>\n</ul>\n<p><strong>Sticky Position</strong>:</p>\n<ul>\n<li><code>position: sticky;</code>：粘性定位，元素在特定的滚动位置时定位。示例中，元素在滚动到顶部时会固定在容器顶部。这里使用了 <code>-webkit-sticky</code> 以兼容旧版浏览器。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Position 属性示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: relative; <span class=\"comment\">/* 为了演示绝对定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightcoral;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.static-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: static; <span class=\"comment\">/* 默认定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.relative-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: relative; <span class=\"comment\">/* 相对定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">left</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.absolute-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: absolute; <span class=\"comment\">/* 绝对定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">left</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.fixed-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: fixed; <span class=\"comment\">/* 固定定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.sticky-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: -webkit-sticky; <span class=\"comment\">/* 兼容旧版浏览器 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: sticky; <span class=\"comment\">/* 粘性定位 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: lightblue;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Static Position --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Static Position<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box static-box&quot;</span>&gt;</span>Static Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Relative Position --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Relative Position<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box relative-box&quot;</span>&gt;</span>Relative Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Absolute Position --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Absolute Position<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box absolute-box&quot;</span>&gt;</span>Absolute Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Fixed Position --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Fixed Position<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box fixed-box&quot;</span>&gt;</span>Fixed Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Sticky Position --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 500px; overflow-y: scroll;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Sticky Position<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box sticky-box&quot;</span>&gt;</span>Sticky Box<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1MySQL 事务，存储过程，索引，常用的语法，锁机制<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2Redis用法，redisTemplate常见的用法，封装<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3RocketMq或者rabbitMq用法<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>4mybatis用法，相关知识<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>5Java常见的集合，用法，Stream流，Optional类的使用<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>6在虚拟机上练习Linux命令，或者直接尝试用来部署项目<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>7vuex的用法，vue2基础框架结构，vue3的用法特性。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>8Java多线程 锁机制 线程安全<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>9Linux基础命令练习<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>10常见的css布局<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"二、css伪类选择器","date":"2024-07-08T14:50:50.000Z","_content":"### css 伪类选择器\n\ncss 伪类选择器是一种用于选择元素的特定状态的方式，常见的伪类选择器包括 `:hover`、`:active`、`:nth-child` 等。以下是一些常用的 css 伪类选择器及其使用示例。\n\n#### 常见的 css 伪类选择器\n\n1. `:hover`：用于选择用户鼠标悬停在其上的元素。\n2. `:active`：用于选择用户激活（比如点击）元素。\n3. `:nth-child(n)`：用于选择属于其父元素的第 n 个子元素，n 可以是关键字（如 odd、even）或公式。\n4. `:first-child`：用于选择属于其父元素的第一个子元素。\n5. `:last-child`：用于选择属于其父元素的最后一个子元素。\n6. `:nth-of-type(n)`：用于选择属于其父元素特定类型的第 n 个子元素。\n7. `:not(selector)`：用于选择非某个选择器的元素。\n\n#### 示例代码\n\n以下是一个使用不同伪类选择器的综合示例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>css 伪类选择器示例</title>\n    <style>\n        .container {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr);\n            gap: 10px;\n            width: 320px;\n            margin: 50px auto;\n        }\n        .box {\n            width: 100px;\n            height: 100px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 24px;\n            color: white;\n        }\n        .box:nth-child(odd) {\n            background-color: #FF6347; /* 番茄色 */\n        }\n        .box:nth-child(even) {\n            background-color: #4682B4; /* 钢蓝色 */\n        }\n        .box:hover {\n            background-color: #FFD700; /* 金色 */\n            color: black;\n        }\n        .box:active {\n            background-color: #6A5ACD; /* 板岩蓝色 */\n        }\n        .box:first-child {\n            border: 5px solid #000; /* 黑色边框 */\n        }\n        .box:last-child {\n            border: 5px solid #fff; /* 白色边框 */\n        }\n        .box:nth-of-type(3) {\n            font-size: 30px;\n        }\n        .box:not(:nth-child(5)) {\n            opacity: 0.8;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box\">1</div>\n        <div class=\"box\">2</div>\n        <div class=\"box\">3</div>\n        <div class=\"box\">4</div>\n        <div class=\"box\">5</div>\n        <div class=\"box\">6</div>\n        <div class=\"box\">7</div>\n        <div class=\"box\">8</div>\n        <div class=\"box\">9</div>\n    </div>\n</body>\n</html>\n```\n\n### 解释\n\n- **奇数格子** (`.box:nth-child(odd)`): 背景色设置为番茄色。\n- **偶数格子** (`.box:nth-child(even)`): 背景色设置为钢蓝色。\n- **悬停效果** (`.box:hover`): 当鼠标悬停在格子上时，背景色变为金色，文字颜色变为黑色。\n- **激活效果** (`.box:active`): 当格子被点击时，背景色变为板岩蓝色。\n- **第一个子元素** (`.box:first-child`): 为第一个格子添加黑色边框。\n- **最后一个子元素** (`.box:last-child`): 为最后一个格子添加白色边框。\n- **特定类型的第 n 个子元素** (`.box:nth-of-type(3)`): 将第三个格子的字体大小设置为30px。\n- **非某个选择器的元素** (`.box:not(:nth-child(5))`): 将除第5个格子以外的所有格子的透明度设置为0.8。","source":"_posts/css伪类选择器.md","raw":"---\ntitle: 二、css伪类选择器\ndate: 2024-07-08 22:50:50\ntags: css\n---\n### css 伪类选择器\n\ncss 伪类选择器是一种用于选择元素的特定状态的方式，常见的伪类选择器包括 `:hover`、`:active`、`:nth-child` 等。以下是一些常用的 css 伪类选择器及其使用示例。\n\n#### 常见的 css 伪类选择器\n\n1. `:hover`：用于选择用户鼠标悬停在其上的元素。\n2. `:active`：用于选择用户激活（比如点击）元素。\n3. `:nth-child(n)`：用于选择属于其父元素的第 n 个子元素，n 可以是关键字（如 odd、even）或公式。\n4. `:first-child`：用于选择属于其父元素的第一个子元素。\n5. `:last-child`：用于选择属于其父元素的最后一个子元素。\n6. `:nth-of-type(n)`：用于选择属于其父元素特定类型的第 n 个子元素。\n7. `:not(selector)`：用于选择非某个选择器的元素。\n\n#### 示例代码\n\n以下是一个使用不同伪类选择器的综合示例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>css 伪类选择器示例</title>\n    <style>\n        .container {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr);\n            gap: 10px;\n            width: 320px;\n            margin: 50px auto;\n        }\n        .box {\n            width: 100px;\n            height: 100px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 24px;\n            color: white;\n        }\n        .box:nth-child(odd) {\n            background-color: #FF6347; /* 番茄色 */\n        }\n        .box:nth-child(even) {\n            background-color: #4682B4; /* 钢蓝色 */\n        }\n        .box:hover {\n            background-color: #FFD700; /* 金色 */\n            color: black;\n        }\n        .box:active {\n            background-color: #6A5ACD; /* 板岩蓝色 */\n        }\n        .box:first-child {\n            border: 5px solid #000; /* 黑色边框 */\n        }\n        .box:last-child {\n            border: 5px solid #fff; /* 白色边框 */\n        }\n        .box:nth-of-type(3) {\n            font-size: 30px;\n        }\n        .box:not(:nth-child(5)) {\n            opacity: 0.8;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box\">1</div>\n        <div class=\"box\">2</div>\n        <div class=\"box\">3</div>\n        <div class=\"box\">4</div>\n        <div class=\"box\">5</div>\n        <div class=\"box\">6</div>\n        <div class=\"box\">7</div>\n        <div class=\"box\">8</div>\n        <div class=\"box\">9</div>\n    </div>\n</body>\n</html>\n```\n\n### 解释\n\n- **奇数格子** (`.box:nth-child(odd)`): 背景色设置为番茄色。\n- **偶数格子** (`.box:nth-child(even)`): 背景色设置为钢蓝色。\n- **悬停效果** (`.box:hover`): 当鼠标悬停在格子上时，背景色变为金色，文字颜色变为黑色。\n- **激活效果** (`.box:active`): 当格子被点击时，背景色变为板岩蓝色。\n- **第一个子元素** (`.box:first-child`): 为第一个格子添加黑色边框。\n- **最后一个子元素** (`.box:last-child`): 为最后一个格子添加白色边框。\n- **特定类型的第 n 个子元素** (`.box:nth-of-type(3)`): 将第三个格子的字体大小设置为30px。\n- **非某个选择器的元素** (`.box:not(:nth-child(5))`): 将除第5个格子以外的所有格子的透明度设置为0.8。","slug":"css伪类选择器","published":1,"updated":"2024-07-26T15:44:53.872Z","_id":"clyg04c7j0000wku41bb26vei","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"css-伪类选择器\"><a href=\"#css-伪类选择器\" class=\"headerlink\" title=\"css 伪类选择器\"></a>css 伪类选择器</h3><p>css 伪类选择器是一种用于选择元素的特定状态的方式，常见的伪类选择器包括 <code>:hover</code>、<code>:active</code>、<code>:nth-child</code> 等。以下是一些常用的 css 伪类选择器及其使用示例。</p>\n<h4 id=\"常见的-css-伪类选择器\"><a href=\"#常见的-css-伪类选择器\" class=\"headerlink\" title=\"常见的 css 伪类选择器\"></a>常见的 css 伪类选择器</h4><ol>\n<li><code>:hover</code>：用于选择用户鼠标悬停在其上的元素。</li>\n<li><code>:active</code>：用于选择用户激活（比如点击）元素。</li>\n<li><code>:nth-child(n)</code>：用于选择属于其父元素的第 n 个子元素，n 可以是关键字（如 odd、even）或公式。</li>\n<li><code>:first-child</code>：用于选择属于其父元素的第一个子元素。</li>\n<li><code>:last-child</code>：用于选择属于其父元素的最后一个子元素。</li>\n<li><code>:nth-of-type(n)</code>：用于选择属于其父元素特定类型的第 n 个子元素。</li>\n<li><code>:not(selector)</code>：用于选择非某个选择器的元素。</li>\n</ol>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><p>以下是一个使用不同伪类选择器的综合示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css 伪类选择器示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: grid;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">3</span>, <span class=\"number\">1</span>fr);</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">gap</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">320px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">justify-content</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">align-items</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:nth-child</span>(odd) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#FF6347</span>; <span class=\"comment\">/* 番茄色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:nth-child</span>(even) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#4682B4</span>; <span class=\"comment\">/* 钢蓝色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:hover</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFD700</span>; <span class=\"comment\">/* 金色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: black;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:active</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#6A5ACD</span>; <span class=\"comment\">/* 板岩蓝色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#000</span>; <span class=\"comment\">/* 黑色边框 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#fff</span>; <span class=\"comment\">/* 白色边框 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">3</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">5</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">opacity</span>: <span class=\"number\">0.8</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li><strong>奇数格子</strong> (<code>.box:nth-child(odd)</code>): 背景色设置为番茄色。</li>\n<li><strong>偶数格子</strong> (<code>.box:nth-child(even)</code>): 背景色设置为钢蓝色。</li>\n<li><strong>悬停效果</strong> (<code>.box:hover</code>): 当鼠标悬停在格子上时，背景色变为金色，文字颜色变为黑色。</li>\n<li><strong>激活效果</strong> (<code>.box:active</code>): 当格子被点击时，背景色变为板岩蓝色。</li>\n<li><strong>第一个子元素</strong> (<code>.box:first-child</code>): 为第一个格子添加黑色边框。</li>\n<li><strong>最后一个子元素</strong> (<code>.box:last-child</code>): 为最后一个格子添加白色边框。</li>\n<li><strong>特定类型的第 n 个子元素</strong> (<code>.box:nth-of-type(3)</code>): 将第三个格子的字体大小设置为30px。</li>\n<li><strong>非某个选择器的元素</strong> (<code>.box:not(:nth-child(5))</code>): 将除第5个格子以外的所有格子的透明度设置为0.8。</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"css-伪类选择器\"><a href=\"#css-伪类选择器\" class=\"headerlink\" title=\"css 伪类选择器\"></a>css 伪类选择器</h3><p>css 伪类选择器是一种用于选择元素的特定状态的方式，常见的伪类选择器包括 <code>:hover</code>、<code>:active</code>、<code>:nth-child</code> 等。以下是一些常用的 css 伪类选择器及其使用示例。</p>\n<h4 id=\"常见的-css-伪类选择器\"><a href=\"#常见的-css-伪类选择器\" class=\"headerlink\" title=\"常见的 css 伪类选择器\"></a>常见的 css 伪类选择器</h4><ol>\n<li><code>:hover</code>：用于选择用户鼠标悬停在其上的元素。</li>\n<li><code>:active</code>：用于选择用户激活（比如点击）元素。</li>\n<li><code>:nth-child(n)</code>：用于选择属于其父元素的第 n 个子元素，n 可以是关键字（如 odd、even）或公式。</li>\n<li><code>:first-child</code>：用于选择属于其父元素的第一个子元素。</li>\n<li><code>:last-child</code>：用于选择属于其父元素的最后一个子元素。</li>\n<li><code>:nth-of-type(n)</code>：用于选择属于其父元素特定类型的第 n 个子元素。</li>\n<li><code>:not(selector)</code>：用于选择非某个选择器的元素。</li>\n</ol>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><p>以下是一个使用不同伪类选择器的综合示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>css 伪类选择器示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: grid;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">3</span>, <span class=\"number\">1</span>fr);</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">gap</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">320px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">justify-content</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">align-items</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:nth-child</span>(odd) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#FF6347</span>; <span class=\"comment\">/* 番茄色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:nth-child</span>(even) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#4682B4</span>; <span class=\"comment\">/* 钢蓝色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:hover</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFD700</span>; <span class=\"comment\">/* 金色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: black;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:active</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#6A5ACD</span>; <span class=\"comment\">/* 板岩蓝色 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#000</span>; <span class=\"comment\">/* 黑色边框 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#fff</span>; <span class=\"comment\">/* 白色边框 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">3</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">5</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">opacity</span>: <span class=\"number\">0.8</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li><strong>奇数格子</strong> (<code>.box:nth-child(odd)</code>): 背景色设置为番茄色。</li>\n<li><strong>偶数格子</strong> (<code>.box:nth-child(even)</code>): 背景色设置为钢蓝色。</li>\n<li><strong>悬停效果</strong> (<code>.box:hover</code>): 当鼠标悬停在格子上时，背景色变为金色，文字颜色变为黑色。</li>\n<li><strong>激活效果</strong> (<code>.box:active</code>): 当格子被点击时，背景色变为板岩蓝色。</li>\n<li><strong>第一个子元素</strong> (<code>.box:first-child</code>): 为第一个格子添加黑色边框。</li>\n<li><strong>最后一个子元素</strong> (<code>.box:last-child</code>): 为最后一个格子添加白色边框。</li>\n<li><strong>特定类型的第 n 个子元素</strong> (<code>.box:nth-of-type(3)</code>): 将第三个格子的字体大小设置为30px。</li>\n<li><strong>非某个选择器的元素</strong> (<code>.box:not(:nth-child(5))</code>): 将除第5个格子以外的所有格子的透明度设置为0.8。</li>\n</ul>\n"},{"title":"三、Mybatis-Plus常见用法-Mapper常用的基础方法","date":"2024-07-24T14:32:50.000Z","_content":"### Mybatis-Plus常见用法-Mapper常用的基础方法\n\n#### 3Crud相关操作-Mapper\n\n在 MyBatis-Plus 中，`BaseMapper` 是一个通用的 Mapper 接口，它提供了一系列基础的 CRUD 方法，帮助开发者简化对数据库的操作。通过继承 `BaseMapper`，我们可以直接使用这些方法，而无需编写复杂的 SQL 语句。以下是 `BaseMapper` 中常用的方法：\n\n#### 插入操作\n\n- **insert(T entity)**：插入一条记录。\n\n  ```java\n  int insert(User user);\n  ```\n\n#### 删除操作\n\n- **deleteById(Serializable id)**：根据 ID 删除一条记录。\n\n  ```java\n  int deleteById(Long id);\n  ```\n  \n- **deleteByMap(Map<String, Object> columnMap)**：根据 columnMap 条件删除记录。\n\n  ```java\n  int deleteByMap(Map<String, Object> columnMap);\n  ```\n  \n- **delete(Wrapper<T> wrapper)**：根据条件删除记录。\n\n  ```java\n  int delete(LambdaQueryWrapper<User> wrapper);\n  ```\n  \n- **deleteBatchIds(Collection<? extends Serializable> idList)**：批量删除记录。\n\n  ```java\n  int deleteBatchIds(List<Long> ids);\n  ```\n\n#### 更新操作\n\n- **updateById(T entity)**：根据 ID 更新一条记录。\n\n  ```java\n  int updateById(User user);\n  ```\n  \n- **update(T entity, Wrapper<T> updateWrapper)**：根据条件更新记录。\n\n  ```java\n  int update(User user, LambdaUpdateWrapper<User> updateWrapper);\n  ```\n\n#### 查询操作\n\n- **selectById(Serializable id)**：根据 ID 查询一条记录。\n\n  ```java\n  User selectById(Long id);\n  ```\n  \n- **selectBatchIds(Collection<? extends Serializable> idList)**：根据 ID 集合批量查询记录。\n\n  ```java\n  List<User> selectBatchIds(List<Long> ids);\n  ```\n  \n- **selectByMap(Map<String, Object> columnMap)**：根据 columnMap 条件查询记录。\n\n  ```java\n  List<User> selectByMap(Map<String, Object> columnMap);\n  ```\n  \n- **selectOne(Wrapper<T> queryWrapper)**：根据条件查询一条记录。\n\n  ```java\n  User selectOne(LambdaQueryWrapper<User> queryWrapper);\n  ```\n\n- **selectList(Wrapper<T> queryWrapper)**：根据条件查询多条记录。\n\n  ```java\n  List<User> selectList(LambdaQueryWrapper<User> queryWrapper);\n  ```\n\n- **selectPage(Page<T> page, Wrapper<T> queryWrapper)**：根据条件分页查询多条记录。\n\n  ```java\n  IPage<User> selectPage(Page<User> page, LambdaQueryWrapper<User> queryWrapper);\n  ```\n\n- **selectCount(Wrapper<T> queryWrapper)**：根据条件查询记录数量。\n\n  ```java\n  int selectCount(LambdaQueryWrapper<User> queryWrapper);\n  ```\n\n### 使用示例\n\n以下是一个 `UserMapper` 接口的示例：\n\n```java\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n}\n```\n\n在这个示例中，`UserMapper` 继承了 `BaseMapper<User>`，因此可以直接使用 `BaseMapper` 提供的各种 CRUD 方法，而无需在 `UserMapper` 中显式定义这些方法。\n\n### 使用示例\n\n以下是一个 `UserService` 类，通过 `UserMapper` 使用 `BaseMapper` 提供的 CRUD 方法：\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class UserService {\n    @Autowired\n    private UserMapper userMapper;\n\n    public boolean saveUser(User user) {\n        return userMapper.insert(user) > 0;\n    }\n\n    public boolean removeUserById(Long id) {\n        return userMapper.deleteById(id) > 0;\n    }\n\n    public boolean updateUser(User user) {\n        return userMapper.updateById(user) > 0;\n    }\n\n    public User getUserById(Long id) {\n        return userMapper.selectById(id);\n    }\n\n    public List<User> getAllUsers() {\n        return userMapper.selectList(null);\n    }\n}\n```","source":"_posts/Mybatis-Plus常见用法-Mapper常用的基础方法.md","raw":"---\ntitle: 三、Mybatis-Plus常见用法-Mapper常用的基础方法\ndate: 2024-07-24 22:32:50\ntags: mybatisplus\n---\n### Mybatis-Plus常见用法-Mapper常用的基础方法\n\n#### 3Crud相关操作-Mapper\n\n在 MyBatis-Plus 中，`BaseMapper` 是一个通用的 Mapper 接口，它提供了一系列基础的 CRUD 方法，帮助开发者简化对数据库的操作。通过继承 `BaseMapper`，我们可以直接使用这些方法，而无需编写复杂的 SQL 语句。以下是 `BaseMapper` 中常用的方法：\n\n#### 插入操作\n\n- **insert(T entity)**：插入一条记录。\n\n  ```java\n  int insert(User user);\n  ```\n\n#### 删除操作\n\n- **deleteById(Serializable id)**：根据 ID 删除一条记录。\n\n  ```java\n  int deleteById(Long id);\n  ```\n  \n- **deleteByMap(Map<String, Object> columnMap)**：根据 columnMap 条件删除记录。\n\n  ```java\n  int deleteByMap(Map<String, Object> columnMap);\n  ```\n  \n- **delete(Wrapper<T> wrapper)**：根据条件删除记录。\n\n  ```java\n  int delete(LambdaQueryWrapper<User> wrapper);\n  ```\n  \n- **deleteBatchIds(Collection<? extends Serializable> idList)**：批量删除记录。\n\n  ```java\n  int deleteBatchIds(List<Long> ids);\n  ```\n\n#### 更新操作\n\n- **updateById(T entity)**：根据 ID 更新一条记录。\n\n  ```java\n  int updateById(User user);\n  ```\n  \n- **update(T entity, Wrapper<T> updateWrapper)**：根据条件更新记录。\n\n  ```java\n  int update(User user, LambdaUpdateWrapper<User> updateWrapper);\n  ```\n\n#### 查询操作\n\n- **selectById(Serializable id)**：根据 ID 查询一条记录。\n\n  ```java\n  User selectById(Long id);\n  ```\n  \n- **selectBatchIds(Collection<? extends Serializable> idList)**：根据 ID 集合批量查询记录。\n\n  ```java\n  List<User> selectBatchIds(List<Long> ids);\n  ```\n  \n- **selectByMap(Map<String, Object> columnMap)**：根据 columnMap 条件查询记录。\n\n  ```java\n  List<User> selectByMap(Map<String, Object> columnMap);\n  ```\n  \n- **selectOne(Wrapper<T> queryWrapper)**：根据条件查询一条记录。\n\n  ```java\n  User selectOne(LambdaQueryWrapper<User> queryWrapper);\n  ```\n\n- **selectList(Wrapper<T> queryWrapper)**：根据条件查询多条记录。\n\n  ```java\n  List<User> selectList(LambdaQueryWrapper<User> queryWrapper);\n  ```\n\n- **selectPage(Page<T> page, Wrapper<T> queryWrapper)**：根据条件分页查询多条记录。\n\n  ```java\n  IPage<User> selectPage(Page<User> page, LambdaQueryWrapper<User> queryWrapper);\n  ```\n\n- **selectCount(Wrapper<T> queryWrapper)**：根据条件查询记录数量。\n\n  ```java\n  int selectCount(LambdaQueryWrapper<User> queryWrapper);\n  ```\n\n### 使用示例\n\n以下是一个 `UserMapper` 接口的示例：\n\n```java\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n}\n```\n\n在这个示例中，`UserMapper` 继承了 `BaseMapper<User>`，因此可以直接使用 `BaseMapper` 提供的各种 CRUD 方法，而无需在 `UserMapper` 中显式定义这些方法。\n\n### 使用示例\n\n以下是一个 `UserService` 类，通过 `UserMapper` 使用 `BaseMapper` 提供的 CRUD 方法：\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class UserService {\n    @Autowired\n    private UserMapper userMapper;\n\n    public boolean saveUser(User user) {\n        return userMapper.insert(user) > 0;\n    }\n\n    public boolean removeUserById(Long id) {\n        return userMapper.deleteById(id) > 0;\n    }\n\n    public boolean updateUser(User user) {\n        return userMapper.updateById(user) > 0;\n    }\n\n    public User getUserById(Long id) {\n        return userMapper.selectById(id);\n    }\n\n    public List<User> getAllUsers() {\n        return userMapper.selectList(null);\n    }\n}\n```","slug":"Mybatis-Plus常见用法-Mapper常用的基础方法","published":1,"updated":"2024-07-26T15:45:22.208Z","comments":1,"layout":"post","photos":[],"_id":"clz2vkaxk0000scu4ej9dgr1a","content":"<h3 id=\"Mybatis-Plus常见用法-Mapper常用的基础方法\"><a href=\"#Mybatis-Plus常见用法-Mapper常用的基础方法\" class=\"headerlink\" title=\"Mybatis-Plus常见用法-Mapper常用的基础方法\"></a>Mybatis-Plus常见用法-Mapper常用的基础方法</h3><h4 id=\"3Crud相关操作-Mapper\"><a href=\"#3Crud相关操作-Mapper\" class=\"headerlink\" title=\"3Crud相关操作-Mapper\"></a>3Crud相关操作-Mapper</h4><p>在 MyBatis-Plus 中，<code>BaseMapper</code> 是一个通用的 Mapper 接口，它提供了一系列基础的 CRUD 方法，帮助开发者简化对数据库的操作。通过继承 <code>BaseMapper</code>，我们可以直接使用这些方法，而无需编写复杂的 SQL 语句。以下是 <code>BaseMapper</code> 中常用的方法：</p>\n<h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><ul>\n<li><p>**insert(T entity)**：插入一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">insert</span><span class=\"params\">(User user)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><ul>\n<li><p>**deleteById(Serializable id)**：根据 ID 删除一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">deleteById</span><span class=\"params\">(Long id)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**deleteByMap(Map&lt;String, Object&gt; columnMap)**：根据 columnMap 条件删除记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">deleteByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**delete(Wrapper<T> wrapper)**：根据条件删除记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">delete</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; wrapper)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**deleteBatchIds(Collection&lt;? extends Serializable&gt; idList)**：批量删除记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">deleteBatchIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h4><ul>\n<li><p>**updateById(T entity)**：根据 ID 更新一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">updateById</span><span class=\"params\">(User user)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**update(T entity, Wrapper<T> updateWrapper)**：根据条件更新记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">update</span><span class=\"params\">(User user, LambdaUpdateWrapper&lt;User&gt; updateWrapper)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h4><ul>\n<li><p>**selectById(Serializable id)**：根据 ID 查询一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User <span class=\"title function_\">selectById</span><span class=\"params\">(Long id)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectBatchIds(Collection&lt;? extends Serializable&gt; idList)**：根据 ID 集合批量查询记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">selectBatchIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectByMap(Map&lt;String, Object&gt; columnMap)**：根据 columnMap 条件查询记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">selectByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectOne(Wrapper<T> queryWrapper)**：根据条件查询一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User <span class=\"title function_\">selectOne</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectList(Wrapper<T> queryWrapper)**：根据条件查询多条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">selectList</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectPage(Page<T> page, Wrapper<T> queryWrapper)**：根据条件分页查询多条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPage&lt;User&gt; <span class=\"title function_\">selectPage</span><span class=\"params\">(Page&lt;User&gt; page, LambdaQueryWrapper&lt;User&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectCount(Wrapper<T> queryWrapper)**：根据条件查询记录数量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">selectCount</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><p>以下是一个 <code>UserMapper</code> 接口的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>UserMapper</code> 继承了 <code>BaseMapper&lt;User&gt;</code>，因此可以直接使用 <code>BaseMapper</code> 提供的各种 CRUD 方法，而无需在 <code>UserMapper</code> 中显式定义这些方法。</p>\n<h3 id=\"使用示例-1\"><a href=\"#使用示例-1\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><p>以下是一个 <code>UserService</code> 类，通过 <code>UserMapper</code> 使用 <code>BaseMapper</code> 提供的 CRUD 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.insert(user) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.deleteById(id) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.updateById(user) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.selectById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getAllUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.selectList(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"Mybatis-Plus常见用法-Mapper常用的基础方法\"><a href=\"#Mybatis-Plus常见用法-Mapper常用的基础方法\" class=\"headerlink\" title=\"Mybatis-Plus常见用法-Mapper常用的基础方法\"></a>Mybatis-Plus常见用法-Mapper常用的基础方法</h3><h4 id=\"3Crud相关操作-Mapper\"><a href=\"#3Crud相关操作-Mapper\" class=\"headerlink\" title=\"3Crud相关操作-Mapper\"></a>3Crud相关操作-Mapper</h4><p>在 MyBatis-Plus 中，<code>BaseMapper</code> 是一个通用的 Mapper 接口，它提供了一系列基础的 CRUD 方法，帮助开发者简化对数据库的操作。通过继承 <code>BaseMapper</code>，我们可以直接使用这些方法，而无需编写复杂的 SQL 语句。以下是 <code>BaseMapper</code> 中常用的方法：</p>\n<h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><ul>\n<li><p>**insert(T entity)**：插入一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">insert</span><span class=\"params\">(User user)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><ul>\n<li><p>**deleteById(Serializable id)**：根据 ID 删除一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">deleteById</span><span class=\"params\">(Long id)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**deleteByMap(Map&lt;String, Object&gt; columnMap)**：根据 columnMap 条件删除记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">deleteByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**delete(Wrapper<T> wrapper)**：根据条件删除记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">delete</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; wrapper)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**deleteBatchIds(Collection&lt;? extends Serializable&gt; idList)**：批量删除记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">deleteBatchIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h4><ul>\n<li><p>**updateById(T entity)**：根据 ID 更新一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">updateById</span><span class=\"params\">(User user)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**update(T entity, Wrapper<T> updateWrapper)**：根据条件更新记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">update</span><span class=\"params\">(User user, LambdaUpdateWrapper&lt;User&gt; updateWrapper)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h4><ul>\n<li><p>**selectById(Serializable id)**：根据 ID 查询一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User <span class=\"title function_\">selectById</span><span class=\"params\">(Long id)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectBatchIds(Collection&lt;? extends Serializable&gt; idList)**：根据 ID 集合批量查询记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">selectBatchIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectByMap(Map&lt;String, Object&gt; columnMap)**：根据 columnMap 条件查询记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">selectByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectOne(Wrapper<T> queryWrapper)**：根据条件查询一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User <span class=\"title function_\">selectOne</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectList(Wrapper<T> queryWrapper)**：根据条件查询多条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">selectList</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectPage(Page<T> page, Wrapper<T> queryWrapper)**：根据条件分页查询多条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPage&lt;User&gt; <span class=\"title function_\">selectPage</span><span class=\"params\">(Page&lt;User&gt; page, LambdaQueryWrapper&lt;User&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**selectCount(Wrapper<T> queryWrapper)**：根据条件查询记录数量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">selectCount</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><p>以下是一个 <code>UserMapper</code> 接口的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>UserMapper</code> 继承了 <code>BaseMapper&lt;User&gt;</code>，因此可以直接使用 <code>BaseMapper</code> 提供的各种 CRUD 方法，而无需在 <code>UserMapper</code> 中显式定义这些方法。</p>\n<h3 id=\"使用示例-1\"><a href=\"#使用示例-1\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><p>以下是一个 <code>UserService</code> 类，通过 <code>UserMapper</code> 使用 <code>BaseMapper</code> 提供的 CRUD 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.insert(user) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.deleteById(id) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.updateById(user) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.selectById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getAllUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.selectList(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"二、Mybatis-Plus常见用法-Service_impl常用的基础方法","date":"2024-07-24T14:32:50.000Z","_content":"### Mybatis-Plus常见用法-Service_impl常用的基础方法\n\n#### 2Crud相关操作\n\n在 MyBatis-Plus 中，`IService` 和 `ServiceImpl` 提供了一些常用的 CRUD 方法，这些方法大大简化了对数据库的基本操作。下面是 `IService` 中常用的 CRUD 方法：\n\n### 1. 插入操作\n\n- **insert(T entity)**：插入一条记录。\n\n  ```java\n  public boolean saveUser(User user) {\n      return userService.save(user);\n  }\n  ```\n\n- **saveBatch(Collection<T> entityList)**：批量插入记录。\n\n  ```java\n  public boolean saveUsers(List<User> users) {\n      return userService.saveBatch(users);\n  }\n  ```\n\n### 2. 删除操作\n\n- **removeById(Serializable id)**：根据 ID 删除一条记录（逻辑删除）。\n\n  ```java\n  public boolean removeUserById(Long id) {\n      return userService.removeById(id);\n  }\n  ```\n\n- **removeByMap(Map<String, Object> columnMap)**：根据 columnMap 条件删除记录。\n\n  ```java\n  public boolean removeUsersByMap(Map<String, Object> columnMap) {\n      return userService.removeByMap(columnMap);\n  }\n  ```\n\n- **remove(Wrapper<T> wrapper)**：根据条件删除记录。\n\n  ```java\n  public boolean removeUsers(LambdaQueryWrapper<User> wrapper) {\n      return userService.remove(wrapper);\n  }\n  ```\n\n- **removeBatchByIds(Collection<? extends Serializable> idList)**：批量删除记录（逻辑删除）。\n\n  ```java\n  public boolean removeUsersByIds(List<Long> ids) {\n      return userService.removeBatchByIds(ids);\n  }\n  ```\n\n### 3. 更新操作\n\n- **updateById(T entity)**：根据 ID 更新一条记录。\n\n  ```java\n  public boolean updateUser(User user) {\n      return userService.updateById(user);\n  }\n  ```\n\n- **update(T entity, Wrapper<T> updateWrapper)**：根据 whereWrapper 条件更新记录。\n\n  ```java\n  public boolean updateUser(User user, LambdaUpdateWrapper<User> updateWrapper) {\n      return userService.update(user, updateWrapper);\n  }\n  ```\n\n- **updateBatchById(Collection<T> entityList)**：批量更新记录。\n\n  ```java\n  public boolean updateUsers(List<User> users) {\n      return userService.updateBatchById(users);\n  }\n  ```\n\n### 4. 查询操作\n\n- **getById(Serializable id)**：根据 ID 查询一条记录。\n\n  ```java\n  public User getUserById(Long id) {\n      return userService.getById(id);\n  }\n  ```\n\n- **listByIds(Collection<? extends Serializable> idList)**：根据 ID 集合批量查询记录。\n\n  ```java\n  public List<User> getUsersByIds(List<Long> ids) {\n      return userService.listByIds(ids);\n  }\n  ```\n\n- **listByMap(Map<String, Object> columnMap)**：根据 columnMap 条件查询记录。\n\n  ```java\n  public List<User> getUsersByMap(Map<String, Object> columnMap) {\n      return userService.listByMap(columnMap);\n  }\n  ```\n\n- **getOne(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询一条记录。\n\n  ```java\n  public User getOneUser(LambdaQueryWrapper<User> queryWrapper) {\n      return userService.getOne(queryWrapper);\n  }\n  ```\n\n- **list(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询多条记录。\n\n  ```java\n  public List<User> getUsers(LambdaQueryWrapper<User> queryWrapper) {\n      return userService.list(queryWrapper);\n  }\n  ```\n\n- **page(Page<T> page, Wrapper<T> queryWrapper)**：根据 wrapper 条件分页查询多条记录。\n\n  ```java\n  public IPage<User> getUsersPage(Page<User> page, LambdaQueryWrapper<User> queryWrapper) {\n      return userService.page(page, queryWrapper);\n  }\n  ```\n\n- **count(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询记录数量。\n\n  ```java\n  public int countUsers(LambdaQueryWrapper<User> queryWrapper) {\n      return userService.count(queryWrapper);\n  }\n  ```\n\n- **list()**：查询所有记录。\n\n  ```java\n  public List<User> getAllUsers() {\n      return userService.list();\n  }\n  ```\n\n- **page(Page<T> page)**：分页查询所有记录。\n\n  ```java\n  public IPage<User> getUsersPage(Page<User> page) {\n      return userService.page(page);\n  }\n  ```\n\n### 示例代码\n\n以下是一个完整的 `UserService` 实现示例：\n\n```java\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\nimport java.util.Map;\n\n@Service\npublic class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService {\n    @Override\n    public boolean saveUser(User user) {\n        return save(user);\n    }\n\n    @Override\n    public boolean saveUsers(List<User> users) {\n        return saveBatch(users);\n    }\n\n    @Override\n    public boolean removeUserById(Long id) {\n        return removeById(id);\n    }\n\n    @Override\n    public boolean removeUsersByMap(Map<String, Object> columnMap) {\n        return removeByMap(columnMap);\n    }\n\n    @Override\n    public boolean removeUsers(LambdaQueryWrapper<User> wrapper) {\n        return remove(wrapper);\n    }\n\n    @Override\n    public boolean removeUsersByIds(List<Long> ids) {\n        return removeBatchByIds(ids);\n    }\n\n    @Override\n    public boolean updateUser(User user) {\n        return updateById(user);\n    }\n\n    @Override\n    public boolean updateUser(User user, LambdaUpdateWrapper<User> updateWrapper) {\n        return update(user, updateWrapper);\n    }\n\n    @Override\n    public boolean updateUsers(List<User> users) {\n        return updateBatchById(users);\n    }\n\n    @Override\n    public User getUserById(Long id) {\n        return getById(id);\n    }\n\n    @Override\n    public List<User> getUsersByIds(List<Long> ids) {\n        return listByIds(ids);\n    }\n\n    @Override\n    public List<User> getUsersByMap(Map<String, Object> columnMap) {\n        return listByMap(columnMap);\n    }\n\n    @Override\n    public User getOneUser(LambdaQueryWrapper<User> queryWrapper) {\n        return getOne(queryWrapper);\n    }\n\n    @Override\n    public List<User> getUsers(LambdaQueryWrapper<User> queryWrapper) {\n        return list(queryWrapper);\n    }\n\n    @Override\n    public IPage<User> getUsersPage(Page<User> page, LambdaQueryWrapper<User> queryWrapper) {\n        return page(page, queryWrapper);\n    }\n\n    @Override\n    public int countUsers(LambdaQueryWrapper<User> queryWrapper) {\n        return count(queryWrapper);\n    }\n\n    @Override\n    public List<User> getAllUsers() {\n        return list();\n    }\n\n    @Override\n    public IPage<User> getUsersPage(Page<User> page) {\n        return page(page);\n    }\n}\n```","source":"_posts/Mybatis-Plus常见用法-Service_impl常用的基础方法.md","raw":"---\ntitle: 二、Mybatis-Plus常见用法-Service_impl常用的基础方法\ndate: 2024-07-24 22:32:50\ntags: mybatisplus\n---\n### Mybatis-Plus常见用法-Service_impl常用的基础方法\n\n#### 2Crud相关操作\n\n在 MyBatis-Plus 中，`IService` 和 `ServiceImpl` 提供了一些常用的 CRUD 方法，这些方法大大简化了对数据库的基本操作。下面是 `IService` 中常用的 CRUD 方法：\n\n### 1. 插入操作\n\n- **insert(T entity)**：插入一条记录。\n\n  ```java\n  public boolean saveUser(User user) {\n      return userService.save(user);\n  }\n  ```\n\n- **saveBatch(Collection<T> entityList)**：批量插入记录。\n\n  ```java\n  public boolean saveUsers(List<User> users) {\n      return userService.saveBatch(users);\n  }\n  ```\n\n### 2. 删除操作\n\n- **removeById(Serializable id)**：根据 ID 删除一条记录（逻辑删除）。\n\n  ```java\n  public boolean removeUserById(Long id) {\n      return userService.removeById(id);\n  }\n  ```\n\n- **removeByMap(Map<String, Object> columnMap)**：根据 columnMap 条件删除记录。\n\n  ```java\n  public boolean removeUsersByMap(Map<String, Object> columnMap) {\n      return userService.removeByMap(columnMap);\n  }\n  ```\n\n- **remove(Wrapper<T> wrapper)**：根据条件删除记录。\n\n  ```java\n  public boolean removeUsers(LambdaQueryWrapper<User> wrapper) {\n      return userService.remove(wrapper);\n  }\n  ```\n\n- **removeBatchByIds(Collection<? extends Serializable> idList)**：批量删除记录（逻辑删除）。\n\n  ```java\n  public boolean removeUsersByIds(List<Long> ids) {\n      return userService.removeBatchByIds(ids);\n  }\n  ```\n\n### 3. 更新操作\n\n- **updateById(T entity)**：根据 ID 更新一条记录。\n\n  ```java\n  public boolean updateUser(User user) {\n      return userService.updateById(user);\n  }\n  ```\n\n- **update(T entity, Wrapper<T> updateWrapper)**：根据 whereWrapper 条件更新记录。\n\n  ```java\n  public boolean updateUser(User user, LambdaUpdateWrapper<User> updateWrapper) {\n      return userService.update(user, updateWrapper);\n  }\n  ```\n\n- **updateBatchById(Collection<T> entityList)**：批量更新记录。\n\n  ```java\n  public boolean updateUsers(List<User> users) {\n      return userService.updateBatchById(users);\n  }\n  ```\n\n### 4. 查询操作\n\n- **getById(Serializable id)**：根据 ID 查询一条记录。\n\n  ```java\n  public User getUserById(Long id) {\n      return userService.getById(id);\n  }\n  ```\n\n- **listByIds(Collection<? extends Serializable> idList)**：根据 ID 集合批量查询记录。\n\n  ```java\n  public List<User> getUsersByIds(List<Long> ids) {\n      return userService.listByIds(ids);\n  }\n  ```\n\n- **listByMap(Map<String, Object> columnMap)**：根据 columnMap 条件查询记录。\n\n  ```java\n  public List<User> getUsersByMap(Map<String, Object> columnMap) {\n      return userService.listByMap(columnMap);\n  }\n  ```\n\n- **getOne(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询一条记录。\n\n  ```java\n  public User getOneUser(LambdaQueryWrapper<User> queryWrapper) {\n      return userService.getOne(queryWrapper);\n  }\n  ```\n\n- **list(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询多条记录。\n\n  ```java\n  public List<User> getUsers(LambdaQueryWrapper<User> queryWrapper) {\n      return userService.list(queryWrapper);\n  }\n  ```\n\n- **page(Page<T> page, Wrapper<T> queryWrapper)**：根据 wrapper 条件分页查询多条记录。\n\n  ```java\n  public IPage<User> getUsersPage(Page<User> page, LambdaQueryWrapper<User> queryWrapper) {\n      return userService.page(page, queryWrapper);\n  }\n  ```\n\n- **count(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询记录数量。\n\n  ```java\n  public int countUsers(LambdaQueryWrapper<User> queryWrapper) {\n      return userService.count(queryWrapper);\n  }\n  ```\n\n- **list()**：查询所有记录。\n\n  ```java\n  public List<User> getAllUsers() {\n      return userService.list();\n  }\n  ```\n\n- **page(Page<T> page)**：分页查询所有记录。\n\n  ```java\n  public IPage<User> getUsersPage(Page<User> page) {\n      return userService.page(page);\n  }\n  ```\n\n### 示例代码\n\n以下是一个完整的 `UserService` 实现示例：\n\n```java\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\nimport java.util.Map;\n\n@Service\npublic class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService {\n    @Override\n    public boolean saveUser(User user) {\n        return save(user);\n    }\n\n    @Override\n    public boolean saveUsers(List<User> users) {\n        return saveBatch(users);\n    }\n\n    @Override\n    public boolean removeUserById(Long id) {\n        return removeById(id);\n    }\n\n    @Override\n    public boolean removeUsersByMap(Map<String, Object> columnMap) {\n        return removeByMap(columnMap);\n    }\n\n    @Override\n    public boolean removeUsers(LambdaQueryWrapper<User> wrapper) {\n        return remove(wrapper);\n    }\n\n    @Override\n    public boolean removeUsersByIds(List<Long> ids) {\n        return removeBatchByIds(ids);\n    }\n\n    @Override\n    public boolean updateUser(User user) {\n        return updateById(user);\n    }\n\n    @Override\n    public boolean updateUser(User user, LambdaUpdateWrapper<User> updateWrapper) {\n        return update(user, updateWrapper);\n    }\n\n    @Override\n    public boolean updateUsers(List<User> users) {\n        return updateBatchById(users);\n    }\n\n    @Override\n    public User getUserById(Long id) {\n        return getById(id);\n    }\n\n    @Override\n    public List<User> getUsersByIds(List<Long> ids) {\n        return listByIds(ids);\n    }\n\n    @Override\n    public List<User> getUsersByMap(Map<String, Object> columnMap) {\n        return listByMap(columnMap);\n    }\n\n    @Override\n    public User getOneUser(LambdaQueryWrapper<User> queryWrapper) {\n        return getOne(queryWrapper);\n    }\n\n    @Override\n    public List<User> getUsers(LambdaQueryWrapper<User> queryWrapper) {\n        return list(queryWrapper);\n    }\n\n    @Override\n    public IPage<User> getUsersPage(Page<User> page, LambdaQueryWrapper<User> queryWrapper) {\n        return page(page, queryWrapper);\n    }\n\n    @Override\n    public int countUsers(LambdaQueryWrapper<User> queryWrapper) {\n        return count(queryWrapper);\n    }\n\n    @Override\n    public List<User> getAllUsers() {\n        return list();\n    }\n\n    @Override\n    public IPage<User> getUsersPage(Page<User> page) {\n        return page(page);\n    }\n}\n```","slug":"Mybatis-Plus常见用法-Service_impl常用的基础方法","published":1,"updated":"2024-07-26T15:45:15.921Z","comments":1,"layout":"post","photos":[],"_id":"clz2vkaxl0001scu43d00c2jl","content":"<h3 id=\"Mybatis-Plus常见用法-Service-impl常用的基础方法\"><a href=\"#Mybatis-Plus常见用法-Service-impl常用的基础方法\" class=\"headerlink\" title=\"Mybatis-Plus常见用法-Service_impl常用的基础方法\"></a>Mybatis-Plus常见用法-Service_impl常用的基础方法</h3><h4 id=\"2Crud相关操作\"><a href=\"#2Crud相关操作\" class=\"headerlink\" title=\"2Crud相关操作\"></a>2Crud相关操作</h4><p>在 MyBatis-Plus 中，<code>IService</code> 和 <code>ServiceImpl</code> 提供了一些常用的 CRUD 方法，这些方法大大简化了对数据库的基本操作。下面是 <code>IService</code> 中常用的 CRUD 方法：</p>\n<h3 id=\"1-插入操作\"><a href=\"#1-插入操作\" class=\"headerlink\" title=\"1. 插入操作\"></a>1. 插入操作</h3><ul>\n<li><p>**insert(T entity)**：插入一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.save(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**saveBatch(Collection<T> entityList)**：批量插入记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveUsers</span><span class=\"params\">(List&lt;User&gt; users)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.saveBatch(users);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-删除操作\"><a href=\"#2-删除操作\" class=\"headerlink\" title=\"2. 删除操作\"></a>2. 删除操作</h3><ul>\n<li><p>**removeById(Serializable id)**：根据 ID 删除一条记录（逻辑删除）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.removeById(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**removeByMap(Map&lt;String, Object&gt; columnMap)**：根据 columnMap 条件删除记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsersByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.removeByMap(columnMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**remove(Wrapper<T> wrapper)**：根据条件删除记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; wrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.remove(wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**removeBatchByIds(Collection&lt;? extends Serializable&gt; idList)**：批量删除记录（逻辑删除）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsersByIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.removeBatchByIds(ids);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-更新操作\"><a href=\"#3-更新操作\" class=\"headerlink\" title=\"3. 更新操作\"></a>3. 更新操作</h3><ul>\n<li><p>**updateById(T entity)**：根据 ID 更新一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.updateById(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**update(T entity, Wrapper<T> updateWrapper)**：根据 whereWrapper 条件更新记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user, LambdaUpdateWrapper&lt;User&gt; updateWrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.update(user, updateWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**updateBatchById(Collection<T> entityList)**：批量更新记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUsers</span><span class=\"params\">(List&lt;User&gt; users)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.updateBatchById(users);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-查询操作\"><a href=\"#4-查询操作\" class=\"headerlink\" title=\"4. 查询操作\"></a>4. 查询操作</h3><ul>\n<li><p>**getById(Serializable id)**：根据 ID 查询一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">getUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.getById(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**listByIds(Collection&lt;? extends Serializable&gt; idList)**：根据 ID 集合批量查询记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsersByIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.listByIds(ids);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**listByMap(Map&lt;String, Object&gt; columnMap)**：根据 columnMap 条件查询记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsersByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.listByMap(columnMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**getOne(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">getOneUser</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.getOne(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**list(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询多条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.list(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**page(Page<T> page, Wrapper<T> queryWrapper)**：根据 wrapper 条件分页查询多条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(Page&lt;User&gt; page, LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.page(page, queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**count(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询记录数量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">countUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.count(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**list()**：查询所有记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getAllUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.list();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**page(Page<T> page)**：分页查询所有记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(Page&lt;User&gt; page)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.page(page);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>以下是一个完整的 <code>UserService</code> 实现示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;UserMapper, User&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> save(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveUsers</span><span class=\"params\">(List&lt;User&gt; users)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> saveBatch(users);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> removeById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsersByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> removeByMap(columnMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; wrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> remove(wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsersByIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> removeBatchByIds(ids);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateById(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user, LambdaUpdateWrapper&lt;User&gt; updateWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update(user, updateWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUsers</span><span class=\"params\">(List&lt;User&gt; users)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateBatchById(users);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsersByIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listByIds(ids);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsersByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listByMap(columnMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getOneUser</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getOne(queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list(queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(Page&lt;User&gt; page, LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> page(page, queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">countUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count(queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getAllUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(Page&lt;User&gt; page)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> page(page);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"Mybatis-Plus常见用法-Service-impl常用的基础方法\"><a href=\"#Mybatis-Plus常见用法-Service-impl常用的基础方法\" class=\"headerlink\" title=\"Mybatis-Plus常见用法-Service_impl常用的基础方法\"></a>Mybatis-Plus常见用法-Service_impl常用的基础方法</h3><h4 id=\"2Crud相关操作\"><a href=\"#2Crud相关操作\" class=\"headerlink\" title=\"2Crud相关操作\"></a>2Crud相关操作</h4><p>在 MyBatis-Plus 中，<code>IService</code> 和 <code>ServiceImpl</code> 提供了一些常用的 CRUD 方法，这些方法大大简化了对数据库的基本操作。下面是 <code>IService</code> 中常用的 CRUD 方法：</p>\n<h3 id=\"1-插入操作\"><a href=\"#1-插入操作\" class=\"headerlink\" title=\"1. 插入操作\"></a>1. 插入操作</h3><ul>\n<li><p>**insert(T entity)**：插入一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.save(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**saveBatch(Collection<T> entityList)**：批量插入记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveUsers</span><span class=\"params\">(List&lt;User&gt; users)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.saveBatch(users);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-删除操作\"><a href=\"#2-删除操作\" class=\"headerlink\" title=\"2. 删除操作\"></a>2. 删除操作</h3><ul>\n<li><p>**removeById(Serializable id)**：根据 ID 删除一条记录（逻辑删除）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.removeById(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**removeByMap(Map&lt;String, Object&gt; columnMap)**：根据 columnMap 条件删除记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsersByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.removeByMap(columnMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**remove(Wrapper<T> wrapper)**：根据条件删除记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; wrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.remove(wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**removeBatchByIds(Collection&lt;? extends Serializable&gt; idList)**：批量删除记录（逻辑删除）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsersByIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.removeBatchByIds(ids);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-更新操作\"><a href=\"#3-更新操作\" class=\"headerlink\" title=\"3. 更新操作\"></a>3. 更新操作</h3><ul>\n<li><p>**updateById(T entity)**：根据 ID 更新一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.updateById(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**update(T entity, Wrapper<T> updateWrapper)**：根据 whereWrapper 条件更新记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user, LambdaUpdateWrapper&lt;User&gt; updateWrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.update(user, updateWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**updateBatchById(Collection<T> entityList)**：批量更新记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUsers</span><span class=\"params\">(List&lt;User&gt; users)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.updateBatchById(users);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-查询操作\"><a href=\"#4-查询操作\" class=\"headerlink\" title=\"4. 查询操作\"></a>4. 查询操作</h3><ul>\n<li><p>**getById(Serializable id)**：根据 ID 查询一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">getUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.getById(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**listByIds(Collection&lt;? extends Serializable&gt; idList)**：根据 ID 集合批量查询记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsersByIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.listByIds(ids);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**listByMap(Map&lt;String, Object&gt; columnMap)**：根据 columnMap 条件查询记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsersByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.listByMap(columnMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**getOne(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询一条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">getOneUser</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.getOne(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**list(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询多条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.list(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**page(Page<T> page, Wrapper<T> queryWrapper)**：根据 wrapper 条件分页查询多条记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(Page&lt;User&gt; page, LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.page(page, queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**count(Wrapper<T> queryWrapper)**：根据 wrapper 条件查询记录数量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">countUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.count(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**list()**：查询所有记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getAllUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.list();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**page(Page<T> page)**：分页查询所有记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(Page&lt;User&gt; page)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.page(page);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>以下是一个完整的 <code>UserService</code> 实现示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;UserMapper, User&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> save(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveUsers</span><span class=\"params\">(List&lt;User&gt; users)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> saveBatch(users);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> removeById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsersByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> removeByMap(columnMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; wrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> remove(wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeUsersByIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> removeBatchByIds(ids);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateById(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user, LambdaUpdateWrapper&lt;User&gt; updateWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update(user, updateWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUsers</span><span class=\"params\">(List&lt;User&gt; users)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateBatchById(users);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsersByIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listByIds(ids);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsersByMap</span><span class=\"params\">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listByMap(columnMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getOneUser</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getOne(queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list(queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(Page&lt;User&gt; page, LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> page(page, queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">countUsers</span><span class=\"params\">(LambdaQueryWrapper&lt;User&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count(queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getAllUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(Page&lt;User&gt; page)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> page(page);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"一、Mybatis-Plus常见用法-entity常用的注解","date":"2024-07-24T14:32:50.000Z","_content":"### Mybatis-Plus常见用法-entity常用的注解\n\n### 1常用注解\n\n### 1. @TableName\n\n- **作用**：指定数据库表名。\n- **用法**：\n\n```java\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport lombok.Data;\n\n@Data\n@TableName(\"user\")  // 数据库表名\npublic class User {\n}\n```\n\n### 2. @TableId\n\n- **作用**：指定主键字段，并可以配置主键生成策略。\n- **用法**：\n\n```java\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport lombok.Data;\n\n@Data\npublic class User {\n    @TableId(value = \"id\", type = IdType.AUTO)  // 主键生成策略\n    private Long id;\n}\n```\n\n常见的主键生成策略有：\n\n- `IdType.AUTO`：数据库ID自增。\n- `IdType.NONE`：未设置主键。\n- `IdType.INPUT`：手动输入ID。\n- `IdType.ID_WORKER`：默认的雪花算法。\n- `IdType.UUID`：全局唯一ID。\n\n* `IdType.ASSIGN_ID`：基于雪花算法（Snowflake）的 ID 生成器\n\n### 3. @TableField\n\n- **作用**：指定数据库表中的字段，以及配置字段的相关属性。\n- **用法**：\n\n```java\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport lombok.Data;\n\n@Data\npublic class User {\n    @TableId\n    private Long id;\n\n    @TableField(\"user_name\")  // 指定数据库字段名，一般命名时要求类中字段和数据库同名，如：user_name -> userName\n    private String name;\n\n    @TableField(select = false)  // 查询时不返回该字段，用的比较少，一般返回的是null\n    private String email;\n\n    @TableField(fill = FieldFill.INSERT)  // 自动填充策略\n    private Date createTime;\n\n\t@TableField(exist = false) // 表明字段在表中不存在\n\tprivate List<ActiveBorderRelation> listActiveBorderRelation;\n    \n    @TableField(fill = FieldFill.INSERT)  // 自动填充策略\n    private Integer deleted;\n}\n```\n\n常见的自动填充策略有：\n\n- `FieldFill.DEFAULT`：默认不处理。\n- `FieldFill.INSERT`：插入时填充字段。\n- `FieldFill.UPDATE`：更新时填充字段。\n- `FieldFill.INSERT_UPDATE`：插入和更新时填充字段。\n\n配置自动填充处理器\n\n在项目中创建一个类，实现 `MetaObjectHandler` 接口，用于自动填充字段的默认值。\n\n```java\nimport com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        // 插入时填充逻辑删除字段的默认值为0\n        this.setFieldValByName(\"deleted\", 0, metaObject);\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        // 更新操作时的填充策略，如果有需要可以在这里定义\n    }\n}\n```\n\n### 4. @Version\n\n- **作用**：用于乐观锁实现，指定版本号字段。\n- **用法**：\n\n```java\nimport com.baomidou.mybatisplus.annotation.Version;\nimport lombok.Data;\n\n@Data\npublic class User {\n    @TableId\n    private Long id;\n    private String name;\n    private Integer age;\n    private String email;\n\n    @Version\n    private Integer version;  // 版本号字段\n}\n```\n\n### 乐观锁工作原理\n\n1. **查询数据**：首先查询需要更新的数据，同时获取当前的版本号。\n2. **更新数据**：在更新数据时，带上当前版本号。\n3. **版本号匹配**：MyBatis-Plus 在生成的 SQL 语句中，会将 `WHERE` 条件添加版本号的判断，即 `UPDATE user SET name=?, age=?, version=?+1 WHERE id=? AND version=?`。\n4. **版本号校验**：如果 `WHERE` 条件中版本号匹配，则更新成功，同时版本号自动递增；如果版本号不匹配，则更新失败，返回 `0`，表示数据已经被其他事务修改过\n\n### 5. @TableLogic\n\n- **作用**：用于逻辑删除，实现软删除功能。\n- **用法**：\n\n```java\nimport com.baomidou.mybatisplus.annotation.TableLogic;\nimport lombok.Data;\n\n@Data\npublic class User {\n    @TableId\n    private Long id;\n    private String name;\n    private Integer age;\n    private String email;\n\n    @TableLogic\n    private Integer deleted;  // 逻辑删除字段\n}\n```\n\n在 `application.yml` 中配置逻辑删除的值：\n\n```yaml\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-value: 1\n      logic-not-delete-value: 0\n```\n\n### 插入数据和逻辑删除数据\n\n在插入数据时，`deleted` 字段会自动填充为 `0`，无需手动设置。\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserService {\n    @Autowired\n    private UserMapper userMapper;\n\n    public void addUser() {\n        User user = new User();\n        user.setName(\"Alice\");\n        user.setAge(30);\n        user.setEmail(\"alice@example.com\");\n        userMapper.insert(user);  // 插入时，deleted 字段自动填充为 0\n    }\n\t\n    public void deleteUser(Long id) {\n        userMapper.deleteById(id);  // 逻辑删除时，deleted 字段自动更新为 1\n    }\n}\n```","source":"_posts/Mybatis-Plus常见用法-entity常用的注解.md","raw":"---\ntitle: 一、Mybatis-Plus常见用法-entity常用的注解\ndate: 2024-07-24 22:32:50\ntags: mybatisplus\n---\n### Mybatis-Plus常见用法-entity常用的注解\n\n### 1常用注解\n\n### 1. @TableName\n\n- **作用**：指定数据库表名。\n- **用法**：\n\n```java\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport lombok.Data;\n\n@Data\n@TableName(\"user\")  // 数据库表名\npublic class User {\n}\n```\n\n### 2. @TableId\n\n- **作用**：指定主键字段，并可以配置主键生成策略。\n- **用法**：\n\n```java\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport lombok.Data;\n\n@Data\npublic class User {\n    @TableId(value = \"id\", type = IdType.AUTO)  // 主键生成策略\n    private Long id;\n}\n```\n\n常见的主键生成策略有：\n\n- `IdType.AUTO`：数据库ID自增。\n- `IdType.NONE`：未设置主键。\n- `IdType.INPUT`：手动输入ID。\n- `IdType.ID_WORKER`：默认的雪花算法。\n- `IdType.UUID`：全局唯一ID。\n\n* `IdType.ASSIGN_ID`：基于雪花算法（Snowflake）的 ID 生成器\n\n### 3. @TableField\n\n- **作用**：指定数据库表中的字段，以及配置字段的相关属性。\n- **用法**：\n\n```java\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport lombok.Data;\n\n@Data\npublic class User {\n    @TableId\n    private Long id;\n\n    @TableField(\"user_name\")  // 指定数据库字段名，一般命名时要求类中字段和数据库同名，如：user_name -> userName\n    private String name;\n\n    @TableField(select = false)  // 查询时不返回该字段，用的比较少，一般返回的是null\n    private String email;\n\n    @TableField(fill = FieldFill.INSERT)  // 自动填充策略\n    private Date createTime;\n\n\t@TableField(exist = false) // 表明字段在表中不存在\n\tprivate List<ActiveBorderRelation> listActiveBorderRelation;\n    \n    @TableField(fill = FieldFill.INSERT)  // 自动填充策略\n    private Integer deleted;\n}\n```\n\n常见的自动填充策略有：\n\n- `FieldFill.DEFAULT`：默认不处理。\n- `FieldFill.INSERT`：插入时填充字段。\n- `FieldFill.UPDATE`：更新时填充字段。\n- `FieldFill.INSERT_UPDATE`：插入和更新时填充字段。\n\n配置自动填充处理器\n\n在项目中创建一个类，实现 `MetaObjectHandler` 接口，用于自动填充字段的默认值。\n\n```java\nimport com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        // 插入时填充逻辑删除字段的默认值为0\n        this.setFieldValByName(\"deleted\", 0, metaObject);\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        // 更新操作时的填充策略，如果有需要可以在这里定义\n    }\n}\n```\n\n### 4. @Version\n\n- **作用**：用于乐观锁实现，指定版本号字段。\n- **用法**：\n\n```java\nimport com.baomidou.mybatisplus.annotation.Version;\nimport lombok.Data;\n\n@Data\npublic class User {\n    @TableId\n    private Long id;\n    private String name;\n    private Integer age;\n    private String email;\n\n    @Version\n    private Integer version;  // 版本号字段\n}\n```\n\n### 乐观锁工作原理\n\n1. **查询数据**：首先查询需要更新的数据，同时获取当前的版本号。\n2. **更新数据**：在更新数据时，带上当前版本号。\n3. **版本号匹配**：MyBatis-Plus 在生成的 SQL 语句中，会将 `WHERE` 条件添加版本号的判断，即 `UPDATE user SET name=?, age=?, version=?+1 WHERE id=? AND version=?`。\n4. **版本号校验**：如果 `WHERE` 条件中版本号匹配，则更新成功，同时版本号自动递增；如果版本号不匹配，则更新失败，返回 `0`，表示数据已经被其他事务修改过\n\n### 5. @TableLogic\n\n- **作用**：用于逻辑删除，实现软删除功能。\n- **用法**：\n\n```java\nimport com.baomidou.mybatisplus.annotation.TableLogic;\nimport lombok.Data;\n\n@Data\npublic class User {\n    @TableId\n    private Long id;\n    private String name;\n    private Integer age;\n    private String email;\n\n    @TableLogic\n    private Integer deleted;  // 逻辑删除字段\n}\n```\n\n在 `application.yml` 中配置逻辑删除的值：\n\n```yaml\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-value: 1\n      logic-not-delete-value: 0\n```\n\n### 插入数据和逻辑删除数据\n\n在插入数据时，`deleted` 字段会自动填充为 `0`，无需手动设置。\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserService {\n    @Autowired\n    private UserMapper userMapper;\n\n    public void addUser() {\n        User user = new User();\n        user.setName(\"Alice\");\n        user.setAge(30);\n        user.setEmail(\"alice@example.com\");\n        userMapper.insert(user);  // 插入时，deleted 字段自动填充为 0\n    }\n\t\n    public void deleteUser(Long id) {\n        userMapper.deleteById(id);  // 逻辑删除时，deleted 字段自动更新为 1\n    }\n}\n```","slug":"Mybatis-Plus常见用法-entity常用的注解","published":1,"updated":"2024-07-26T15:45:06.863Z","comments":1,"layout":"post","photos":[],"_id":"clz2vkaxn0003scu4djcd25vr","content":"<h3 id=\"Mybatis-Plus常见用法-entity常用的注解\"><a href=\"#Mybatis-Plus常见用法-entity常用的注解\" class=\"headerlink\" title=\"Mybatis-Plus常见用法-entity常用的注解\"></a>Mybatis-Plus常见用法-entity常用的注解</h3><h3 id=\"1常用注解\"><a href=\"#1常用注解\" class=\"headerlink\" title=\"1常用注解\"></a>1常用注解</h3><h3 id=\"1-TableName\"><a href=\"#1-TableName\" class=\"headerlink\" title=\"1. @TableName\"></a>1. @TableName</h3><ul>\n<li><strong>作用</strong>：指定数据库表名。</li>\n<li><strong>用法</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(&quot;user&quot;)</span>  <span class=\"comment\">// 数据库表名</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-TableId\"><a href=\"#2-TableId\" class=\"headerlink\" title=\"2. @TableId\"></a>2. @TableId</h3><ul>\n<li><strong>作用</strong>：指定主键字段，并可以配置主键生成策略。</li>\n<li><strong>用法</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>  <span class=\"comment\">// 主键生成策略</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见的主键生成策略有：</p>\n<ul>\n<li><code>IdType.AUTO</code>：数据库ID自增。</li>\n<li><code>IdType.NONE</code>：未设置主键。</li>\n<li><code>IdType.INPUT</code>：手动输入ID。</li>\n<li><code>IdType.ID_WORKER</code>：默认的雪花算法。</li>\n<li><code>IdType.UUID</code>：全局唯一ID。</li>\n</ul>\n<ul>\n<li><code>IdType.ASSIGN_ID</code>：基于雪花算法（Snowflake）的 ID 生成器</li>\n</ul>\n<h3 id=\"3-TableField\"><a href=\"#3-TableField\" class=\"headerlink\" title=\"3. @TableField\"></a>3. @TableField</h3><ul>\n<li><strong>作用</strong>：指定数据库表中的字段，以及配置字段的相关属性。</li>\n<li><strong>用法</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(&quot;user_name&quot;)</span>  <span class=\"comment\">// 指定数据库字段名，一般命名时要求类中字段和数据库同名，如：user_name -&gt; userName</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(select = false)</span>  <span class=\"comment\">// 查询时不返回该字段，用的比较少，一般返回的是null</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span>  <span class=\"comment\">// 自动填充策略</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@TableField(exist = false)</span> <span class=\"comment\">// 表明字段在表中不存在</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;ActiveBorderRelation&gt; listActiveBorderRelation;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span>  <span class=\"comment\">// 自动填充策略</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer deleted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见的自动填充策略有：</p>\n<ul>\n<li><code>FieldFill.DEFAULT</code>：默认不处理。</li>\n<li><code>FieldFill.INSERT</code>：插入时填充字段。</li>\n<li><code>FieldFill.UPDATE</code>：更新时填充字段。</li>\n<li><code>FieldFill.INSERT_UPDATE</code>：插入和更新时填充字段。</li>\n</ul>\n<p>配置自动填充处理器</p>\n<p>在项目中创建一个类，实现 <code>MetaObjectHandler</code> 接口，用于自动填充字段的默认值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMetaObjectHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MetaObjectHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入时填充逻辑删除字段的默认值为0</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFieldValByName(<span class=\"string\">&quot;deleted&quot;</span>, <span class=\"number\">0</span>, metaObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 更新操作时的填充策略，如果有需要可以在这里定义</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Version\"><a href=\"#4-Version\" class=\"headerlink\" title=\"4. @Version\"></a>4. @Version</h3><ul>\n<li><strong>作用</strong>：用于乐观锁实现，指定版本号字段。</li>\n<li><strong>用法</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.Version;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Version</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer version;  <span class=\"comment\">// 版本号字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"乐观锁工作原理\"><a href=\"#乐观锁工作原理\" class=\"headerlink\" title=\"乐观锁工作原理\"></a>乐观锁工作原理</h3><ol>\n<li><strong>查询数据</strong>：首先查询需要更新的数据，同时获取当前的版本号。</li>\n<li><strong>更新数据</strong>：在更新数据时，带上当前版本号。</li>\n<li><strong>版本号匹配</strong>：MyBatis-Plus 在生成的 SQL 语句中，会将 <code>WHERE</code> 条件添加版本号的判断，即 <code>UPDATE user SET name=?, age=?, version=?+1 WHERE id=? AND version=?</code>。</li>\n<li><strong>版本号校验</strong>：如果 <code>WHERE</code> 条件中版本号匹配，则更新成功，同时版本号自动递增；如果版本号不匹配，则更新失败，返回 <code>0</code>，表示数据已经被其他事务修改过</li>\n</ol>\n<h3 id=\"5-TableLogic\"><a href=\"#5-TableLogic\" class=\"headerlink\" title=\"5. @TableLogic\"></a>5. @TableLogic</h3><ul>\n<li><strong>作用</strong>：用于逻辑删除，实现软删除功能。</li>\n<li><strong>用法</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableLogic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableLogic</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer deleted;  <span class=\"comment\">// 逻辑删除字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>application.yml</code> 中配置逻辑删除的值：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-value:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">logic-not-delete-value:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入数据和逻辑删除数据\"><a href=\"#插入数据和逻辑删除数据\" class=\"headerlink\" title=\"插入数据和逻辑删除数据\"></a>插入数据和逻辑删除数据</h3><p>在插入数据时，<code>deleted</code> 字段会自动填充为 <code>0</code>，无需手动设置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;Alice&quot;</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">30</span>);</span><br><span class=\"line\">        user.setEmail(<span class=\"string\">&quot;alice@example.com&quot;</span>);</span><br><span class=\"line\">        userMapper.insert(user);  <span class=\"comment\">// 插入时，deleted 字段自动填充为 0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        userMapper.deleteById(id);  <span class=\"comment\">// 逻辑删除时，deleted 字段自动更新为 1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"Mybatis-Plus常见用法-entity常用的注解\"><a href=\"#Mybatis-Plus常见用法-entity常用的注解\" class=\"headerlink\" title=\"Mybatis-Plus常见用法-entity常用的注解\"></a>Mybatis-Plus常见用法-entity常用的注解</h3><h3 id=\"1常用注解\"><a href=\"#1常用注解\" class=\"headerlink\" title=\"1常用注解\"></a>1常用注解</h3><h3 id=\"1-TableName\"><a href=\"#1-TableName\" class=\"headerlink\" title=\"1. @TableName\"></a>1. @TableName</h3><ul>\n<li><strong>作用</strong>：指定数据库表名。</li>\n<li><strong>用法</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(&quot;user&quot;)</span>  <span class=\"comment\">// 数据库表名</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-TableId\"><a href=\"#2-TableId\" class=\"headerlink\" title=\"2. @TableId\"></a>2. @TableId</h3><ul>\n<li><strong>作用</strong>：指定主键字段，并可以配置主键生成策略。</li>\n<li><strong>用法</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>  <span class=\"comment\">// 主键生成策略</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见的主键生成策略有：</p>\n<ul>\n<li><code>IdType.AUTO</code>：数据库ID自增。</li>\n<li><code>IdType.NONE</code>：未设置主键。</li>\n<li><code>IdType.INPUT</code>：手动输入ID。</li>\n<li><code>IdType.ID_WORKER</code>：默认的雪花算法。</li>\n<li><code>IdType.UUID</code>：全局唯一ID。</li>\n</ul>\n<ul>\n<li><code>IdType.ASSIGN_ID</code>：基于雪花算法（Snowflake）的 ID 生成器</li>\n</ul>\n<h3 id=\"3-TableField\"><a href=\"#3-TableField\" class=\"headerlink\" title=\"3. @TableField\"></a>3. @TableField</h3><ul>\n<li><strong>作用</strong>：指定数据库表中的字段，以及配置字段的相关属性。</li>\n<li><strong>用法</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(&quot;user_name&quot;)</span>  <span class=\"comment\">// 指定数据库字段名，一般命名时要求类中字段和数据库同名，如：user_name -&gt; userName</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(select = false)</span>  <span class=\"comment\">// 查询时不返回该字段，用的比较少，一般返回的是null</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span>  <span class=\"comment\">// 自动填充策略</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@TableField(exist = false)</span> <span class=\"comment\">// 表明字段在表中不存在</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;ActiveBorderRelation&gt; listActiveBorderRelation;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span>  <span class=\"comment\">// 自动填充策略</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer deleted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见的自动填充策略有：</p>\n<ul>\n<li><code>FieldFill.DEFAULT</code>：默认不处理。</li>\n<li><code>FieldFill.INSERT</code>：插入时填充字段。</li>\n<li><code>FieldFill.UPDATE</code>：更新时填充字段。</li>\n<li><code>FieldFill.INSERT_UPDATE</code>：插入和更新时填充字段。</li>\n</ul>\n<p>配置自动填充处理器</p>\n<p>在项目中创建一个类，实现 <code>MetaObjectHandler</code> 接口，用于自动填充字段的默认值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMetaObjectHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MetaObjectHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入时填充逻辑删除字段的默认值为0</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFieldValByName(<span class=\"string\">&quot;deleted&quot;</span>, <span class=\"number\">0</span>, metaObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 更新操作时的填充策略，如果有需要可以在这里定义</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Version\"><a href=\"#4-Version\" class=\"headerlink\" title=\"4. @Version\"></a>4. @Version</h3><ul>\n<li><strong>作用</strong>：用于乐观锁实现，指定版本号字段。</li>\n<li><strong>用法</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.Version;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Version</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer version;  <span class=\"comment\">// 版本号字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"乐观锁工作原理\"><a href=\"#乐观锁工作原理\" class=\"headerlink\" title=\"乐观锁工作原理\"></a>乐观锁工作原理</h3><ol>\n<li><strong>查询数据</strong>：首先查询需要更新的数据，同时获取当前的版本号。</li>\n<li><strong>更新数据</strong>：在更新数据时，带上当前版本号。</li>\n<li><strong>版本号匹配</strong>：MyBatis-Plus 在生成的 SQL 语句中，会将 <code>WHERE</code> 条件添加版本号的判断，即 <code>UPDATE user SET name=?, age=?, version=?+1 WHERE id=? AND version=?</code>。</li>\n<li><strong>版本号校验</strong>：如果 <code>WHERE</code> 条件中版本号匹配，则更新成功，同时版本号自动递增；如果版本号不匹配，则更新失败，返回 <code>0</code>，表示数据已经被其他事务修改过</li>\n</ol>\n<h3 id=\"5-TableLogic\"><a href=\"#5-TableLogic\" class=\"headerlink\" title=\"5. @TableLogic\"></a>5. @TableLogic</h3><ul>\n<li><strong>作用</strong>：用于逻辑删除，实现软删除功能。</li>\n<li><strong>用法</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableLogic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableLogic</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer deleted;  <span class=\"comment\">// 逻辑删除字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>application.yml</code> 中配置逻辑删除的值：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-value:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">logic-not-delete-value:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入数据和逻辑删除数据\"><a href=\"#插入数据和逻辑删除数据\" class=\"headerlink\" title=\"插入数据和逻辑删除数据\"></a>插入数据和逻辑删除数据</h3><p>在插入数据时，<code>deleted</code> 字段会自动填充为 <code>0</code>，无需手动设置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;Alice&quot;</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">30</span>);</span><br><span class=\"line\">        user.setEmail(<span class=\"string\">&quot;alice@example.com&quot;</span>);</span><br><span class=\"line\">        userMapper.insert(user);  <span class=\"comment\">// 插入时，deleted 字段自动填充为 0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        userMapper.deleteById(id);  <span class=\"comment\">// 逻辑删除时，deleted 字段自动更新为 1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"四、Mybatis-Plus常见用法-Mapper层自定义SQL","date":"2024-07-28T14:32:50.000Z","_content":"### Mapper层自定义SQL\n\n在 MyBatis-Plus 中，可以通过注解和 XML 配置文件两种方式编写自定义 SQL。以下是两种方式的详细说明和示例。\n\n#### 使用注解编写自定义 SQL\n\n通过注解在 Mapper 接口中直接编写 SQL 语句。\n\n##### 使用 `@Select` 注解\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n    @Select(\"SELECT * FROM user WHERE status = #{status}\")\n    List<User> selectUsersByStatus(@Param(\"status\") int status);\n}\n```\n\n##### 使用 `@Insert` 注解\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n    @Insert(\"INSERT INTO user(name, age, email) VALUES(#{name}, #{age}, #{email})\")\n    int insertUser(@Param(\"name\") String name, @Param(\"age\") int age, @Param(\"email\") String email);\n}\n```\n\n##### 使用 `@Update` 注解\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n    @Update(\"UPDATE user SET name = #{name} WHERE id = #{id}\")\n    int updateUserName(@Param(\"id\") Long id, @Param(\"name\") String name);\n}\n```\n\n##### 使用 `@Delete` 注解\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n    @Delete(\"DELETE FROM user WHERE id = #{id}\")\n    int deleteUserById(@Param(\"id\") Long id);\n}\n```\n\n#### 使用 XML 配置文件编写自定义 SQL\n\n在 `resources/mapper` 目录下创建一个 `UserMapper.xml` 文件：\n\n```xml\n<mapper namespace=\"com.example.mapper.UserMapper\">\n\n    <select id=\"selectUsersByStatus\" resultType=\"com.example.entity.User\">\n        SELECT * FROM user WHERE status = #{status}\n    </select>\n\n    <insert id=\"insertUser\">\n        INSERT INTO user(name, age, email) VALUES(#{name}, #{age}, #{email})\n    </insert>\n\n    <update id=\"updateUserName\">\n        UPDATE user SET name = #{name} WHERE id = #{id}\n    </update>\n\n    <delete id=\"deleteUserById\">\n        DELETE FROM user WHERE id = #{id}\n    </delete>\n\n</mapper>\n```\n\n在 Mapper 接口中引用这些方法：\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n    List<User> selectUsersByStatus(@Param(\"status\") int status);\n    int insertUser(@Param(\"name\") String name, @Param(\"age\") int age, @Param(\"email\") String email);\n    int updateUserName(@Param(\"id\") Long id, @Param(\"name\") String name);\n    int deleteUserById(@Param(\"id\") Long id);\n}\n```\n### 分页器\n\n#### 配置分页插件\n\n创建一个配置类来配置分页插件：\n\n```java\n@Configuration\npublic class MybatisPlusConfig {\n    @Bean\n    public PaginationInterceptor paginationInterceptor() {\n        return new PaginationInterceptor();\n    }\n}\n```\n\n### 分页查询示例\n\n假设我们有一个用户表 `user`，我们需要对用户数据进行分页查询。以下是具体实现步骤。\n\n#### 定义实体类\n\n定义一个用户实体类 `User`：\n\n```java\n@Data\n@TableName(\"user\")\npublic class User {\n    @TableId\n    private Long id;\n    private String name;\n    private Integer age;\n    private String email;\n}\n```\n\n#### 定义 Mapper 接口\n\n在 Mapper 接口中继承 `BaseMapper`，MyBatis-Plus 会自动生成常用的 CRUD 方法：\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n}\n```\n\n#### Service 层实现分页查询\n\n在 Service 层中实现分页查询逻辑：\n\n```java\n@Service\npublic class UserService {\n\n    @Autowired\n    private UserMapper userMapper;\n\n    public IPage<User> getUsersPage(int currentPage, int pageSize) {\n        Page<User> page = new Page<>(currentPage, pageSize);\n        return userMapper.selectPage(page, null);\n    }\n}\n```\n\n#### Controller 层调用分页查询\n\n在 Controller 层中调用分页查询：\n\n```java\n@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    @GetMapping(\"/page\")\n    public IPage<User> getUsersPage(@RequestParam int currentPage, @RequestParam int pageSize) {\n        return userService.getUsersPage(currentPage, pageSize);\n    }\n}\n```\n\n### 分页查询示例说明\n\n1. **配置分页插件**： 在 `MybatisPlusConfig` 类中，通过 `PaginationInterceptor` 配置分页插件，使其在项目中生效。\n2. **定义实体类**： 在 `User` 类中使用 `@TableName` 注解指定数据库表名，使用 `@TableId` 注解指定主键。\n3. **定义 Mapper 接口**： 在 `UserMapper` 接口中继承 `BaseMapper<User>`，使 MyBatis-Plus 提供的 CRUD 方法可用。\n4. **Service 层实现分页查询**： 在 `UserService` 类中，使用 `Page<User>` 对象封装分页参数，通过 `userMapper.selectPage(page, null)` 方法执行分页查询。\n5. **Controller 层调用分页查询**： 在 `UserController` 类中，通过 `UserService` 调用分页查询方法，并通过 RESTful API 返回分页结果。\n","source":"_posts/Mabatis-Plus常见用法-Mapper层自定义SQL和分页器.md","raw":"---\ntitle: 四、Mybatis-Plus常见用法-Mapper层自定义SQL\ndate: 2024-07-28 22:32:50\ntags: mybatisplus\n---\n### Mapper层自定义SQL\n\n在 MyBatis-Plus 中，可以通过注解和 XML 配置文件两种方式编写自定义 SQL。以下是两种方式的详细说明和示例。\n\n#### 使用注解编写自定义 SQL\n\n通过注解在 Mapper 接口中直接编写 SQL 语句。\n\n##### 使用 `@Select` 注解\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n    @Select(\"SELECT * FROM user WHERE status = #{status}\")\n    List<User> selectUsersByStatus(@Param(\"status\") int status);\n}\n```\n\n##### 使用 `@Insert` 注解\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n    @Insert(\"INSERT INTO user(name, age, email) VALUES(#{name}, #{age}, #{email})\")\n    int insertUser(@Param(\"name\") String name, @Param(\"age\") int age, @Param(\"email\") String email);\n}\n```\n\n##### 使用 `@Update` 注解\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n    @Update(\"UPDATE user SET name = #{name} WHERE id = #{id}\")\n    int updateUserName(@Param(\"id\") Long id, @Param(\"name\") String name);\n}\n```\n\n##### 使用 `@Delete` 注解\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n    @Delete(\"DELETE FROM user WHERE id = #{id}\")\n    int deleteUserById(@Param(\"id\") Long id);\n}\n```\n\n#### 使用 XML 配置文件编写自定义 SQL\n\n在 `resources/mapper` 目录下创建一个 `UserMapper.xml` 文件：\n\n```xml\n<mapper namespace=\"com.example.mapper.UserMapper\">\n\n    <select id=\"selectUsersByStatus\" resultType=\"com.example.entity.User\">\n        SELECT * FROM user WHERE status = #{status}\n    </select>\n\n    <insert id=\"insertUser\">\n        INSERT INTO user(name, age, email) VALUES(#{name}, #{age}, #{email})\n    </insert>\n\n    <update id=\"updateUserName\">\n        UPDATE user SET name = #{name} WHERE id = #{id}\n    </update>\n\n    <delete id=\"deleteUserById\">\n        DELETE FROM user WHERE id = #{id}\n    </delete>\n\n</mapper>\n```\n\n在 Mapper 接口中引用这些方法：\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n    List<User> selectUsersByStatus(@Param(\"status\") int status);\n    int insertUser(@Param(\"name\") String name, @Param(\"age\") int age, @Param(\"email\") String email);\n    int updateUserName(@Param(\"id\") Long id, @Param(\"name\") String name);\n    int deleteUserById(@Param(\"id\") Long id);\n}\n```\n### 分页器\n\n#### 配置分页插件\n\n创建一个配置类来配置分页插件：\n\n```java\n@Configuration\npublic class MybatisPlusConfig {\n    @Bean\n    public PaginationInterceptor paginationInterceptor() {\n        return new PaginationInterceptor();\n    }\n}\n```\n\n### 分页查询示例\n\n假设我们有一个用户表 `user`，我们需要对用户数据进行分页查询。以下是具体实现步骤。\n\n#### 定义实体类\n\n定义一个用户实体类 `User`：\n\n```java\n@Data\n@TableName(\"user\")\npublic class User {\n    @TableId\n    private Long id;\n    private String name;\n    private Integer age;\n    private String email;\n}\n```\n\n#### 定义 Mapper 接口\n\n在 Mapper 接口中继承 `BaseMapper`，MyBatis-Plus 会自动生成常用的 CRUD 方法：\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n}\n```\n\n#### Service 层实现分页查询\n\n在 Service 层中实现分页查询逻辑：\n\n```java\n@Service\npublic class UserService {\n\n    @Autowired\n    private UserMapper userMapper;\n\n    public IPage<User> getUsersPage(int currentPage, int pageSize) {\n        Page<User> page = new Page<>(currentPage, pageSize);\n        return userMapper.selectPage(page, null);\n    }\n}\n```\n\n#### Controller 层调用分页查询\n\n在 Controller 层中调用分页查询：\n\n```java\n@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    @GetMapping(\"/page\")\n    public IPage<User> getUsersPage(@RequestParam int currentPage, @RequestParam int pageSize) {\n        return userService.getUsersPage(currentPage, pageSize);\n    }\n}\n```\n\n### 分页查询示例说明\n\n1. **配置分页插件**： 在 `MybatisPlusConfig` 类中，通过 `PaginationInterceptor` 配置分页插件，使其在项目中生效。\n2. **定义实体类**： 在 `User` 类中使用 `@TableName` 注解指定数据库表名，使用 `@TableId` 注解指定主键。\n3. **定义 Mapper 接口**： 在 `UserMapper` 接口中继承 `BaseMapper<User>`，使 MyBatis-Plus 提供的 CRUD 方法可用。\n4. **Service 层实现分页查询**： 在 `UserService` 类中，使用 `Page<User>` 对象封装分页参数，通过 `userMapper.selectPage(page, null)` 方法执行分页查询。\n5. **Controller 层调用分页查询**： 在 `UserController` 类中，通过 `UserService` 调用分页查询方法，并通过 RESTful API 返回分页结果。\n","slug":"Mabatis-Plus常见用法-Mapper层自定义SQL和分页器","published":1,"updated":"2024-07-31T15:07:18.366Z","_id":"clz9yzmnl0000pwu40g2296gs","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"Mapper层自定义SQL\"><a href=\"#Mapper层自定义SQL\" class=\"headerlink\" title=\"Mapper层自定义SQL\"></a>Mapper层自定义SQL</h3><p>在 MyBatis-Plus 中，可以通过注解和 XML 配置文件两种方式编写自定义 SQL。以下是两种方式的详细说明和示例。</p>\n<h4 id=\"使用注解编写自定义-SQL\"><a href=\"#使用注解编写自定义-SQL\" class=\"headerlink\" title=\"使用注解编写自定义 SQL\"></a>使用注解编写自定义 SQL</h4><p>通过注解在 Mapper 接口中直接编写 SQL 语句。</p>\n<h5 id=\"使用-Select-注解\"><a href=\"#使用-Select-注解\" class=\"headerlink\" title=\"使用 @Select 注解\"></a>使用 <code>@Select</code> 注解</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;SELECT * FROM user WHERE status = #&#123;status&#125;&quot;)</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">selectUsersByStatus</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;status&quot;)</span> <span class=\"type\">int</span> status)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-Insert-注解\"><a href=\"#使用-Insert-注解\" class=\"headerlink\" title=\"使用 @Insert 注解\"></a>使用 <code>@Insert</code> 注解</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert(&quot;INSERT INTO user(name, age, email) VALUES(#&#123;name&#125;, #&#123;age&#125;, #&#123;email&#125;)&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insertUser</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;name&quot;)</span> String name, <span class=\"meta\">@Param(&quot;age&quot;)</span> <span class=\"type\">int</span> age, <span class=\"meta\">@Param(&quot;email&quot;)</span> String email)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-Update-注解\"><a href=\"#使用-Update-注解\" class=\"headerlink\" title=\"使用 @Update 注解\"></a>使用 <code>@Update</code> 注解</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Update(&quot;UPDATE user SET name = #&#123;name&#125; WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">updateUserName</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> Long id, <span class=\"meta\">@Param(&quot;name&quot;)</span> String name)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-Delete-注解\"><a href=\"#使用-Delete-注解\" class=\"headerlink\" title=\"使用 @Delete 注解\"></a>使用 <code>@Delete</code> 注解</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Delete(&quot;DELETE FROM user WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">deleteUserById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-XML-配置文件编写自定义-SQL\"><a href=\"#使用-XML-配置文件编写自定义-SQL\" class=\"headerlink\" title=\"使用 XML 配置文件编写自定义 SQL\"></a>使用 XML 配置文件编写自定义 SQL</h4><p>在 <code>resources/mapper</code> 目录下创建一个 <code>UserMapper.xml</code> 文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectUsersByStatus&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.example.entity.User&quot;</span>&gt;</span></span><br><span class=\"line\">        SELECT * FROM user WHERE status = #&#123;status&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertUser&quot;</span>&gt;</span></span><br><span class=\"line\">        INSERT INTO user(name, age, email) VALUES(#&#123;name&#125;, #&#123;age&#125;, #&#123;email&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateUserName&quot;</span>&gt;</span></span><br><span class=\"line\">        UPDATE user SET name = #&#123;name&#125; WHERE id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteUserById&quot;</span>&gt;</span></span><br><span class=\"line\">        DELETE FROM user WHERE id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 Mapper 接口中引用这些方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">selectUsersByStatus</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;status&quot;)</span> <span class=\"type\">int</span> status)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insertUser</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;name&quot;)</span> String name, <span class=\"meta\">@Param(&quot;age&quot;)</span> <span class=\"type\">int</span> age, <span class=\"meta\">@Param(&quot;email&quot;)</span> String email)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">updateUserName</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> Long id, <span class=\"meta\">@Param(&quot;name&quot;)</span> String name)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">deleteUserById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分页器\"><a href=\"#分页器\" class=\"headerlink\" title=\"分页器\"></a>分页器</h3><h4 id=\"配置分页插件\"><a href=\"#配置分页插件\" class=\"headerlink\" title=\"配置分页插件\"></a>配置分页插件</h4><p>创建一个配置类来配置分页插件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisPlusConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PaginationInterceptor <span class=\"title function_\">paginationInterceptor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PaginationInterceptor</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分页查询示例\"><a href=\"#分页查询示例\" class=\"headerlink\" title=\"分页查询示例\"></a>分页查询示例</h3><p>假设我们有一个用户表 <code>user</code>，我们需要对用户数据进行分页查询。以下是具体实现步骤。</p>\n<h4 id=\"定义实体类\"><a href=\"#定义实体类\" class=\"headerlink\" title=\"定义实体类\"></a>定义实体类</h4><p>定义一个用户实体类 <code>User</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义-Mapper-接口\"><a href=\"#定义-Mapper-接口\" class=\"headerlink\" title=\"定义 Mapper 接口\"></a>定义 Mapper 接口</h4><p>在 Mapper 接口中继承 <code>BaseMapper</code>，MyBatis-Plus 会自动生成常用的 CRUD 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Service-层实现分页查询\"><a href=\"#Service-层实现分页查询\" class=\"headerlink\" title=\"Service 层实现分页查询\"></a>Service 层实现分页查询</h4><p>在 Service 层中实现分页查询逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(<span class=\"type\">int</span> currentPage, <span class=\"type\">int</span> pageSize)</span> &#123;</span><br><span class=\"line\">        Page&lt;User&gt; page = <span class=\"keyword\">new</span> <span class=\"title class_\">Page</span>&lt;&gt;(currentPage, pageSize);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.selectPage(page, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Controller-层调用分页查询\"><a href=\"#Controller-层调用分页查询\" class=\"headerlink\" title=\"Controller 层调用分页查询\"></a>Controller 层调用分页查询</h4><p>在 Controller 层中调用分页查询：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/users&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/page&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> <span class=\"type\">int</span> currentPage, <span class=\"meta\">@RequestParam</span> <span class=\"type\">int</span> pageSize)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.getUsersPage(currentPage, pageSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分页查询示例说明\"><a href=\"#分页查询示例说明\" class=\"headerlink\" title=\"分页查询示例说明\"></a>分页查询示例说明</h3><ol>\n<li><strong>配置分页插件</strong>： 在 <code>MybatisPlusConfig</code> 类中，通过 <code>PaginationInterceptor</code> 配置分页插件，使其在项目中生效。</li>\n<li><strong>定义实体类</strong>： 在 <code>User</code> 类中使用 <code>@TableName</code> 注解指定数据库表名，使用 <code>@TableId</code> 注解指定主键。</li>\n<li><strong>定义 Mapper 接口</strong>： 在 <code>UserMapper</code> 接口中继承 <code>BaseMapper&lt;User&gt;</code>，使 MyBatis-Plus 提供的 CRUD 方法可用。</li>\n<li><strong>Service 层实现分页查询</strong>： 在 <code>UserService</code> 类中，使用 <code>Page&lt;User&gt;</code> 对象封装分页参数，通过 <code>userMapper.selectPage(page, null)</code> 方法执行分页查询。</li>\n<li><strong>Controller 层调用分页查询</strong>： 在 <code>UserController</code> 类中，通过 <code>UserService</code> 调用分页查询方法，并通过 RESTful API 返回分页结果。</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"Mapper层自定义SQL\"><a href=\"#Mapper层自定义SQL\" class=\"headerlink\" title=\"Mapper层自定义SQL\"></a>Mapper层自定义SQL</h3><p>在 MyBatis-Plus 中，可以通过注解和 XML 配置文件两种方式编写自定义 SQL。以下是两种方式的详细说明和示例。</p>\n<h4 id=\"使用注解编写自定义-SQL\"><a href=\"#使用注解编写自定义-SQL\" class=\"headerlink\" title=\"使用注解编写自定义 SQL\"></a>使用注解编写自定义 SQL</h4><p>通过注解在 Mapper 接口中直接编写 SQL 语句。</p>\n<h5 id=\"使用-Select-注解\"><a href=\"#使用-Select-注解\" class=\"headerlink\" title=\"使用 @Select 注解\"></a>使用 <code>@Select</code> 注解</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;SELECT * FROM user WHERE status = #&#123;status&#125;&quot;)</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">selectUsersByStatus</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;status&quot;)</span> <span class=\"type\">int</span> status)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-Insert-注解\"><a href=\"#使用-Insert-注解\" class=\"headerlink\" title=\"使用 @Insert 注解\"></a>使用 <code>@Insert</code> 注解</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert(&quot;INSERT INTO user(name, age, email) VALUES(#&#123;name&#125;, #&#123;age&#125;, #&#123;email&#125;)&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insertUser</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;name&quot;)</span> String name, <span class=\"meta\">@Param(&quot;age&quot;)</span> <span class=\"type\">int</span> age, <span class=\"meta\">@Param(&quot;email&quot;)</span> String email)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-Update-注解\"><a href=\"#使用-Update-注解\" class=\"headerlink\" title=\"使用 @Update 注解\"></a>使用 <code>@Update</code> 注解</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Update(&quot;UPDATE user SET name = #&#123;name&#125; WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">updateUserName</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> Long id, <span class=\"meta\">@Param(&quot;name&quot;)</span> String name)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-Delete-注解\"><a href=\"#使用-Delete-注解\" class=\"headerlink\" title=\"使用 @Delete 注解\"></a>使用 <code>@Delete</code> 注解</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Delete(&quot;DELETE FROM user WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">deleteUserById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-XML-配置文件编写自定义-SQL\"><a href=\"#使用-XML-配置文件编写自定义-SQL\" class=\"headerlink\" title=\"使用 XML 配置文件编写自定义 SQL\"></a>使用 XML 配置文件编写自定义 SQL</h4><p>在 <code>resources/mapper</code> 目录下创建一个 <code>UserMapper.xml</code> 文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectUsersByStatus&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.example.entity.User&quot;</span>&gt;</span></span><br><span class=\"line\">        SELECT * FROM user WHERE status = #&#123;status&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertUser&quot;</span>&gt;</span></span><br><span class=\"line\">        INSERT INTO user(name, age, email) VALUES(#&#123;name&#125;, #&#123;age&#125;, #&#123;email&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateUserName&quot;</span>&gt;</span></span><br><span class=\"line\">        UPDATE user SET name = #&#123;name&#125; WHERE id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteUserById&quot;</span>&gt;</span></span><br><span class=\"line\">        DELETE FROM user WHERE id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 Mapper 接口中引用这些方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">selectUsersByStatus</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;status&quot;)</span> <span class=\"type\">int</span> status)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insertUser</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;name&quot;)</span> String name, <span class=\"meta\">@Param(&quot;age&quot;)</span> <span class=\"type\">int</span> age, <span class=\"meta\">@Param(&quot;email&quot;)</span> String email)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">updateUserName</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> Long id, <span class=\"meta\">@Param(&quot;name&quot;)</span> String name)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">deleteUserById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分页器\"><a href=\"#分页器\" class=\"headerlink\" title=\"分页器\"></a>分页器</h3><h4 id=\"配置分页插件\"><a href=\"#配置分页插件\" class=\"headerlink\" title=\"配置分页插件\"></a>配置分页插件</h4><p>创建一个配置类来配置分页插件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisPlusConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PaginationInterceptor <span class=\"title function_\">paginationInterceptor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PaginationInterceptor</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分页查询示例\"><a href=\"#分页查询示例\" class=\"headerlink\" title=\"分页查询示例\"></a>分页查询示例</h3><p>假设我们有一个用户表 <code>user</code>，我们需要对用户数据进行分页查询。以下是具体实现步骤。</p>\n<h4 id=\"定义实体类\"><a href=\"#定义实体类\" class=\"headerlink\" title=\"定义实体类\"></a>定义实体类</h4><p>定义一个用户实体类 <code>User</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义-Mapper-接口\"><a href=\"#定义-Mapper-接口\" class=\"headerlink\" title=\"定义 Mapper 接口\"></a>定义 Mapper 接口</h4><p>在 Mapper 接口中继承 <code>BaseMapper</code>，MyBatis-Plus 会自动生成常用的 CRUD 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Service-层实现分页查询\"><a href=\"#Service-层实现分页查询\" class=\"headerlink\" title=\"Service 层实现分页查询\"></a>Service 层实现分页查询</h4><p>在 Service 层中实现分页查询逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(<span class=\"type\">int</span> currentPage, <span class=\"type\">int</span> pageSize)</span> &#123;</span><br><span class=\"line\">        Page&lt;User&gt; page = <span class=\"keyword\">new</span> <span class=\"title class_\">Page</span>&lt;&gt;(currentPage, pageSize);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.selectPage(page, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Controller-层调用分页查询\"><a href=\"#Controller-层调用分页查询\" class=\"headerlink\" title=\"Controller 层调用分页查询\"></a>Controller 层调用分页查询</h4><p>在 Controller 层中调用分页查询：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/users&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/page&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IPage&lt;User&gt; <span class=\"title function_\">getUsersPage</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> <span class=\"type\">int</span> currentPage, <span class=\"meta\">@RequestParam</span> <span class=\"type\">int</span> pageSize)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.getUsersPage(currentPage, pageSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分页查询示例说明\"><a href=\"#分页查询示例说明\" class=\"headerlink\" title=\"分页查询示例说明\"></a>分页查询示例说明</h3><ol>\n<li><strong>配置分页插件</strong>： 在 <code>MybatisPlusConfig</code> 类中，通过 <code>PaginationInterceptor</code> 配置分页插件，使其在项目中生效。</li>\n<li><strong>定义实体类</strong>： 在 <code>User</code> 类中使用 <code>@TableName</code> 注解指定数据库表名，使用 <code>@TableId</code> 注解指定主键。</li>\n<li><strong>定义 Mapper 接口</strong>： 在 <code>UserMapper</code> 接口中继承 <code>BaseMapper&lt;User&gt;</code>，使 MyBatis-Plus 提供的 CRUD 方法可用。</li>\n<li><strong>Service 层实现分页查询</strong>： 在 <code>UserService</code> 类中，使用 <code>Page&lt;User&gt;</code> 对象封装分页参数，通过 <code>userMapper.selectPage(page, null)</code> 方法执行分页查询。</li>\n<li><strong>Controller 层调用分页查询</strong>： 在 <code>UserController</code> 类中，通过 <code>UserService</code> 调用分页查询方法，并通过 RESTful API 返回分页结果。</li>\n</ol>\n"},{"title":"一、常用的 MySQL 命令示例","date":"2024-07-31T14:32:50.000Z","_content":"### 一、常用的 MySQL 命令示例\n\n1. **SELECT** 用于查询数据\n\n   ```sql\n   SELECT id, name FROM users;\n   ```\n\n2. **WHERE** 查询数据时给定条件筛选\n\n   ```sql\n   SELECT * FROM users WHERE id >= 1;\n   ```\n\n3. **DISTINCT** 去掉重复值\n\n   ```sql\n   SELECT DISTINCT name FROM users;\n   ```\n\n4. **AND, OR, NOT** 逻辑操作符\n\n   ```sql\n   SELECT * FROM users WHERE id >= 1 AND name = 'Alice';\n   ```\n\n5. **IN** 查询多个数据\n\n   ```sql\n   SELECT * FROM users WHERE id IN (1, 2, 3);\n   ```\n\n6. **BETWEEN** 查询某个范围的数据\n\n   ```sql\n   SELECT * FROM users WHERE id BETWEEN 1 AND 5;\n   ```\n\n7. **LIKE** 模糊查询\n\n   ```sql\n   SELECT * FROM users WHERE name LIKE 'A%';\n   ```\n\n8. **REGEXP** 通过正则表达式查找记录\n\n   ```sql\n   SELECT * FROM users WHERE name REGEXP 'A.*';\n   ```\n\n9. **GROUP BY** 结果集分组\n\n   ```sql\n   SELECT item_name, COUNT(*) AS total FROM orders GROUP BY item_name;\n   ```\n\n10. **ORDER BY** 排序结果集\n\n    ```sql\n    SELECT * FROM users ORDER BY id;\n    ```\n\n11. **LIMIT** 限定返回记录条数\n\n    ```sql\n    SELECT * FROM users LIMIT 10;\n    ```\n\n12. **JOIN** 连接查询\n\n    ```sql\n    SELECT users.name, orders.item_name \n    FROM users \n    INNER JOIN orders ON users.id = orders.user_id;\n    ```\n\n### 二、连表操作示例\n\n1. **INNER JOIN** 连接用户表和订单表，显示所有用户及其订单。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nINNER JOIN orders ON users.id = orders.user_id;\n```\n\n2. **LEFT JOIN** 连接用户表和订单表，显示所有用户及其订单（包括没有订单的用户）。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nLEFT JOIN orders ON users.id = orders.user_id;\n```\n\n3. **RIGHT JOIN** 连接用户表和订单表，显示所有订单及其用户（包括没有匹配用户的订单）。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nRIGHT JOIN orders ON users.id = orders.user_id;\n```\n\n4. **FULL JOIN**（在 MySQL 中可以使用 UNION ALL 模拟 FULL JOIN）显示所有用户及其订单（包括没有匹配的用户或订单）。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nLEFT JOIN orders ON users.id = orders.user_id\nUNION ALL\nSELECT users.name, orders.item_name, orders.price \nFROM users \nRIGHT JOIN orders ON users.id = orders.user_id\nWHERE users.id IS NULL;\n```\n\n5. **GROUP BY 和 HAVING** 查询每个用户的订单总金额，并筛选出总金额超过 200 的用户。\n\n```sql\nSELECT users.name, SUM(orders.price) AS total_spent \nFROM users \nINNER JOIN orders ON users.id = orders.user_id \nGROUP BY users.name \nHAVING total_spent > 200;\n```\n\n6. **ORDER BY** 按用户姓名和订单价格排序。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nINNER JOIN orders ON users.id = orders.user_id \nORDER BY users.name, orders.price DESC;\n```\n\n7. **LIMIT** 只显示前 5 个订单。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nINNER JOIN orders ON users.id = orders.user_id \nORDER BY orders.price DESC \nLIMIT 5;\n```\n\n### 三、锁的概念和示例\n\n#### 1.共享锁（SHARED LOCK）\n\n允许多个事务同时读取数据，但不能进行修改。\n\n```sql\nSELECT * FROM orders WITH (HOLDLOCK);\n```\n\n**共享锁示例**\n\n假设有两个事务T1和T2，都想读取同一行数据：\n\n- T1获取共享锁，读取数据。\n- T2获取共享锁，读取数据。\n\n在这种情况下，两个事务可以同时读取数据，但在它们持有共享锁期间，其他事务不能对数据进行修改。\n\n#### 2.排他锁（EXCLUSIVE LOCK）\n\n允许事务读取和修改数据，当持有独占锁时，其他事务无法读取锁住的数据。\n\n```sql\nUPDATE orders SET price = 99.0 WHERE id = 1;\n```\n\n**排他锁示例**\n\n* T1获取排他锁，读取并修改数据。\n\n* T2尝试获取排他锁，但必须等待T1释放锁后才能继续。\n\n在这种情况下，只有一个事务可以同时对数据进行修改，防止并发修改导致的数据不一致问题。\n\n#### 3.更新锁（UPDATE LOCK）\n\n用于处理事务先读取数据后进行更新操作，防止死锁。\n\n```sql\nSELECT * FROM orders WHERE id = 1 FOR UPDATE;\n```\n\n**更新锁示例**\n\n假设有事务T1和T2都要读取并修改同一行数据，流程如下：\n\n1. **T1获取更新锁**：\n   - T1: 获取更新锁，读取数据。\n   - T2: 尝试获取更新锁，被阻塞；可以获取共享锁，读取数据。\n2. **T1准备修改数据**：\n   - T1: 将更新锁升级为独占锁，进行数据修改。\n   - T2: 仍然阻塞，等待T1释放锁。\n3. **T1完成修改并释放锁**：\n   - T1: 完成修改，释放独占锁。\n   - T2: 获取更新锁，读取数据，并准备修改。\n\n#### 4.行级锁（Row-Level Lock）\n\n行级锁用于锁定特定行，在执行更新操作时常用。这样可以避免其他事务同时修改同一行。\n\n```sql\n-- 锁定特定行\nUPDATE orders SET price = 99.99 WHERE id = 1 AND user_id = 1 LOCK IN SHARE MODE;\n```\n\n#### 5.页级锁（Page-Level Lock）\n\n页级锁用于锁定包含多行数据的页，这种锁在某些情况下可以提高性能，但可能会导致锁争用。\n\n```sql\n-- MySQL 不支持直接的页级锁，下面的例子是逻辑上的演示\nSELECT * FROM orders WHERE id BETWEEN 1 AND 10 LOCK IN SHARE MODE;\n```\n\n#### 6.表级锁（Table-Level Lock）\n\n表级锁用于锁定整个表，当需要对整个表进行操作时使用。例如，进行批量更新时。\n\n```sql\n-- 锁定整个表以防止其他事务访问\nLOCK TABLES orders WRITE;\n\n-- 执行批量更新\nUPDATE orders SET price = price * 1.1;\n\n-- 释放表锁\nUNLOCK TABLES;\n```\n\n#### 7.意向锁（Intention Lock）\n\n意向锁用于在多级锁定中标记意图，避免锁冲突。常见的意向锁有意向共享锁（IS）和意向排他锁（IX）。\n\n```sql\n-- MySQL 自动处理意向锁，无需手动设置\n-- 以下为逻辑示例，展示意向锁的工作原理\n\n-- 事务 1 获取意向排他锁（IX）\nSTART TRANSACTION;\nSELECT * FROM orders WHERE user_id = 1 FOR UPDATE;\n\n-- 事务 2 获取意向共享锁（IS）\nSTART TRANSACTION;\nSELECT * FROM orders WHERE user_id = 2 LOCK IN SHARE MODE;\n\n-- 事务 1 和事务 2 可以同时执行，因为意向锁不冲突\n```\n\n#### 8.自定义锁（User-Defined Lock）\n\nMySQL 提供 `GET_LOCK` 和 `RELEASE_LOCK` 函数，用于实现自定义锁。这对于需要在应用层实现复杂锁定逻辑时很有用。\n\n```sql\n-- 获取自定义锁\nSELECT GET_LOCK('my_lock', 10);\n\n-- 执行操作\nUPDATE orders SET price = 99.99 WHERE id = 1;\n\n-- 释放自定义锁\nSELECT RELEASE_LOCK('my_lock');\n```\n\nMySQL的事务机制提供了一种确保数据库操作的可靠性和一致性的方法。事务是一组原子操作，要么全部成功，要么全部失败。MySQL支持事务的存储引擎主要是InnoDB。以下是关于MySQL事务的详细介绍。\n\n### 四、事务的四大特性（ACID）\n\n1. **原子性（Atomicity）**：事务中的所有操作要么全部完成，要么全部不完成。任何一个操作失败都会导致整个事务的失败，已执行的操作会被回滚到初始状态。\n2. **一致性（Consistency）**：事务执行前后，数据库的状态必须保持一致。数据从一种一致状态变为另一种一致状态。\n3. **隔离性（Isolation）**：一个事务的执行不能被其他事务干扰。不同事务之间的操作是相互隔离的。\n4. **持久性（Durability）**：一旦事务提交，其结果就永久保存，即使数据库发生故障。\n\n#### 事务的基本操作\n\n在MySQL中，可以通过以下SQL命令来管理事务：\n\n- `START TRANSACTION`：开始一个新的事务。\n- `COMMIT`：提交事务，保存所有更改。\n- `ROLLBACK`：回滚事务，撤销所有更改。\n\n#### 示例\n\n以下是一个简单的事务操作示例：\n\n```sql\n-- 开始事务\nSTART TRANSACTION;\n\n-- 执行一些数据库操作\nINSERT INTO accounts (account_id, balance) VALUES (1, 1000);\nUPDATE accounts SET balance = balance - 100 WHERE account_id = 1;\n\n-- 提交事务\nCOMMIT;\n```\n\n如果在执行过程中发生错误，可以使用 `ROLLBACK` 撤销更改：\n\n```sql\n-- 开始事务\nSTART TRANSACTION;\n\n-- 执行一些数据库操作\nINSERT INTO accounts (account_id, balance) VALUES (1, 1000);\nUPDATE accounts SET balance = balance - 100 WHERE account_id = 1;\n\n-- 如果发生错误，回滚事务\nROLLBACK;\n```\n\n### 五、索引\n\nMySQL中的索引是用于提高查询速度的数据结构。索引类似于书籍的目录，通过索引可以快速定位数据，而不需要扫描整个表。下面是关于MySQL中索引的详细介绍：\n\n#### 索引的类型\n\n1. **主键索引（Primary Key Index）**：\n\n   - 每个表只能有一个主键索引。\n   - 主键索引是一种唯一索引，不允许重复和NULL值。\n   - 创建主键时，数据库会自动创建主键索引。\n\n   ```sql\n   CREATE TABLE users (\n       id INT PRIMARY KEY,\n       name VARCHAR(100)\n   );\n   ```\n\n2. **唯一索引（Unique Index）**：\n\n   - 唯一索引不允许两行具有相同的索引值。\n   - 一个表可以有多个唯一索引。\n\n   ```sql\n   CREATE UNIQUE INDEX idx_email ON users (email);\n   ```\n\n3. **普通索引（Index）**：\n\n   - 普通索引允许重复和NULL值。\n   - 用于加速数据查询，但不会强制唯一性。\n\n   ```sql\n   CREATE INDEX idx_name ON users (name);\n   ```\n\n4. **全文索引（Fulltext Index）**：\n\n   - 用于全文搜索，适用于较大的文本字段。\n   - 主要用于`CHAR`、`VARCHAR`和`TEXT`类型的列。\n\n   ```sql\n   CREATE FULLTEXT INDEX idx_content ON articles (content);\n   ```\n\n5. **组合索引（Composite Index）**：\n\n   - 由多个列组合而成的索引，用于多列的查询优化。\n   - 可以部分匹配列，提高查询效率。\n\n   ```sql\n   CREATE INDEX idx_name_email ON users (name, email);\n   ```\n\n#### 索引的创建与删除\n\n**创建索引**：\n\n```sql\n-- 创建普通索引\nCREATE INDEX idx_name ON users (name);\n\n-- 创建唯一索引\nCREATE UNIQUE INDEX idx_email ON users (email);\n\n-- 创建全文索引\nCREATE FULLTEXT INDEX idx_content ON articles (content);\n\n-- 创建组合索引\nCREATE INDEX idx_name_email ON users (name, email);\n```\n\n**删除索引**：\n\n```sql\n-- 删除索引\nDROP INDEX idx_name ON users;\n```\n\n**在创建表时定义索引**：\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    content TEXT,\n    FULLTEXT (content),\n    UNIQUE (email),\n    INDEX idx_name_email (name, email)\n)\n```","source":"_posts/MySQL 常用知识点.md","raw":"---\ntitle: 一、常用的 MySQL 命令示例\ndate: 2024-07-31 22:32:50\ntags: mysql\n---\n### 一、常用的 MySQL 命令示例\n\n1. **SELECT** 用于查询数据\n\n   ```sql\n   SELECT id, name FROM users;\n   ```\n\n2. **WHERE** 查询数据时给定条件筛选\n\n   ```sql\n   SELECT * FROM users WHERE id >= 1;\n   ```\n\n3. **DISTINCT** 去掉重复值\n\n   ```sql\n   SELECT DISTINCT name FROM users;\n   ```\n\n4. **AND, OR, NOT** 逻辑操作符\n\n   ```sql\n   SELECT * FROM users WHERE id >= 1 AND name = 'Alice';\n   ```\n\n5. **IN** 查询多个数据\n\n   ```sql\n   SELECT * FROM users WHERE id IN (1, 2, 3);\n   ```\n\n6. **BETWEEN** 查询某个范围的数据\n\n   ```sql\n   SELECT * FROM users WHERE id BETWEEN 1 AND 5;\n   ```\n\n7. **LIKE** 模糊查询\n\n   ```sql\n   SELECT * FROM users WHERE name LIKE 'A%';\n   ```\n\n8. **REGEXP** 通过正则表达式查找记录\n\n   ```sql\n   SELECT * FROM users WHERE name REGEXP 'A.*';\n   ```\n\n9. **GROUP BY** 结果集分组\n\n   ```sql\n   SELECT item_name, COUNT(*) AS total FROM orders GROUP BY item_name;\n   ```\n\n10. **ORDER BY** 排序结果集\n\n    ```sql\n    SELECT * FROM users ORDER BY id;\n    ```\n\n11. **LIMIT** 限定返回记录条数\n\n    ```sql\n    SELECT * FROM users LIMIT 10;\n    ```\n\n12. **JOIN** 连接查询\n\n    ```sql\n    SELECT users.name, orders.item_name \n    FROM users \n    INNER JOIN orders ON users.id = orders.user_id;\n    ```\n\n### 二、连表操作示例\n\n1. **INNER JOIN** 连接用户表和订单表，显示所有用户及其订单。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nINNER JOIN orders ON users.id = orders.user_id;\n```\n\n2. **LEFT JOIN** 连接用户表和订单表，显示所有用户及其订单（包括没有订单的用户）。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nLEFT JOIN orders ON users.id = orders.user_id;\n```\n\n3. **RIGHT JOIN** 连接用户表和订单表，显示所有订单及其用户（包括没有匹配用户的订单）。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nRIGHT JOIN orders ON users.id = orders.user_id;\n```\n\n4. **FULL JOIN**（在 MySQL 中可以使用 UNION ALL 模拟 FULL JOIN）显示所有用户及其订单（包括没有匹配的用户或订单）。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nLEFT JOIN orders ON users.id = orders.user_id\nUNION ALL\nSELECT users.name, orders.item_name, orders.price \nFROM users \nRIGHT JOIN orders ON users.id = orders.user_id\nWHERE users.id IS NULL;\n```\n\n5. **GROUP BY 和 HAVING** 查询每个用户的订单总金额，并筛选出总金额超过 200 的用户。\n\n```sql\nSELECT users.name, SUM(orders.price) AS total_spent \nFROM users \nINNER JOIN orders ON users.id = orders.user_id \nGROUP BY users.name \nHAVING total_spent > 200;\n```\n\n6. **ORDER BY** 按用户姓名和订单价格排序。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nINNER JOIN orders ON users.id = orders.user_id \nORDER BY users.name, orders.price DESC;\n```\n\n7. **LIMIT** 只显示前 5 个订单。\n\n```sql\nSELECT users.name, orders.item_name, orders.price \nFROM users \nINNER JOIN orders ON users.id = orders.user_id \nORDER BY orders.price DESC \nLIMIT 5;\n```\n\n### 三、锁的概念和示例\n\n#### 1.共享锁（SHARED LOCK）\n\n允许多个事务同时读取数据，但不能进行修改。\n\n```sql\nSELECT * FROM orders WITH (HOLDLOCK);\n```\n\n**共享锁示例**\n\n假设有两个事务T1和T2，都想读取同一行数据：\n\n- T1获取共享锁，读取数据。\n- T2获取共享锁，读取数据。\n\n在这种情况下，两个事务可以同时读取数据，但在它们持有共享锁期间，其他事务不能对数据进行修改。\n\n#### 2.排他锁（EXCLUSIVE LOCK）\n\n允许事务读取和修改数据，当持有独占锁时，其他事务无法读取锁住的数据。\n\n```sql\nUPDATE orders SET price = 99.0 WHERE id = 1;\n```\n\n**排他锁示例**\n\n* T1获取排他锁，读取并修改数据。\n\n* T2尝试获取排他锁，但必须等待T1释放锁后才能继续。\n\n在这种情况下，只有一个事务可以同时对数据进行修改，防止并发修改导致的数据不一致问题。\n\n#### 3.更新锁（UPDATE LOCK）\n\n用于处理事务先读取数据后进行更新操作，防止死锁。\n\n```sql\nSELECT * FROM orders WHERE id = 1 FOR UPDATE;\n```\n\n**更新锁示例**\n\n假设有事务T1和T2都要读取并修改同一行数据，流程如下：\n\n1. **T1获取更新锁**：\n   - T1: 获取更新锁，读取数据。\n   - T2: 尝试获取更新锁，被阻塞；可以获取共享锁，读取数据。\n2. **T1准备修改数据**：\n   - T1: 将更新锁升级为独占锁，进行数据修改。\n   - T2: 仍然阻塞，等待T1释放锁。\n3. **T1完成修改并释放锁**：\n   - T1: 完成修改，释放独占锁。\n   - T2: 获取更新锁，读取数据，并准备修改。\n\n#### 4.行级锁（Row-Level Lock）\n\n行级锁用于锁定特定行，在执行更新操作时常用。这样可以避免其他事务同时修改同一行。\n\n```sql\n-- 锁定特定行\nUPDATE orders SET price = 99.99 WHERE id = 1 AND user_id = 1 LOCK IN SHARE MODE;\n```\n\n#### 5.页级锁（Page-Level Lock）\n\n页级锁用于锁定包含多行数据的页，这种锁在某些情况下可以提高性能，但可能会导致锁争用。\n\n```sql\n-- MySQL 不支持直接的页级锁，下面的例子是逻辑上的演示\nSELECT * FROM orders WHERE id BETWEEN 1 AND 10 LOCK IN SHARE MODE;\n```\n\n#### 6.表级锁（Table-Level Lock）\n\n表级锁用于锁定整个表，当需要对整个表进行操作时使用。例如，进行批量更新时。\n\n```sql\n-- 锁定整个表以防止其他事务访问\nLOCK TABLES orders WRITE;\n\n-- 执行批量更新\nUPDATE orders SET price = price * 1.1;\n\n-- 释放表锁\nUNLOCK TABLES;\n```\n\n#### 7.意向锁（Intention Lock）\n\n意向锁用于在多级锁定中标记意图，避免锁冲突。常见的意向锁有意向共享锁（IS）和意向排他锁（IX）。\n\n```sql\n-- MySQL 自动处理意向锁，无需手动设置\n-- 以下为逻辑示例，展示意向锁的工作原理\n\n-- 事务 1 获取意向排他锁（IX）\nSTART TRANSACTION;\nSELECT * FROM orders WHERE user_id = 1 FOR UPDATE;\n\n-- 事务 2 获取意向共享锁（IS）\nSTART TRANSACTION;\nSELECT * FROM orders WHERE user_id = 2 LOCK IN SHARE MODE;\n\n-- 事务 1 和事务 2 可以同时执行，因为意向锁不冲突\n```\n\n#### 8.自定义锁（User-Defined Lock）\n\nMySQL 提供 `GET_LOCK` 和 `RELEASE_LOCK` 函数，用于实现自定义锁。这对于需要在应用层实现复杂锁定逻辑时很有用。\n\n```sql\n-- 获取自定义锁\nSELECT GET_LOCK('my_lock', 10);\n\n-- 执行操作\nUPDATE orders SET price = 99.99 WHERE id = 1;\n\n-- 释放自定义锁\nSELECT RELEASE_LOCK('my_lock');\n```\n\nMySQL的事务机制提供了一种确保数据库操作的可靠性和一致性的方法。事务是一组原子操作，要么全部成功，要么全部失败。MySQL支持事务的存储引擎主要是InnoDB。以下是关于MySQL事务的详细介绍。\n\n### 四、事务的四大特性（ACID）\n\n1. **原子性（Atomicity）**：事务中的所有操作要么全部完成，要么全部不完成。任何一个操作失败都会导致整个事务的失败，已执行的操作会被回滚到初始状态。\n2. **一致性（Consistency）**：事务执行前后，数据库的状态必须保持一致。数据从一种一致状态变为另一种一致状态。\n3. **隔离性（Isolation）**：一个事务的执行不能被其他事务干扰。不同事务之间的操作是相互隔离的。\n4. **持久性（Durability）**：一旦事务提交，其结果就永久保存，即使数据库发生故障。\n\n#### 事务的基本操作\n\n在MySQL中，可以通过以下SQL命令来管理事务：\n\n- `START TRANSACTION`：开始一个新的事务。\n- `COMMIT`：提交事务，保存所有更改。\n- `ROLLBACK`：回滚事务，撤销所有更改。\n\n#### 示例\n\n以下是一个简单的事务操作示例：\n\n```sql\n-- 开始事务\nSTART TRANSACTION;\n\n-- 执行一些数据库操作\nINSERT INTO accounts (account_id, balance) VALUES (1, 1000);\nUPDATE accounts SET balance = balance - 100 WHERE account_id = 1;\n\n-- 提交事务\nCOMMIT;\n```\n\n如果在执行过程中发生错误，可以使用 `ROLLBACK` 撤销更改：\n\n```sql\n-- 开始事务\nSTART TRANSACTION;\n\n-- 执行一些数据库操作\nINSERT INTO accounts (account_id, balance) VALUES (1, 1000);\nUPDATE accounts SET balance = balance - 100 WHERE account_id = 1;\n\n-- 如果发生错误，回滚事务\nROLLBACK;\n```\n\n### 五、索引\n\nMySQL中的索引是用于提高查询速度的数据结构。索引类似于书籍的目录，通过索引可以快速定位数据，而不需要扫描整个表。下面是关于MySQL中索引的详细介绍：\n\n#### 索引的类型\n\n1. **主键索引（Primary Key Index）**：\n\n   - 每个表只能有一个主键索引。\n   - 主键索引是一种唯一索引，不允许重复和NULL值。\n   - 创建主键时，数据库会自动创建主键索引。\n\n   ```sql\n   CREATE TABLE users (\n       id INT PRIMARY KEY,\n       name VARCHAR(100)\n   );\n   ```\n\n2. **唯一索引（Unique Index）**：\n\n   - 唯一索引不允许两行具有相同的索引值。\n   - 一个表可以有多个唯一索引。\n\n   ```sql\n   CREATE UNIQUE INDEX idx_email ON users (email);\n   ```\n\n3. **普通索引（Index）**：\n\n   - 普通索引允许重复和NULL值。\n   - 用于加速数据查询，但不会强制唯一性。\n\n   ```sql\n   CREATE INDEX idx_name ON users (name);\n   ```\n\n4. **全文索引（Fulltext Index）**：\n\n   - 用于全文搜索，适用于较大的文本字段。\n   - 主要用于`CHAR`、`VARCHAR`和`TEXT`类型的列。\n\n   ```sql\n   CREATE FULLTEXT INDEX idx_content ON articles (content);\n   ```\n\n5. **组合索引（Composite Index）**：\n\n   - 由多个列组合而成的索引，用于多列的查询优化。\n   - 可以部分匹配列，提高查询效率。\n\n   ```sql\n   CREATE INDEX idx_name_email ON users (name, email);\n   ```\n\n#### 索引的创建与删除\n\n**创建索引**：\n\n```sql\n-- 创建普通索引\nCREATE INDEX idx_name ON users (name);\n\n-- 创建唯一索引\nCREATE UNIQUE INDEX idx_email ON users (email);\n\n-- 创建全文索引\nCREATE FULLTEXT INDEX idx_content ON articles (content);\n\n-- 创建组合索引\nCREATE INDEX idx_name_email ON users (name, email);\n```\n\n**删除索引**：\n\n```sql\n-- 删除索引\nDROP INDEX idx_name ON users;\n```\n\n**在创建表时定义索引**：\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    content TEXT,\n    FULLTEXT (content),\n    UNIQUE (email),\n    INDEX idx_name_email (name, email)\n)\n```","slug":"MySQL 常用知识点","published":1,"updated":"2024-07-31T14:32:18.086Z","comments":1,"layout":"post","photos":[],"_id":"clz9yzmno0001pwu4441m9cwe","content":"<h3 id=\"一、常用的-MySQL-命令示例\"><a href=\"#一、常用的-MySQL-命令示例\" class=\"headerlink\" title=\"一、常用的 MySQL 命令示例\"></a>一、常用的 MySQL 命令示例</h3><ol>\n<li><p><strong>SELECT</strong> 用于查询数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> id, name <span class=\"keyword\">FROM</span> users;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>WHERE</strong> 查询数据时给定条件筛选</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id <span class=\"operator\">&gt;=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>DISTINCT</strong> 去掉重复值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> name <span class=\"keyword\">FROM</span> users;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>AND, OR, NOT</strong> 逻辑操作符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id <span class=\"operator\">&gt;=</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Alice&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>IN</strong> 查询多个数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>BETWEEN</strong> 查询某个范围的数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id <span class=\"keyword\">BETWEEN</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>LIKE</strong> 模糊查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;A%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>REGEXP</strong> 通过正则表达式查找记录</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> name REGEXP <span class=\"string\">&#x27;A.*&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>GROUP BY</strong> 结果集分组</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> item_name, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> total <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> item_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ORDER BY</strong> 排序结果集</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> id;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>LIMIT</strong> 限定返回记录条数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users LIMIT <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>JOIN</strong> 连接查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"二、连表操作示例\"><a href=\"#二、连表操作示例\" class=\"headerlink\" title=\"二、连表操作示例\"></a>二、连表操作示例</h3><ol>\n<li><strong>INNER JOIN</strong> 连接用户表和订单表，显示所有用户及其订单。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>LEFT JOIN</strong> 连接用户表和订单表，显示所有用户及其订单（包括没有订单的用户）。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>RIGHT JOIN</strong> 连接用户表和订单表，显示所有订单及其用户（包括没有匹配用户的订单）。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>FULL JOIN</strong>（在 MySQL 中可以使用 UNION ALL 模拟 FULL JOIN）显示所有用户及其订单（包括没有匹配的用户或订单）。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> users.id <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>GROUP BY 和 HAVING</strong> 查询每个用户的订单总金额，并筛选出总金额超过 200 的用户。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, <span class=\"built_in\">SUM</span>(orders.price) <span class=\"keyword\">AS</span> total_spent </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> users.name </span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> total_spent <span class=\"operator\">&gt;</span> <span class=\"number\">200</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><strong>ORDER BY</strong> 按用户姓名和订单价格排序。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> users.name, orders.price <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><strong>LIMIT</strong> 只显示前 5 个订单。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> orders.price <span class=\"keyword\">DESC</span> </span><br><span class=\"line\">LIMIT <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、锁的概念和示例\"><a href=\"#三、锁的概念和示例\" class=\"headerlink\" title=\"三、锁的概念和示例\"></a>三、锁的概念和示例</h3><h4 id=\"1-共享锁（SHARED-LOCK）\"><a href=\"#1-共享锁（SHARED-LOCK）\" class=\"headerlink\" title=\"1.共享锁（SHARED LOCK）\"></a>1.共享锁（SHARED LOCK）</h4><p>允许多个事务同时读取数据，但不能进行修改。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WITH</span> (HOLDLOCK);</span><br></pre></td></tr></table></figure>\n\n<p><strong>共享锁示例</strong></p>\n<p>假设有两个事务T1和T2，都想读取同一行数据：</p>\n<ul>\n<li>T1获取共享锁，读取数据。</li>\n<li>T2获取共享锁，读取数据。</li>\n</ul>\n<p>在这种情况下，两个事务可以同时读取数据，但在它们持有共享锁期间，其他事务不能对数据进行修改。</p>\n<h4 id=\"2-排他锁（EXCLUSIVE-LOCK）\"><a href=\"#2-排他锁（EXCLUSIVE-LOCK）\" class=\"headerlink\" title=\"2.排他锁（EXCLUSIVE LOCK）\"></a>2.排他锁（EXCLUSIVE LOCK）</h4><p>允许事务读取和修改数据，当持有独占锁时，其他事务无法读取锁住的数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> orders <span class=\"keyword\">SET</span> price <span class=\"operator\">=</span> <span class=\"number\">99.0</span> <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>排他锁示例</strong></p>\n<ul>\n<li><p>T1获取排他锁，读取并修改数据。</p>\n</li>\n<li><p>T2尝试获取排他锁，但必须等待T1释放锁后才能继续。</p>\n</li>\n</ul>\n<p>在这种情况下，只有一个事务可以同时对数据进行修改，防止并发修改导致的数据不一致问题。</p>\n<h4 id=\"3-更新锁（UPDATE-LOCK）\"><a href=\"#3-更新锁（UPDATE-LOCK）\" class=\"headerlink\" title=\"3.更新锁（UPDATE LOCK）\"></a>3.更新锁（UPDATE LOCK）</h4><p>用于处理事务先读取数据后进行更新操作，防止死锁。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>更新锁示例</strong></p>\n<p>假设有事务T1和T2都要读取并修改同一行数据，流程如下：</p>\n<ol>\n<li><strong>T1获取更新锁</strong>：<ul>\n<li>T1: 获取更新锁，读取数据。</li>\n<li>T2: 尝试获取更新锁，被阻塞；可以获取共享锁，读取数据。</li>\n</ul>\n</li>\n<li><strong>T1准备修改数据</strong>：<ul>\n<li>T1: 将更新锁升级为独占锁，进行数据修改。</li>\n<li>T2: 仍然阻塞，等待T1释放锁。</li>\n</ul>\n</li>\n<li><strong>T1完成修改并释放锁</strong>：<ul>\n<li>T1: 完成修改，释放独占锁。</li>\n<li>T2: 获取更新锁，读取数据，并准备修改。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"4-行级锁（Row-Level-Lock）\"><a href=\"#4-行级锁（Row-Level-Lock）\" class=\"headerlink\" title=\"4.行级锁（Row-Level Lock）\"></a>4.行级锁（Row-Level Lock）</h4><p>行级锁用于锁定特定行，在执行更新操作时常用。这样可以避免其他事务同时修改同一行。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 锁定特定行</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> orders <span class=\"keyword\">SET</span> price <span class=\"operator\">=</span> <span class=\"number\">99.99</span> <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> user_id <span class=\"operator\">=</span> <span class=\"number\">1</span> LOCK <span class=\"keyword\">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-页级锁（Page-Level-Lock）\"><a href=\"#5-页级锁（Page-Level-Lock）\" class=\"headerlink\" title=\"5.页级锁（Page-Level Lock）\"></a>5.页级锁（Page-Level Lock）</h4><p>页级锁用于锁定包含多行数据的页，这种锁在某些情况下可以提高性能，但可能会导致锁争用。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MySQL 不支持直接的页级锁，下面的例子是逻辑上的演示</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> id <span class=\"keyword\">BETWEEN</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> <span class=\"number\">10</span> LOCK <span class=\"keyword\">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-表级锁（Table-Level-Lock）\"><a href=\"#6-表级锁（Table-Level-Lock）\" class=\"headerlink\" title=\"6.表级锁（Table-Level Lock）\"></a>6.表级锁（Table-Level Lock）</h4><p>表级锁用于锁定整个表，当需要对整个表进行操作时使用。例如，进行批量更新时。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 锁定整个表以防止其他事务访问</span></span><br><span class=\"line\">LOCK TABLES orders WRITE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行批量更新</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> orders <span class=\"keyword\">SET</span> price <span class=\"operator\">=</span> price <span class=\"operator\">*</span> <span class=\"number\">1.1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 释放表锁</span></span><br><span class=\"line\">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-意向锁（Intention-Lock）\"><a href=\"#7-意向锁（Intention-Lock）\" class=\"headerlink\" title=\"7.意向锁（Intention Lock）\"></a>7.意向锁（Intention Lock）</h4><p>意向锁用于在多级锁定中标记意图，避免锁冲突。常见的意向锁有意向共享锁（IS）和意向排他锁（IX）。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MySQL 自动处理意向锁，无需手动设置</span></span><br><span class=\"line\"><span class=\"comment\">-- 以下为逻辑示例，展示意向锁的工作原理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 事务 1 获取意向排他锁（IX）</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> user_id <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 事务 2 获取意向共享锁（IS）</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> user_id <span class=\"operator\">=</span> <span class=\"number\">2</span> LOCK <span class=\"keyword\">IN</span> SHARE MODE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 事务 1 和事务 2 可以同时执行，因为意向锁不冲突</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-自定义锁（User-Defined-Lock）\"><a href=\"#8-自定义锁（User-Defined-Lock）\" class=\"headerlink\" title=\"8.自定义锁（User-Defined Lock）\"></a>8.自定义锁（User-Defined Lock）</h4><p>MySQL 提供 <code>GET_LOCK</code> 和 <code>RELEASE_LOCK</code> 函数，用于实现自定义锁。这对于需要在应用层实现复杂锁定逻辑时很有用。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 获取自定义锁</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> GET_LOCK(<span class=\"string\">&#x27;my_lock&#x27;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行操作</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> orders <span class=\"keyword\">SET</span> price <span class=\"operator\">=</span> <span class=\"number\">99.99</span> <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 释放自定义锁</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> RELEASE_LOCK(<span class=\"string\">&#x27;my_lock&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>MySQL的事务机制提供了一种确保数据库操作的可靠性和一致性的方法。事务是一组原子操作，要么全部成功，要么全部失败。MySQL支持事务的存储引擎主要是InnoDB。以下是关于MySQL事务的详细介绍。</p>\n<h3 id=\"四、事务的四大特性（ACID）\"><a href=\"#四、事务的四大特性（ACID）\" class=\"headerlink\" title=\"四、事务的四大特性（ACID）\"></a>四、事务的四大特性（ACID）</h3><ol>\n<li><strong>原子性（Atomicity）</strong>：事务中的所有操作要么全部完成，要么全部不完成。任何一个操作失败都会导致整个事务的失败，已执行的操作会被回滚到初始状态。</li>\n<li><strong>一致性（Consistency）</strong>：事务执行前后，数据库的状态必须保持一致。数据从一种一致状态变为另一种一致状态。</li>\n<li><strong>隔离性（Isolation）</strong>：一个事务的执行不能被其他事务干扰。不同事务之间的操作是相互隔离的。</li>\n<li><strong>持久性（Durability）</strong>：一旦事务提交，其结果就永久保存，即使数据库发生故障。</li>\n</ol>\n<h4 id=\"事务的基本操作\"><a href=\"#事务的基本操作\" class=\"headerlink\" title=\"事务的基本操作\"></a>事务的基本操作</h4><p>在MySQL中，可以通过以下SQL命令来管理事务：</p>\n<ul>\n<li><code>START TRANSACTION</code>：开始一个新的事务。</li>\n<li><code>COMMIT</code>：提交事务，保存所有更改。</li>\n<li><code>ROLLBACK</code>：回滚事务，撤销所有更改。</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>以下是一个简单的事务操作示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开始事务</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行一些数据库操作</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> accounts (account_id, balance) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> accounts <span class=\"keyword\">SET</span> balance <span class=\"operator\">=</span> balance <span class=\"operator\">-</span> <span class=\"number\">100</span> <span class=\"keyword\">WHERE</span> account_id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 提交事务</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果在执行过程中发生错误，可以使用 <code>ROLLBACK</code> 撤销更改：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开始事务</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行一些数据库操作</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> accounts (account_id, balance) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> accounts <span class=\"keyword\">SET</span> balance <span class=\"operator\">=</span> balance <span class=\"operator\">-</span> <span class=\"number\">100</span> <span class=\"keyword\">WHERE</span> account_id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 如果发生错误，回滚事务</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、索引\"><a href=\"#五、索引\" class=\"headerlink\" title=\"五、索引\"></a>五、索引</h3><p>MySQL中的索引是用于提高查询速度的数据结构。索引类似于书籍的目录，通过索引可以快速定位数据，而不需要扫描整个表。下面是关于MySQL中索引的详细介绍：</p>\n<h4 id=\"索引的类型\"><a href=\"#索引的类型\" class=\"headerlink\" title=\"索引的类型\"></a>索引的类型</h4><ol>\n<li><p><strong>主键索引（Primary Key Index）</strong>：</p>\n<ul>\n<li>每个表只能有一个主键索引。</li>\n<li>主键索引是一种唯一索引，不允许重复和NULL值。</li>\n<li>创建主键时，数据库会自动创建主键索引。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> users (</span><br><span class=\"line\">    id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    name <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>唯一索引（Unique Index）</strong>：</p>\n<ul>\n<li>唯一索引不允许两行具有相同的索引值。</li>\n<li>一个表可以有多个唯一索引。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX idx_email <span class=\"keyword\">ON</span> users (email);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>普通索引（Index）</strong>：</p>\n<ul>\n<li>普通索引允许重复和NULL值。</li>\n<li>用于加速数据查询，但不会强制唯一性。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX idx_name <span class=\"keyword\">ON</span> users (name);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>全文索引（Fulltext Index）</strong>：</p>\n<ul>\n<li>用于全文搜索，适用于较大的文本字段。</li>\n<li>主要用于<code>CHAR</code>、<code>VARCHAR</code>和<code>TEXT</code>类型的列。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> FULLTEXT INDEX idx_content <span class=\"keyword\">ON</span> articles (content);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>组合索引（Composite Index）</strong>：</p>\n<ul>\n<li>由多个列组合而成的索引，用于多列的查询优化。</li>\n<li>可以部分匹配列，提高查询效率。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX idx_name_email <span class=\"keyword\">ON</span> users (name, email);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"索引的创建与删除\"><a href=\"#索引的创建与删除\" class=\"headerlink\" title=\"索引的创建与删除\"></a>索引的创建与删除</h4><p><strong>创建索引</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建普通索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX idx_name <span class=\"keyword\">ON</span> users (name);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建唯一索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX idx_email <span class=\"keyword\">ON</span> users (email);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建全文索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> FULLTEXT INDEX idx_content <span class=\"keyword\">ON</span> articles (content);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建组合索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX idx_name_email <span class=\"keyword\">ON</span> users (name, email);</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除索引</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX idx_name <span class=\"keyword\">ON</span> users;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在创建表时定义索引</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> users (</span><br><span class=\"line\">    id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    name <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">    email <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">    content TEXT,</span><br><span class=\"line\">    FULLTEXT (content),</span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> (email),</span><br><span class=\"line\">    INDEX idx_name_email (name, email)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"一、常用的-MySQL-命令示例\"><a href=\"#一、常用的-MySQL-命令示例\" class=\"headerlink\" title=\"一、常用的 MySQL 命令示例\"></a>一、常用的 MySQL 命令示例</h3><ol>\n<li><p><strong>SELECT</strong> 用于查询数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> id, name <span class=\"keyword\">FROM</span> users;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>WHERE</strong> 查询数据时给定条件筛选</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id <span class=\"operator\">&gt;=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>DISTINCT</strong> 去掉重复值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> name <span class=\"keyword\">FROM</span> users;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>AND, OR, NOT</strong> 逻辑操作符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id <span class=\"operator\">&gt;=</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Alice&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>IN</strong> 查询多个数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>BETWEEN</strong> 查询某个范围的数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id <span class=\"keyword\">BETWEEN</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>LIKE</strong> 模糊查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;A%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>REGEXP</strong> 通过正则表达式查找记录</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> name REGEXP <span class=\"string\">&#x27;A.*&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>GROUP BY</strong> 结果集分组</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> item_name, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> total <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> item_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ORDER BY</strong> 排序结果集</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> id;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>LIMIT</strong> 限定返回记录条数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users LIMIT <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>JOIN</strong> 连接查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"二、连表操作示例\"><a href=\"#二、连表操作示例\" class=\"headerlink\" title=\"二、连表操作示例\"></a>二、连表操作示例</h3><ol>\n<li><strong>INNER JOIN</strong> 连接用户表和订单表，显示所有用户及其订单。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>LEFT JOIN</strong> 连接用户表和订单表，显示所有用户及其订单（包括没有订单的用户）。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>RIGHT JOIN</strong> 连接用户表和订单表，显示所有订单及其用户（包括没有匹配用户的订单）。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>FULL JOIN</strong>（在 MySQL 中可以使用 UNION ALL 模拟 FULL JOIN）显示所有用户及其订单（包括没有匹配的用户或订单）。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> users.id <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>GROUP BY 和 HAVING</strong> 查询每个用户的订单总金额，并筛选出总金额超过 200 的用户。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, <span class=\"built_in\">SUM</span>(orders.price) <span class=\"keyword\">AS</span> total_spent </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> users.name </span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> total_spent <span class=\"operator\">&gt;</span> <span class=\"number\">200</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><strong>ORDER BY</strong> 按用户姓名和订单价格排序。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> users.name, orders.price <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><strong>LIMIT</strong> 只显示前 5 个订单。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> users.name, orders.item_name, orders.price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> users </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> users.id <span class=\"operator\">=</span> orders.user_id </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> orders.price <span class=\"keyword\">DESC</span> </span><br><span class=\"line\">LIMIT <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、锁的概念和示例\"><a href=\"#三、锁的概念和示例\" class=\"headerlink\" title=\"三、锁的概念和示例\"></a>三、锁的概念和示例</h3><h4 id=\"1-共享锁（SHARED-LOCK）\"><a href=\"#1-共享锁（SHARED-LOCK）\" class=\"headerlink\" title=\"1.共享锁（SHARED LOCK）\"></a>1.共享锁（SHARED LOCK）</h4><p>允许多个事务同时读取数据，但不能进行修改。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WITH</span> (HOLDLOCK);</span><br></pre></td></tr></table></figure>\n\n<p><strong>共享锁示例</strong></p>\n<p>假设有两个事务T1和T2，都想读取同一行数据：</p>\n<ul>\n<li>T1获取共享锁，读取数据。</li>\n<li>T2获取共享锁，读取数据。</li>\n</ul>\n<p>在这种情况下，两个事务可以同时读取数据，但在它们持有共享锁期间，其他事务不能对数据进行修改。</p>\n<h4 id=\"2-排他锁（EXCLUSIVE-LOCK）\"><a href=\"#2-排他锁（EXCLUSIVE-LOCK）\" class=\"headerlink\" title=\"2.排他锁（EXCLUSIVE LOCK）\"></a>2.排他锁（EXCLUSIVE LOCK）</h4><p>允许事务读取和修改数据，当持有独占锁时，其他事务无法读取锁住的数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> orders <span class=\"keyword\">SET</span> price <span class=\"operator\">=</span> <span class=\"number\">99.0</span> <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>排他锁示例</strong></p>\n<ul>\n<li><p>T1获取排他锁，读取并修改数据。</p>\n</li>\n<li><p>T2尝试获取排他锁，但必须等待T1释放锁后才能继续。</p>\n</li>\n</ul>\n<p>在这种情况下，只有一个事务可以同时对数据进行修改，防止并发修改导致的数据不一致问题。</p>\n<h4 id=\"3-更新锁（UPDATE-LOCK）\"><a href=\"#3-更新锁（UPDATE-LOCK）\" class=\"headerlink\" title=\"3.更新锁（UPDATE LOCK）\"></a>3.更新锁（UPDATE LOCK）</h4><p>用于处理事务先读取数据后进行更新操作，防止死锁。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>更新锁示例</strong></p>\n<p>假设有事务T1和T2都要读取并修改同一行数据，流程如下：</p>\n<ol>\n<li><strong>T1获取更新锁</strong>：<ul>\n<li>T1: 获取更新锁，读取数据。</li>\n<li>T2: 尝试获取更新锁，被阻塞；可以获取共享锁，读取数据。</li>\n</ul>\n</li>\n<li><strong>T1准备修改数据</strong>：<ul>\n<li>T1: 将更新锁升级为独占锁，进行数据修改。</li>\n<li>T2: 仍然阻塞，等待T1释放锁。</li>\n</ul>\n</li>\n<li><strong>T1完成修改并释放锁</strong>：<ul>\n<li>T1: 完成修改，释放独占锁。</li>\n<li>T2: 获取更新锁，读取数据，并准备修改。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"4-行级锁（Row-Level-Lock）\"><a href=\"#4-行级锁（Row-Level-Lock）\" class=\"headerlink\" title=\"4.行级锁（Row-Level Lock）\"></a>4.行级锁（Row-Level Lock）</h4><p>行级锁用于锁定特定行，在执行更新操作时常用。这样可以避免其他事务同时修改同一行。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 锁定特定行</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> orders <span class=\"keyword\">SET</span> price <span class=\"operator\">=</span> <span class=\"number\">99.99</span> <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> user_id <span class=\"operator\">=</span> <span class=\"number\">1</span> LOCK <span class=\"keyword\">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-页级锁（Page-Level-Lock）\"><a href=\"#5-页级锁（Page-Level-Lock）\" class=\"headerlink\" title=\"5.页级锁（Page-Level Lock）\"></a>5.页级锁（Page-Level Lock）</h4><p>页级锁用于锁定包含多行数据的页，这种锁在某些情况下可以提高性能，但可能会导致锁争用。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MySQL 不支持直接的页级锁，下面的例子是逻辑上的演示</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> id <span class=\"keyword\">BETWEEN</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> <span class=\"number\">10</span> LOCK <span class=\"keyword\">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-表级锁（Table-Level-Lock）\"><a href=\"#6-表级锁（Table-Level-Lock）\" class=\"headerlink\" title=\"6.表级锁（Table-Level Lock）\"></a>6.表级锁（Table-Level Lock）</h4><p>表级锁用于锁定整个表，当需要对整个表进行操作时使用。例如，进行批量更新时。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 锁定整个表以防止其他事务访问</span></span><br><span class=\"line\">LOCK TABLES orders WRITE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行批量更新</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> orders <span class=\"keyword\">SET</span> price <span class=\"operator\">=</span> price <span class=\"operator\">*</span> <span class=\"number\">1.1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 释放表锁</span></span><br><span class=\"line\">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-意向锁（Intention-Lock）\"><a href=\"#7-意向锁（Intention-Lock）\" class=\"headerlink\" title=\"7.意向锁（Intention Lock）\"></a>7.意向锁（Intention Lock）</h4><p>意向锁用于在多级锁定中标记意图，避免锁冲突。常见的意向锁有意向共享锁（IS）和意向排他锁（IX）。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MySQL 自动处理意向锁，无需手动设置</span></span><br><span class=\"line\"><span class=\"comment\">-- 以下为逻辑示例，展示意向锁的工作原理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 事务 1 获取意向排他锁（IX）</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> user_id <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 事务 2 获取意向共享锁（IS）</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> user_id <span class=\"operator\">=</span> <span class=\"number\">2</span> LOCK <span class=\"keyword\">IN</span> SHARE MODE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 事务 1 和事务 2 可以同时执行，因为意向锁不冲突</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-自定义锁（User-Defined-Lock）\"><a href=\"#8-自定义锁（User-Defined-Lock）\" class=\"headerlink\" title=\"8.自定义锁（User-Defined Lock）\"></a>8.自定义锁（User-Defined Lock）</h4><p>MySQL 提供 <code>GET_LOCK</code> 和 <code>RELEASE_LOCK</code> 函数，用于实现自定义锁。这对于需要在应用层实现复杂锁定逻辑时很有用。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 获取自定义锁</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> GET_LOCK(<span class=\"string\">&#x27;my_lock&#x27;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行操作</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> orders <span class=\"keyword\">SET</span> price <span class=\"operator\">=</span> <span class=\"number\">99.99</span> <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 释放自定义锁</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> RELEASE_LOCK(<span class=\"string\">&#x27;my_lock&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>MySQL的事务机制提供了一种确保数据库操作的可靠性和一致性的方法。事务是一组原子操作，要么全部成功，要么全部失败。MySQL支持事务的存储引擎主要是InnoDB。以下是关于MySQL事务的详细介绍。</p>\n<h3 id=\"四、事务的四大特性（ACID）\"><a href=\"#四、事务的四大特性（ACID）\" class=\"headerlink\" title=\"四、事务的四大特性（ACID）\"></a>四、事务的四大特性（ACID）</h3><ol>\n<li><strong>原子性（Atomicity）</strong>：事务中的所有操作要么全部完成，要么全部不完成。任何一个操作失败都会导致整个事务的失败，已执行的操作会被回滚到初始状态。</li>\n<li><strong>一致性（Consistency）</strong>：事务执行前后，数据库的状态必须保持一致。数据从一种一致状态变为另一种一致状态。</li>\n<li><strong>隔离性（Isolation）</strong>：一个事务的执行不能被其他事务干扰。不同事务之间的操作是相互隔离的。</li>\n<li><strong>持久性（Durability）</strong>：一旦事务提交，其结果就永久保存，即使数据库发生故障。</li>\n</ol>\n<h4 id=\"事务的基本操作\"><a href=\"#事务的基本操作\" class=\"headerlink\" title=\"事务的基本操作\"></a>事务的基本操作</h4><p>在MySQL中，可以通过以下SQL命令来管理事务：</p>\n<ul>\n<li><code>START TRANSACTION</code>：开始一个新的事务。</li>\n<li><code>COMMIT</code>：提交事务，保存所有更改。</li>\n<li><code>ROLLBACK</code>：回滚事务，撤销所有更改。</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>以下是一个简单的事务操作示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开始事务</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行一些数据库操作</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> accounts (account_id, balance) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> accounts <span class=\"keyword\">SET</span> balance <span class=\"operator\">=</span> balance <span class=\"operator\">-</span> <span class=\"number\">100</span> <span class=\"keyword\">WHERE</span> account_id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 提交事务</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果在执行过程中发生错误，可以使用 <code>ROLLBACK</code> 撤销更改：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开始事务</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行一些数据库操作</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> accounts (account_id, balance) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> accounts <span class=\"keyword\">SET</span> balance <span class=\"operator\">=</span> balance <span class=\"operator\">-</span> <span class=\"number\">100</span> <span class=\"keyword\">WHERE</span> account_id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 如果发生错误，回滚事务</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、索引\"><a href=\"#五、索引\" class=\"headerlink\" title=\"五、索引\"></a>五、索引</h3><p>MySQL中的索引是用于提高查询速度的数据结构。索引类似于书籍的目录，通过索引可以快速定位数据，而不需要扫描整个表。下面是关于MySQL中索引的详细介绍：</p>\n<h4 id=\"索引的类型\"><a href=\"#索引的类型\" class=\"headerlink\" title=\"索引的类型\"></a>索引的类型</h4><ol>\n<li><p><strong>主键索引（Primary Key Index）</strong>：</p>\n<ul>\n<li>每个表只能有一个主键索引。</li>\n<li>主键索引是一种唯一索引，不允许重复和NULL值。</li>\n<li>创建主键时，数据库会自动创建主键索引。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> users (</span><br><span class=\"line\">    id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    name <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>唯一索引（Unique Index）</strong>：</p>\n<ul>\n<li>唯一索引不允许两行具有相同的索引值。</li>\n<li>一个表可以有多个唯一索引。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX idx_email <span class=\"keyword\">ON</span> users (email);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>普通索引（Index）</strong>：</p>\n<ul>\n<li>普通索引允许重复和NULL值。</li>\n<li>用于加速数据查询，但不会强制唯一性。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX idx_name <span class=\"keyword\">ON</span> users (name);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>全文索引（Fulltext Index）</strong>：</p>\n<ul>\n<li>用于全文搜索，适用于较大的文本字段。</li>\n<li>主要用于<code>CHAR</code>、<code>VARCHAR</code>和<code>TEXT</code>类型的列。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> FULLTEXT INDEX idx_content <span class=\"keyword\">ON</span> articles (content);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>组合索引（Composite Index）</strong>：</p>\n<ul>\n<li>由多个列组合而成的索引，用于多列的查询优化。</li>\n<li>可以部分匹配列，提高查询效率。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX idx_name_email <span class=\"keyword\">ON</span> users (name, email);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"索引的创建与删除\"><a href=\"#索引的创建与删除\" class=\"headerlink\" title=\"索引的创建与删除\"></a>索引的创建与删除</h4><p><strong>创建索引</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建普通索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX idx_name <span class=\"keyword\">ON</span> users (name);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建唯一索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX idx_email <span class=\"keyword\">ON</span> users (email);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建全文索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> FULLTEXT INDEX idx_content <span class=\"keyword\">ON</span> articles (content);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建组合索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX idx_name_email <span class=\"keyword\">ON</span> users (name, email);</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除索引</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX idx_name <span class=\"keyword\">ON</span> users;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在创建表时定义索引</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> users (</span><br><span class=\"line\">    id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    name <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">    email <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">    content TEXT,</span><br><span class=\"line\">    FULLTEXT (content),</span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> (email),</span><br><span class=\"line\">    INDEX idx_name_email (name, email)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>"},{"title":"五、Mybatis-Plus常见用法-常用条件构造器方法","date":"2024-07-28T14:32:50.000Z","_content":"MyBatis-Plus 提供了丰富的条件构造器方法，用于构建复杂的 SQL 查询条件。以下是常用条件构造器方法的详细说明和示例：\n\n### 常用条件构造器方法\n\n#### 1. eq(String column, Object val)\n\n等于\n\n```java\nqueryWrapper.eq(\"status\", 1);\n```\n\n#### 2. ne(String column, Object val)\n\n不等于\n\n```java\nqueryWrapper.ne(\"status\", 0);\n```\n\n#### 3. gt(String column, Object val)\n\n大于\n\n```java\nqueryWrapper.gt(\"age\", 18);\n```\n\n#### 4. ge(String column, Object val)\n\n大于等于\n\n```java\nqueryWrapper.ge(\"age\", 18);\n```\n\n#### 5. lt(String column, Object val)\n\n小于\n\n```java\nqueryWrapper.lt(\"age\", 60);\n```\n\n#### 6. le(String column, Object val)\n\n小于等于\n\n```java\nqueryWrapper.le(\"age\", 60);\n```\n\n#### 7. between(String column, Object val1, Object val2)\n\n介于\n\n```java\nqueryWrapper.between(\"age\", 18, 60);\n```\n\n#### 8. like(String column, Object val)\n\n模糊查询\n\n```java\nqueryWrapper.like(\"name\", \"John\");\n```\n\n#### 9. notLike(String column, Object val)\n\n非模糊查询\n\n```java\nqueryWrapper.notLike(\"name\", \"John\");\n```\n\n#### 10. likeLeft(String column, Object val)\n\n左模糊查询\n\n```java\nqueryWrapper.likeLeft(\"name\", \"ohn\");\n```\n\n#### 11. likeRight(String column, Object val)\n\n右模糊查询\n\n```java\nqueryWrapper.likeRight(\"name\", \"Joh\");\n```\n\n#### 12. isNull(String column)\n\n字段为 NULL\n\n```java\nqueryWrapper.isNull(\"email\");\n```\n\n#### 13. isNotNull(String column)\n\n字段不为 NULL\n\n```java\nqueryWrapper.isNotNull(\"email\");\n```\n\n#### 14. in(String column, Collection<?> value)\n\nIN 查询\n\n```java\nqueryWrapper.in(\"id\", Arrays.asList(1, 2, 3));\n```\n\n#### 15. notIn(String column, Collection<?> value)\n\nNOT IN 查询\n\n```java\nqueryWrapper.notIn(\"id\", Arrays.asList(1, 2, 3));\n```\n\n#### 16. or()\n\n或者\n\n```java\nqueryWrapper.eq(\"status\", 1).or().eq(\"status\", 2);\n```\n\n#### 17. and(Consumer<Wrapper<T>> consumer)\n\n并且\n\n```java\nqueryWrapper.and(wrapper -> wrapper.eq(\"status\", 1).like(\"name\", \"John\"));\n```\n\n#### 18. orderByAsc(String... columns)\n\n升序排序\n\n```java\nqueryWrapper.orderByAsc(\"age\", \"name\");\n```\n\n#### 19. orderByDesc(String... columns)\n\n降序排序\n\n```java\nqueryWrapper.orderByDesc(\"create_time\");\n```\n\n#### 20. groupBy(String... columns)\n\n分组\n\n```java\nqueryWrapper.groupBy(\"department_id\");\n```\n\n#### 21. having(String sqlHaving, Object... params)\n\n分组后过滤\n\n```java\nqueryWrapper.groupBy(\"department_id\").having(\"count(id) > ?\", 5);\n```\n\n#### 22. set(boolean condition, String column, Object val)\n\n设置字段值\n\n```java\nUpdateWrapper<User> updateWrapper = new UpdateWrapper<>();\nupdateWrapper.set(\"name\", \"John\").set(\"age\", 25);\n```\n\n#### 23. setSql(String sql)\n\n拼接 SET SQL\n\n```java\nupdateWrapper.setSql(\"name = 'John', age = 25\");\n```\n\n### 示例\n\n以下是一个完整的示例，展示如何使用上述条件构造器方法构建复杂查询条件：\n\n```java\n@Autowired\nprivate UserMapper userMapper;\n\npublic List<User> getUsersByConditions() {\n    QueryWrapper<User> queryWrapper = new QueryWrapper<>();\n    queryWrapper.eq(\"status\", 1)\n                .ne(\"type\", 0)\n                .gt(\"age\", 18)\n                .ge(\"score\", 60)\n                .lt(\"height\", 200)\n                .le(\"weight\", 100)\n                .between(\"age\", 20, 30)\n                .like(\"name\", \"John\")\n                .notLike(\"address\", \"New York\")\n                .likeLeft(\"email\", \"example.com\")\n                .likeRight(\"username\", \"user\")\n                .isNull(\"phone\")\n                .isNotNull(\"email\")\n                .in(\"id\", Arrays.asList(1, 2, 3))\n                .notIn(\"role\", Arrays.asList(\"admin\", \"guest\"))\n                .or()\n                .eq(\"gender\", \"male\")\n                .and(wrapper -> wrapper.eq(\"active\", 1).like(\"nickname\", \"johnny\"));\n    \n    return userMapper.selectList(queryWrapper);\n}\n```","source":"_posts/Mybatis-Plus常见用法-条件构造器方法.md","raw":"---\ntitle: 五、Mybatis-Plus常见用法-常用条件构造器方法\ndate: 2024-07-28 22:32:50\ntags: mybatisplus\n---\nMyBatis-Plus 提供了丰富的条件构造器方法，用于构建复杂的 SQL 查询条件。以下是常用条件构造器方法的详细说明和示例：\n\n### 常用条件构造器方法\n\n#### 1. eq(String column, Object val)\n\n等于\n\n```java\nqueryWrapper.eq(\"status\", 1);\n```\n\n#### 2. ne(String column, Object val)\n\n不等于\n\n```java\nqueryWrapper.ne(\"status\", 0);\n```\n\n#### 3. gt(String column, Object val)\n\n大于\n\n```java\nqueryWrapper.gt(\"age\", 18);\n```\n\n#### 4. ge(String column, Object val)\n\n大于等于\n\n```java\nqueryWrapper.ge(\"age\", 18);\n```\n\n#### 5. lt(String column, Object val)\n\n小于\n\n```java\nqueryWrapper.lt(\"age\", 60);\n```\n\n#### 6. le(String column, Object val)\n\n小于等于\n\n```java\nqueryWrapper.le(\"age\", 60);\n```\n\n#### 7. between(String column, Object val1, Object val2)\n\n介于\n\n```java\nqueryWrapper.between(\"age\", 18, 60);\n```\n\n#### 8. like(String column, Object val)\n\n模糊查询\n\n```java\nqueryWrapper.like(\"name\", \"John\");\n```\n\n#### 9. notLike(String column, Object val)\n\n非模糊查询\n\n```java\nqueryWrapper.notLike(\"name\", \"John\");\n```\n\n#### 10. likeLeft(String column, Object val)\n\n左模糊查询\n\n```java\nqueryWrapper.likeLeft(\"name\", \"ohn\");\n```\n\n#### 11. likeRight(String column, Object val)\n\n右模糊查询\n\n```java\nqueryWrapper.likeRight(\"name\", \"Joh\");\n```\n\n#### 12. isNull(String column)\n\n字段为 NULL\n\n```java\nqueryWrapper.isNull(\"email\");\n```\n\n#### 13. isNotNull(String column)\n\n字段不为 NULL\n\n```java\nqueryWrapper.isNotNull(\"email\");\n```\n\n#### 14. in(String column, Collection<?> value)\n\nIN 查询\n\n```java\nqueryWrapper.in(\"id\", Arrays.asList(1, 2, 3));\n```\n\n#### 15. notIn(String column, Collection<?> value)\n\nNOT IN 查询\n\n```java\nqueryWrapper.notIn(\"id\", Arrays.asList(1, 2, 3));\n```\n\n#### 16. or()\n\n或者\n\n```java\nqueryWrapper.eq(\"status\", 1).or().eq(\"status\", 2);\n```\n\n#### 17. and(Consumer<Wrapper<T>> consumer)\n\n并且\n\n```java\nqueryWrapper.and(wrapper -> wrapper.eq(\"status\", 1).like(\"name\", \"John\"));\n```\n\n#### 18. orderByAsc(String... columns)\n\n升序排序\n\n```java\nqueryWrapper.orderByAsc(\"age\", \"name\");\n```\n\n#### 19. orderByDesc(String... columns)\n\n降序排序\n\n```java\nqueryWrapper.orderByDesc(\"create_time\");\n```\n\n#### 20. groupBy(String... columns)\n\n分组\n\n```java\nqueryWrapper.groupBy(\"department_id\");\n```\n\n#### 21. having(String sqlHaving, Object... params)\n\n分组后过滤\n\n```java\nqueryWrapper.groupBy(\"department_id\").having(\"count(id) > ?\", 5);\n```\n\n#### 22. set(boolean condition, String column, Object val)\n\n设置字段值\n\n```java\nUpdateWrapper<User> updateWrapper = new UpdateWrapper<>();\nupdateWrapper.set(\"name\", \"John\").set(\"age\", 25);\n```\n\n#### 23. setSql(String sql)\n\n拼接 SET SQL\n\n```java\nupdateWrapper.setSql(\"name = 'John', age = 25\");\n```\n\n### 示例\n\n以下是一个完整的示例，展示如何使用上述条件构造器方法构建复杂查询条件：\n\n```java\n@Autowired\nprivate UserMapper userMapper;\n\npublic List<User> getUsersByConditions() {\n    QueryWrapper<User> queryWrapper = new QueryWrapper<>();\n    queryWrapper.eq(\"status\", 1)\n                .ne(\"type\", 0)\n                .gt(\"age\", 18)\n                .ge(\"score\", 60)\n                .lt(\"height\", 200)\n                .le(\"weight\", 100)\n                .between(\"age\", 20, 30)\n                .like(\"name\", \"John\")\n                .notLike(\"address\", \"New York\")\n                .likeLeft(\"email\", \"example.com\")\n                .likeRight(\"username\", \"user\")\n                .isNull(\"phone\")\n                .isNotNull(\"email\")\n                .in(\"id\", Arrays.asList(1, 2, 3))\n                .notIn(\"role\", Arrays.asList(\"admin\", \"guest\"))\n                .or()\n                .eq(\"gender\", \"male\")\n                .and(wrapper -> wrapper.eq(\"active\", 1).like(\"nickname\", \"johnny\"));\n    \n    return userMapper.selectList(queryWrapper);\n}\n```","slug":"Mybatis-Plus常见用法-条件构造器方法","published":1,"updated":"2024-07-31T15:08:34.010Z","_id":"clz9yzmnp0002pwu47dn8e3um","comments":1,"layout":"post","photos":[],"content":"<p>MyBatis-Plus 提供了丰富的条件构造器方法，用于构建复杂的 SQL 查询条件。以下是常用条件构造器方法的详细说明和示例：</p>\n<h3 id=\"常用条件构造器方法\"><a href=\"#常用条件构造器方法\" class=\"headerlink\" title=\"常用条件构造器方法\"></a>常用条件构造器方法</h3><h4 id=\"1-eq-String-column-Object-val\"><a href=\"#1-eq-String-column-Object-val\" class=\"headerlink\" title=\"1. eq(String column, Object val)\"></a>1. eq(String column, Object val)</h4><p>等于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.eq(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-ne-String-column-Object-val\"><a href=\"#2-ne-String-column-Object-val\" class=\"headerlink\" title=\"2. ne(String column, Object val)\"></a>2. ne(String column, Object val)</h4><p>不等于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.ne(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-gt-String-column-Object-val\"><a href=\"#3-gt-String-column-Object-val\" class=\"headerlink\" title=\"3. gt(String column, Object val)\"></a>3. gt(String column, Object val)</h4><p>大于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.gt(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-ge-String-column-Object-val\"><a href=\"#4-ge-String-column-Object-val\" class=\"headerlink\" title=\"4. ge(String column, Object val)\"></a>4. ge(String column, Object val)</h4><p>大于等于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.ge(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-lt-String-column-Object-val\"><a href=\"#5-lt-String-column-Object-val\" class=\"headerlink\" title=\"5. lt(String column, Object val)\"></a>5. lt(String column, Object val)</h4><p>小于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.lt(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">60</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-le-String-column-Object-val\"><a href=\"#6-le-String-column-Object-val\" class=\"headerlink\" title=\"6. le(String column, Object val)\"></a>6. le(String column, Object val)</h4><p>小于等于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.le(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">60</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-between-String-column-Object-val1-Object-val2\"><a href=\"#7-between-String-column-Object-val1-Object-val2\" class=\"headerlink\" title=\"7. between(String column, Object val1, Object val2)\"></a>7. between(String column, Object val1, Object val2)</h4><p>介于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.between(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">60</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-like-String-column-Object-val\"><a href=\"#8-like-String-column-Object-val\" class=\"headerlink\" title=\"8. like(String column, Object val)\"></a>8. like(String column, Object val)</h4><p>模糊查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.like(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;John&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-notLike-String-column-Object-val\"><a href=\"#9-notLike-String-column-Object-val\" class=\"headerlink\" title=\"9. notLike(String column, Object val)\"></a>9. notLike(String column, Object val)</h4><p>非模糊查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.notLike(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;John&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-likeLeft-String-column-Object-val\"><a href=\"#10-likeLeft-String-column-Object-val\" class=\"headerlink\" title=\"10. likeLeft(String column, Object val)\"></a>10. likeLeft(String column, Object val)</h4><p>左模糊查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.likeLeft(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;ohn&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-likeRight-String-column-Object-val\"><a href=\"#11-likeRight-String-column-Object-val\" class=\"headerlink\" title=\"11. likeRight(String column, Object val)\"></a>11. likeRight(String column, Object val)</h4><p>右模糊查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.likeRight(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Joh&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-isNull-String-column\"><a href=\"#12-isNull-String-column\" class=\"headerlink\" title=\"12. isNull(String column)\"></a>12. isNull(String column)</h4><p>字段为 NULL</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.isNull(<span class=\"string\">&quot;email&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-isNotNull-String-column\"><a href=\"#13-isNotNull-String-column\" class=\"headerlink\" title=\"13. isNotNull(String column)\"></a>13. isNotNull(String column)</h4><p>字段不为 NULL</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.isNotNull(<span class=\"string\">&quot;email&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-in-String-column-Collection-value\"><a href=\"#14-in-String-column-Collection-value\" class=\"headerlink\" title=\"14. in(String column, Collection&lt;?&gt; value)\"></a>14. in(String column, Collection&lt;?&gt; value)</h4><p>IN 查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.in(<span class=\"string\">&quot;id&quot;</span>, Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-notIn-String-column-Collection-value\"><a href=\"#15-notIn-String-column-Collection-value\" class=\"headerlink\" title=\"15. notIn(String column, Collection&lt;?&gt; value)\"></a>15. notIn(String column, Collection&lt;?&gt; value)</h4><p>NOT IN 查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.notIn(<span class=\"string\">&quot;id&quot;</span>, Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-or\"><a href=\"#16-or\" class=\"headerlink\" title=\"16. or()\"></a>16. or()</h4><p>或者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.eq(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">1</span>).or().eq(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"17-and-Consumer-consumer\"><a href=\"#17-and-Consumer-consumer\" class=\"headerlink\" title=\"17. and(Consumer&lt;Wrapper&gt; consumer)\"></a>17. and(Consumer&lt;Wrapper<T>&gt; consumer)</h4><p>并且</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.and(wrapper -&gt; wrapper.eq(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">1</span>).like(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;John&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"18-orderByAsc-String…-columns\"><a href=\"#18-orderByAsc-String…-columns\" class=\"headerlink\" title=\"18. orderByAsc(String… columns)\"></a>18. orderByAsc(String… columns)</h4><p>升序排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.orderByAsc(<span class=\"string\">&quot;age&quot;</span>, <span class=\"string\">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"19-orderByDesc-String…-columns\"><a href=\"#19-orderByDesc-String…-columns\" class=\"headerlink\" title=\"19. orderByDesc(String… columns)\"></a>19. orderByDesc(String… columns)</h4><p>降序排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.orderByDesc(<span class=\"string\">&quot;create_time&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"20-groupBy-String…-columns\"><a href=\"#20-groupBy-String…-columns\" class=\"headerlink\" title=\"20. groupBy(String… columns)\"></a>20. groupBy(String… columns)</h4><p>分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.groupBy(<span class=\"string\">&quot;department_id&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"21-having-String-sqlHaving-Object…-params\"><a href=\"#21-having-String-sqlHaving-Object…-params\" class=\"headerlink\" title=\"21. having(String sqlHaving, Object… params)\"></a>21. having(String sqlHaving, Object… params)</h4><p>分组后过滤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.groupBy(<span class=\"string\">&quot;department_id&quot;</span>).having(<span class=\"string\">&quot;count(id) &gt; ?&quot;</span>, <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"22-set-boolean-condition-String-column-Object-val\"><a href=\"#22-set-boolean-condition-String-column-Object-val\" class=\"headerlink\" title=\"22. set(boolean condition, String column, Object val)\"></a>22. set(boolean condition, String column, Object val)</h4><p>设置字段值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UpdateWrapper&lt;User&gt; updateWrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateWrapper</span>&lt;&gt;();</span><br><span class=\"line\">updateWrapper.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;John&quot;</span>).set(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">25</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"23-setSql-String-sql\"><a href=\"#23-setSql-String-sql\" class=\"headerlink\" title=\"23. setSql(String sql)\"></a>23. setSql(String sql)</h4><p>拼接 SET SQL</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateWrapper.setSql(<span class=\"string\">&quot;name = &#x27;John&#x27;, age = 25&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以下是一个完整的示例，展示如何使用上述条件构造器方法构建复杂查询条件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsersByConditions</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    QueryWrapper&lt;User&gt; queryWrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">    queryWrapper.eq(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">                .ne(<span class=\"string\">&quot;type&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                .gt(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\">                .ge(<span class=\"string\">&quot;score&quot;</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\">                .lt(<span class=\"string\">&quot;height&quot;</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">                .le(<span class=\"string\">&quot;weight&quot;</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">                .between(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">                .like(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;John&quot;</span>)</span><br><span class=\"line\">                .notLike(<span class=\"string\">&quot;address&quot;</span>, <span class=\"string\">&quot;New York&quot;</span>)</span><br><span class=\"line\">                .likeLeft(<span class=\"string\">&quot;email&quot;</span>, <span class=\"string\">&quot;example.com&quot;</span>)</span><br><span class=\"line\">                .likeRight(<span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">                .isNull(<span class=\"string\">&quot;phone&quot;</span>)</span><br><span class=\"line\">                .isNotNull(<span class=\"string\">&quot;email&quot;</span>)</span><br><span class=\"line\">                .in(<span class=\"string\">&quot;id&quot;</span>, Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">                .notIn(<span class=\"string\">&quot;role&quot;</span>, Arrays.asList(<span class=\"string\">&quot;admin&quot;</span>, <span class=\"string\">&quot;guest&quot;</span>))</span><br><span class=\"line\">                .or()</span><br><span class=\"line\">                .eq(<span class=\"string\">&quot;gender&quot;</span>, <span class=\"string\">&quot;male&quot;</span>)</span><br><span class=\"line\">                .and(wrapper -&gt; wrapper.eq(<span class=\"string\">&quot;active&quot;</span>, <span class=\"number\">1</span>).like(<span class=\"string\">&quot;nickname&quot;</span>, <span class=\"string\">&quot;johnny&quot;</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> userMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>MyBatis-Plus 提供了丰富的条件构造器方法，用于构建复杂的 SQL 查询条件。以下是常用条件构造器方法的详细说明和示例：</p>\n<h3 id=\"常用条件构造器方法\"><a href=\"#常用条件构造器方法\" class=\"headerlink\" title=\"常用条件构造器方法\"></a>常用条件构造器方法</h3><h4 id=\"1-eq-String-column-Object-val\"><a href=\"#1-eq-String-column-Object-val\" class=\"headerlink\" title=\"1. eq(String column, Object val)\"></a>1. eq(String column, Object val)</h4><p>等于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.eq(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-ne-String-column-Object-val\"><a href=\"#2-ne-String-column-Object-val\" class=\"headerlink\" title=\"2. ne(String column, Object val)\"></a>2. ne(String column, Object val)</h4><p>不等于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.ne(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-gt-String-column-Object-val\"><a href=\"#3-gt-String-column-Object-val\" class=\"headerlink\" title=\"3. gt(String column, Object val)\"></a>3. gt(String column, Object val)</h4><p>大于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.gt(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-ge-String-column-Object-val\"><a href=\"#4-ge-String-column-Object-val\" class=\"headerlink\" title=\"4. ge(String column, Object val)\"></a>4. ge(String column, Object val)</h4><p>大于等于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.ge(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-lt-String-column-Object-val\"><a href=\"#5-lt-String-column-Object-val\" class=\"headerlink\" title=\"5. lt(String column, Object val)\"></a>5. lt(String column, Object val)</h4><p>小于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.lt(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">60</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-le-String-column-Object-val\"><a href=\"#6-le-String-column-Object-val\" class=\"headerlink\" title=\"6. le(String column, Object val)\"></a>6. le(String column, Object val)</h4><p>小于等于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.le(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">60</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-between-String-column-Object-val1-Object-val2\"><a href=\"#7-between-String-column-Object-val1-Object-val2\" class=\"headerlink\" title=\"7. between(String column, Object val1, Object val2)\"></a>7. between(String column, Object val1, Object val2)</h4><p>介于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.between(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">60</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-like-String-column-Object-val\"><a href=\"#8-like-String-column-Object-val\" class=\"headerlink\" title=\"8. like(String column, Object val)\"></a>8. like(String column, Object val)</h4><p>模糊查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.like(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;John&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-notLike-String-column-Object-val\"><a href=\"#9-notLike-String-column-Object-val\" class=\"headerlink\" title=\"9. notLike(String column, Object val)\"></a>9. notLike(String column, Object val)</h4><p>非模糊查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.notLike(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;John&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-likeLeft-String-column-Object-val\"><a href=\"#10-likeLeft-String-column-Object-val\" class=\"headerlink\" title=\"10. likeLeft(String column, Object val)\"></a>10. likeLeft(String column, Object val)</h4><p>左模糊查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.likeLeft(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;ohn&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-likeRight-String-column-Object-val\"><a href=\"#11-likeRight-String-column-Object-val\" class=\"headerlink\" title=\"11. likeRight(String column, Object val)\"></a>11. likeRight(String column, Object val)</h4><p>右模糊查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.likeRight(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Joh&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-isNull-String-column\"><a href=\"#12-isNull-String-column\" class=\"headerlink\" title=\"12. isNull(String column)\"></a>12. isNull(String column)</h4><p>字段为 NULL</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.isNull(<span class=\"string\">&quot;email&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-isNotNull-String-column\"><a href=\"#13-isNotNull-String-column\" class=\"headerlink\" title=\"13. isNotNull(String column)\"></a>13. isNotNull(String column)</h4><p>字段不为 NULL</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.isNotNull(<span class=\"string\">&quot;email&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-in-String-column-Collection-value\"><a href=\"#14-in-String-column-Collection-value\" class=\"headerlink\" title=\"14. in(String column, Collection&lt;?&gt; value)\"></a>14. in(String column, Collection&lt;?&gt; value)</h4><p>IN 查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.in(<span class=\"string\">&quot;id&quot;</span>, Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-notIn-String-column-Collection-value\"><a href=\"#15-notIn-String-column-Collection-value\" class=\"headerlink\" title=\"15. notIn(String column, Collection&lt;?&gt; value)\"></a>15. notIn(String column, Collection&lt;?&gt; value)</h4><p>NOT IN 查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.notIn(<span class=\"string\">&quot;id&quot;</span>, Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-or\"><a href=\"#16-or\" class=\"headerlink\" title=\"16. or()\"></a>16. or()</h4><p>或者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.eq(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">1</span>).or().eq(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"17-and-Consumer-consumer\"><a href=\"#17-and-Consumer-consumer\" class=\"headerlink\" title=\"17. and(Consumer&lt;Wrapper&gt; consumer)\"></a>17. and(Consumer&lt;Wrapper<T>&gt; consumer)</h4><p>并且</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.and(wrapper -&gt; wrapper.eq(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">1</span>).like(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;John&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"18-orderByAsc-String…-columns\"><a href=\"#18-orderByAsc-String…-columns\" class=\"headerlink\" title=\"18. orderByAsc(String… columns)\"></a>18. orderByAsc(String… columns)</h4><p>升序排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.orderByAsc(<span class=\"string\">&quot;age&quot;</span>, <span class=\"string\">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"19-orderByDesc-String…-columns\"><a href=\"#19-orderByDesc-String…-columns\" class=\"headerlink\" title=\"19. orderByDesc(String… columns)\"></a>19. orderByDesc(String… columns)</h4><p>降序排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.orderByDesc(<span class=\"string\">&quot;create_time&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"20-groupBy-String…-columns\"><a href=\"#20-groupBy-String…-columns\" class=\"headerlink\" title=\"20. groupBy(String… columns)\"></a>20. groupBy(String… columns)</h4><p>分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.groupBy(<span class=\"string\">&quot;department_id&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"21-having-String-sqlHaving-Object…-params\"><a href=\"#21-having-String-sqlHaving-Object…-params\" class=\"headerlink\" title=\"21. having(String sqlHaving, Object… params)\"></a>21. having(String sqlHaving, Object… params)</h4><p>分组后过滤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryWrapper.groupBy(<span class=\"string\">&quot;department_id&quot;</span>).having(<span class=\"string\">&quot;count(id) &gt; ?&quot;</span>, <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"22-set-boolean-condition-String-column-Object-val\"><a href=\"#22-set-boolean-condition-String-column-Object-val\" class=\"headerlink\" title=\"22. set(boolean condition, String column, Object val)\"></a>22. set(boolean condition, String column, Object val)</h4><p>设置字段值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UpdateWrapper&lt;User&gt; updateWrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateWrapper</span>&lt;&gt;();</span><br><span class=\"line\">updateWrapper.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;John&quot;</span>).set(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">25</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"23-setSql-String-sql\"><a href=\"#23-setSql-String-sql\" class=\"headerlink\" title=\"23. setSql(String sql)\"></a>23. setSql(String sql)</h4><p>拼接 SET SQL</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateWrapper.setSql(<span class=\"string\">&quot;name = &#x27;John&#x27;, age = 25&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以下是一个完整的示例，展示如何使用上述条件构造器方法构建复杂查询条件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">getUsersByConditions</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    QueryWrapper&lt;User&gt; queryWrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">    queryWrapper.eq(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">                .ne(<span class=\"string\">&quot;type&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                .gt(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\">                .ge(<span class=\"string\">&quot;score&quot;</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\">                .lt(<span class=\"string\">&quot;height&quot;</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">                .le(<span class=\"string\">&quot;weight&quot;</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">                .between(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">                .like(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;John&quot;</span>)</span><br><span class=\"line\">                .notLike(<span class=\"string\">&quot;address&quot;</span>, <span class=\"string\">&quot;New York&quot;</span>)</span><br><span class=\"line\">                .likeLeft(<span class=\"string\">&quot;email&quot;</span>, <span class=\"string\">&quot;example.com&quot;</span>)</span><br><span class=\"line\">                .likeRight(<span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">                .isNull(<span class=\"string\">&quot;phone&quot;</span>)</span><br><span class=\"line\">                .isNotNull(<span class=\"string\">&quot;email&quot;</span>)</span><br><span class=\"line\">                .in(<span class=\"string\">&quot;id&quot;</span>, Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">                .notIn(<span class=\"string\">&quot;role&quot;</span>, Arrays.asList(<span class=\"string\">&quot;admin&quot;</span>, <span class=\"string\">&quot;guest&quot;</span>))</span><br><span class=\"line\">                .or()</span><br><span class=\"line\">                .eq(<span class=\"string\">&quot;gender&quot;</span>, <span class=\"string\">&quot;male&quot;</span>)</span><br><span class=\"line\">                .and(wrapper -&gt; wrapper.eq(<span class=\"string\">&quot;active&quot;</span>, <span class=\"number\">1</span>).like(<span class=\"string\">&quot;nickname&quot;</span>, <span class=\"string\">&quot;johnny&quot;</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> userMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"二、Java基础-面试题14-26","date":"2024-08-25T14:32:50.000Z","_content":"##### 14 什么是泛型，有什么好处？\n\n**概念：**在定义类、接口和方法时使用类型参数(type parameter)。这些类型参数在实例化时被具体化为实际的类型。\n\n**好处：**\n\n**类型安全**：\n\n- 使用泛型可以在编译时检测类型错误，避免了运行时出现 `ClassCastException`。例如，使用泛型集合时，插入的元素类型必须匹配集合的类型参数。\n\n**消除强制类型转换**：\n\n- 在没有泛型的代码中，获取集合中的元素需要进行强制类型转换。泛型消除了这种需求，使代码更简洁和安全。\n\n**无泛型的代码：**\n\n```java\nList list = new ArrayList();\nlist.add(\"Hello\");\nString s = (String) list.get(0);  // 需要强制转换\n```\n\n**使用泛型的代码：**\n\n```java\nList<String> list = new ArrayList<>();\nlist.add(\"Hello\");\nString s = list.get(0);  // 不需要强制转换\n```\n\n##### 15 什么是类型擦除？\n\n在编译阶段泛型字段会被擦除，泛型类型参数在编译后被替换为它们的上界（通常是 `Object`）如下：\n\n```java\npublic class Foo<T> {\n\tT bar;\n\tvoid doSth(T param) {\n\t}\n}\n// 编译后，等同于\npublic class Foo<Object> {\n\tObject bar;\n\tvoid doSth(Object param) {\n\t}\n}\n```\n\n##### 16 泛型中的KTVE？Object等分别代表什么含义？\n\nE - Element （在集合中使用，集合中存放的是元素）\n\nT - Type （Java类，任意类型）\n\nK - Key （键）\n\nV - Value （值）\n\nN - Number （数值类型）\n\nObject - 所有类的根类\n\n```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GenericExamples {\n\n    public static void main(String[] args) {\n        // 1. E - Element: 用于集合中的元素\n        List<String> stringList = new ArrayList<>(); // E 被替换为 String\n        stringList.add(\"Apple\");\n        stringList.add(\"Banana\");\n        System.out.println(\"List<E> example:\");\n        for (String element : stringList) {\n            System.out.println(\"Element: \" + element); // 输出: Apple, Banana\n        }\n        System.out.println();\n\n        // 2. T - Type: 通用类型参数\n        TypeExample<Integer> intType = new TypeExample<>();\n        intType.setValue(123);\n        System.out.println(\"T - Type example:\");\n        System.out.println(\"Value: \" + intType.getValue()); // 输出: Value: 123\n        System.out.println();\n\n        // 3. K - Key, V - Value: 键值对映射\n        Map<String, Integer> map = new HashMap<>(); // K 被替换为 String, V 被替换为 Integer\n        map.put(\"Apple\", 1);\n        map.put(\"Banana\", 2);\n        System.out.println(\"K - Key, V - Value example:\");\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n        System.out.println();\n\n        // 4. N - Number: 限制为数值类型\n        NumberExample<Double> doubleExample = new NumberExample<>();\n        doubleExample.setNumber(3.14);\n        System.out.println(\"N - Number example:\");\n        System.out.println(\"Number: \" + doubleExample.getNumber()); // 输出: Number: 3.14\n        System.out.println();\n\n        // 5. Object: 所有类的根类，表示可以接受任何类型\n        List<Object> objectList = new ArrayList<>();\n        objectList.add(\"Hello\");\n        objectList.add(456);\n        objectList.add(78.90);\n        System.out.println(\"Object example:\");\n        for (Object obj : objectList) {\n            System.out.println(\"Object: \" + obj);\n        }\n    }\n\n    // T - 通用类型参数的示例类\n    static class TypeExample<T> {\n        private T value;\n\n        public void setValue(T value) {\n            this.value = value;\n        }\n\n        public T getValue() {\n            return value;\n        }\n    }\n\n    // N - 限制为数值类型的示例类\n    static class NumberExample<N extends Number> {\n        private N number;\n\n        public void setNumber(N number) {\n            this.number = number;\n        }\n\n        public N getNumber() {\n            return number;\n        }\n    }\n}\n\n```\n\n**代码解释**\n\n1. **`List<E>`** 示例：\n   - `stringList` 是一个 `List<String>`，演示了如何使用 `E` 作为集合中的元素类型。\n2. **`T` - Type 示例**：\n   - `TypeExample<T>` 是一个通用类型的类，展示了如何使用泛型类型参数 `T`。\n3. **`K` - Key 和 `V` - Value 示例**：\n   - 使用 `Map<K, V>` 展示了键值对映射的用法，其中 `K` 是键的类型，`V` 是值的类型。\n4. **`N` - Number 示例**：\n   - `NumberExample<N>` 类限制了泛型类型参数 `N` 为数值类型（如 `Integer`、`Double`），展示了如何使用泛型约束。\n5. **`Object` 示例**：\n   - `objectList` 是一个 `List<Object>`，展示了如何存储任意类型的对象。\n\n##### 17 泛型上下界\n\n**上界通配符 `<? extends Number>`**\n\n```scss\nNumber (类)  (上界) //表示可以是 `Number` 类型或其子类型，如 `Integer` 或 `Double`。\n   ^\n   |\n+---------+\n|         |\nInteger   Double (类)\n```\n\n**图示解析**：\n\n- 可以接受 `Number` 及其子类 `Integer`、`Double` 等。\n- 在代码中，`List<? extends Number>` 可以表示 `List<Number>`、`List<Integer>` 或 `List<Double>`。\n\n**下界通配符 `<? super Integer>`**\n\n```scss\nNumber   Object (所有类的根类) //表示可以是 Integer 类型或其父类型，如 Number 或 Object。\n    |         |\n    +---------+\n         |\n      Integer (类)  (下界)\n```\n\n**图示解析**：\n\n- 可以接受 `Integer` 及其父类 `Number`、`Object`。\n- 在代码中，`List<? super Integer>` 可以表示 `List<Integer>`、`List<Number>` 或 `List<Object>`。\n\n```java\n// 使用上界通配符，只读取数据\npublic static void processNumbersExtends(List<? extends Number> list) {\n    for (Number num : list) {\n        System.out.println(\"Number: \" + num);\n    }\n    // list.add(100); // 编译错误，不能添加元素\n}\n\n// 使用下界通配符，写入数据\npublic static void processNumbersSuper(List<? super Integer> list) {\n    list.add(100); // 合法，添加 Integer 类型\n    // Number num = list.get(0); // 编译错误，无法确定具体类型\n    Object obj = list.get(0); // 合法，读取为 Object 类型\n    System.out.println(\"Added: \" + obj);\n}\n```\n\n**代码解析**：\n\n**上界通配符：`<? extends Type>`**\n\n- **语义**：表示参数化类型的**上界**，即该泛型类型可以是 `Type` 本身或其任意子类。\n- **特性**：\n  - **只能读取，不能写入（除了添加 `null`）**：由于编译器无法确定具体的子类型，向其中添加元素可能会破坏类型安全。\n  - **适用于提供者（Producer）角色**：当你只需要从泛型对象中**获取数据**时，使用上界通配符。\n\n**下界通配符：`<? super Type>`**\n\n- **语义**：表示参数化类型的**下界**，即该泛型类型可以是 `Type` 本身或其任意父类。\n- **特性**：\n  - **可以写入，但读取时只能作为 `Object` 类型**：因为具体类型可能是 `Type` 的父类，读取元素时只能确保它至少是 `Object` 类型。\n  - **适用于消费者（Consumer）角色**：当你需要向泛型对象中**写入数据**时，使用下界通配符。\n\n如果一个方法既要写入还要读取，则不要加上限定符号。\n\n##### 18 什么是反射机制？为什么反射慢?\n\n**概念:**反射机制（Reflection）是Java语言的一种特性，它允许程序在运行时动态地获取有关类、接口、方法和字段的信息，并且可以在运行时创建对象、调用方法以及访问或修改字段。\n\n**反射的主要功能**\n\n1. **获取类的 Class 对象**：\n   - 通过 `Class.forName(\"className\")` 或 `object.getClass()` 获取一个类的 `Class` 对象。\n2. **获取类的信息**：\n   - 获取类的构造方法、字段、方法等信息。\n   - 例如，`Class.getDeclaredMethods()` 可以获取类中所有的方法。\n3. **实例化对象**：\n   - 通过反射可以动态地创建类的实例，使用 `Class.newInstance()` 或通过 `Constructor` 创建。\n4. **调用方法**：\n   - 使用 `Method.invoke()` 动态地调用对象的方法。\n5. **访问和修改字段**：\n   - 使用 `Field.get()` 和 `Field.set()` 可以在运行时访问或修改对象的字段值。\n\n```java\nclass ExampleClass {\n    private Integer total = 10;\n    private void printMessage(String message) {\n        System.out.println(\"Message: \" + message);\n    }\n}\npublic class ReflectionExample {\n    public static void main(String[] args) {\n        try {\n            // 获取指定类的 Class 对象\n            Class<?> clazzOne = Class.forName(\"com.qyj.subject.common.interview.basic.GenericExamples\");\n\n            // 获取指定类的所有方法\n            Method[] methods = clazzOne.getDeclaredMethods();\n\n            // 输出每个方法的名字\n            for (Method method : methods) {\n                System.out.println(\"GenericExamples Method: \" + method.getName());\n            }\n\n\n            // 创建ExampleClass的实例\n            ExampleClass instance = new ExampleClass();\n\n            // 获取ExampleClass的Class对象\n            Class<?> clazzTwo = ExampleClass.class;\n\n            // 使用getDeclaredMethod获取特定的方法\n            // 参数为方法名,参数类型(name,type)\n            Method method = clazzTwo.getDeclaredMethod(\"printMessage\", String.class);\n\n            // 由于printMessage是私有方法，我们需要设置可访问性\n            method.setAccessible(true);\n\n            // 调用获取到的方法，传递参数\n            method.invoke(instance, \"Hello, World!\");\n\n            // 获取 total 字段的 Field 对象\n            Field field = clazzTwo.getDeclaredField(\"total\");\n\n            // 将字段设置为可访问\n            field.setAccessible(true);\n\n            // 获取 total 字段的值\n            Integer totalValue = (Integer) field.get(instance);\n            System.out.println(\"Original total value: \" + totalValue); // 输出: 10\n\n            // 修改 total 字段的值\n            field.set(instance, 20);\n            System.out.println(\"Modified total value: \" + field.get(instance)); // 输出: 20\n\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n\n##### 19 Java中创建对象有那些方式?\n\n三种常见的创建对象的方法：使用 `new` 关键字、通过反射、以及通过反序列化。\n\n**`new` 关键字**:\n\n- 最常见的对象创建方式。\n- 编译时确定的，性能高。\n\n**反射**:\n\n- 允许在运行时动态创建对象。\n- 更灵活，但性能较低，且需要处理可能的异常。\n\n**反序列化**:\n\n- 通过将字节流转换回对象来创建对象。\n- 不调用构造器，直接恢复对象的状态，适用于分布式系统或持久化场景。\n\n```java\nimport java.io.*;  \nimport java.lang.reflect.Constructor;\n\npublic class ObjectCreationExample {\n\n    // 1. 使用new关键字创建对象\n    public void createUsingNew() {\n        Example example = new Example(\"Hello from new!\");\n        example.printMessage(); // 输出: Hello from new!\n    }\n\n    // 2. 使用反射创建对象\n    public void createUsingReflection() {\n        try {\n            // 获取Example类的Class对象\n            Class<?> clazz = Example.class;\n\n            // 获取构造器\n            Constructor<?> constructor = clazz.getConstructor(String.class);\n\n            // 使用构造器通过反射创建对象\n            Example example = (Example) constructor.newInstance(\"Hello via Reflection!\");\n            example.printMessage(); // 输出: Hello via Reflection!\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    // 3. 使用反序列化创建对象\n    public void createUsingDeserialization() {\n        // 序列化：将对象写入文件\n        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"example.ser\"))) {\n            Example example = new Example(\"Hello, World!\");\n            out.writeObject(example); // 将对象写入文件\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // 反序列化：从文件中读取对象\n        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(\"example.ser\"))) {\n            Example example = (Example) in.readObject(); // 通过反序列化创建对象\n            example.printMessage(); // 输出: Hello, World!\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        ObjectCreationExample objectCreationExample = new ObjectCreationExample();\n\n        // 使用new关键字创建对象\n        System.out.println(\"Creating object using new keyword:\");\n        objectCreationExample.createUsingNew();\n\n        System.out.println(\"\\nCreating object using reflection:\");\n        // 使用反射创建对象\n        objectCreationExample.createUsingReflection();\n\n        System.out.println(\"\\nCreating object using deserialization:\");\n        // 使用反序列化创建对象\n        objectCreationExample.createUsingDeserialization();\n    }\n}\n\n// 示例类，支持序列化\nclass Example implements Serializable {\n    private static final long serialVersionUID = 1L;\n    private String message;\n\n    public Example(String message) {\n        this.message = message;\n    }\n\n    public void printMessage() {\n        System.out.println(message);\n    }\n}\n```\n\n##### 20 序列化与反序列化\n\n20.1 **序列化:**是将一个对象的状态转换成字节流过程, **反序列化**：是将字节流转换回原始对象的过程。\n\n* **序列化：**对象 -> 字节流\n\n* **反序列化：**字节流 -> 对象\n\n20.2 **用途(为什么要使用序列化?)：**序列化是将对象转换成可传输的格式的过程，是一种数据传输手段，广泛应用于网络传输，RMI和RPC，数据存储和持久化等应用场景。\n\n20.3 **重点知识：**\n\n* 如果一个类想被序列化，则需要实现Serializable接口。\n\n* 通过`ObjectOutputStream`和`ObjectInputStream`对对象进行序列化与反序列化，如上述的代码所示。\n\n* 序列化不能保存静态变量\n* `transient` 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件，在被反序列化后，`transient` 变量的值被设为初始值，如 `int` 型的是 0，对象型的是 `null`。\n\n##### 21 序列化的实现原理\n\n**序列化的基本原理**\n\n1. **`Serializable` 接口**：\n   - 在Java中，一个类要实现序列化，必须实现 `Serializable` 接口。`Serializable` 是一个标记接口，意味着它没有任何方法，仅作为一个标记，表示该类的实例可以被序列化。\n   - 实现了 `Serializable` 接口的类的实例可以被序列化为字节流，然后再反序列化为对象。\n2. **序列化过程**：\n   - 序列化的过程是将对象的状态转化为字节流。这个过程由 `ObjectOutputStream` 类的 `writeObject()` 方法完成。\n   - `ObjectOutputStream` 会遍历对象的所有字段，并将它们的值写入输出流中。如果某个字段本身是对象引用，那么该对象也会被递归序列化。\n   - 类的元数据（例如类的名称、版本号等）以及对象的类型信息（例如对象属于哪个类）也会被写入字节流。\n3. **反序列化过程**：\n   - 反序列化的过程是将字节流恢复为原始的对象。这个过程由 `ObjectInputStream` 类的 `readObject()` 方法完成。\n   - `ObjectInputStream` 通过读取字节流中的类的元数据和字段数据，重新构造对象的实例。\n\n```java\n// 3. 使用反序列化创建对象\npublic void createUsingDeserialization() {\n    // 序列化：将对象写入文件\n    try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"example.ser\"))) {\n        Example example = new Example(\"Hello, World!\");\n        out.writeObject(example); // 将对象写入文件\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    // 反序列化：从文件中读取对象\n    try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(\"example.ser\"))) {\n        Example example = (Example) in.readObject(); // 通过反序列化创建对象\n        example.printMessage(); // 输出: Hello, World!\n    } catch (IOException | ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n##### 22 Serializable和Externalizable接口有什么不同？\n\n**实现方式：**\n\n* 通过 `Serializable` 接口，Java 可以自动处理对象的序列化和反序列化过程，无需开发者干预。\n\n* 通过 `Externalizable` 接口，开发者可以完全控制序列化和反序列化过程，手动实现 `writeExternal` 和 `readExternal` 方法。\n\n**无参构造器**:\n\n- 当使用 `Externalizable` 接口时，反序列化过程中需要使用无参构造器来创建对象实例，因此必须提供一个无参构造器。\n\n```java\nprivate static final long serialVersionUID = 1L; // 用于 Serializable 接口的版本控制\n\nprivate String name;\nprivate int age;\n\n// 必须提供一个无参构造器，供 Externalizable 使用\npublic Person() {\n}\n\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\n```\n\n**`writeExternal` 和 `readExternal` 方法：**\n\n```java\n@Override\npublic void writeExternal(ObjectOutput out) throws IOException {\n    // 手动控制序列化过程，只写入需要序列化的字段\n    out.writeUTF(name);\n    out.writeInt(age);\n}\n\n@Override\npublic void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n    // 手动控制反序列化过程，按顺序读取字段并恢复对象状态\n    this.name = in.readUTF();\n    this.age = in.readInt();\n}\n```\n\n##### 23 `serialVersionUID` 有何用途? 如果没定义会有什么问题？\n\n23.1 **用途：**`serialVersionUID` 是一个独特的标识符，用于表示类的序列化版本。它是 `Serializable` 接口的一部分，用来确保在反序列化时，类的版本与序列化时的版本保持一致。\n\n23.2 如果未定义 `serialVersionUID：`Java 将自动生成，但这会带来版本控制上的不确定性，可能导致 `InvalidClassException` 异常，尤其在类结构发生变化时。\n\n23.2 `serialVersionUlD`有两种显示的生成方式:是默认的1L，比如:\n\n```java\nprivate static final long serialVersionUID =1L;\n```\n\n二是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如:\n\n```java\nprivate static final long serialVersionUlD = xxxxL;\n```\n\n##### 24 Java的动态代理是什么？如何实现？\n\n**概念：**动态代理是Java 一大特性。 它的显著优势就是无侵入式的扩展代码。 通俗来讲就是**可以用来做方法的增强，让你可以在不修改源码的情况下，增强一些方法或者功能，在方法执行前后做任何你想做的事情**。 具体应用的话，比如可以添加调用日志，做事务控制等。\n\n**如何实现：**\n\n1、`JDK`动态代理：`Java.lang.reflect`包中的Proxy类和InvocationHandler接口提供了生成动态代理类的能力。\n\n2、`Cglib`动态代理：`Cglib(Code Generation Library)`是一个第三方代码生成类库，运行时在内存中动态生成一个子类对象从而实现对目标对象功能的扩展。\n\n**JDK动态代理**\n\n**步骤：**\n\n1. **定义接口**：目标类必须实现的接口。\n2. **实现接口的目标类**：实现业务逻辑。\n3. **创建`InvocationHandler`**：实现 `InvocationHandler` 接口，编写代理逻辑。\n4. **使用`Proxy`创建代理对象**：通过 `Proxy.newProxyInstance` 方法创建代理对象。\n\n**代码示例：**\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\n// 1. 定义接口 定义了目标类需要实现的方法 perform()\ninterface Service {\n    void perform();\n}\n\n// 2. 实现接口的目标类 实现了 Service 接口的 perform 方法，这是需要代理的目标对象。\nclass RealService implements Service {\n    @Override\n    public void perform() {\n        System.out.println(\"RealService: Performing the service.\");\n    }\n}\n\n// 3. 创建InvocationHandler\nclass ServiceInvocationHandler implements InvocationHandler {\n    private final Object target;\n\n    public ServiceInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"Before method: \" + method.getName()); //方法执行前\n        Object result = method.invoke(target, args); //方法执行中\n        System.out.println(\"After method: \" + method.getName()); //方法执行后\n        return result;\n    }\n}\n\npublic class DynamicProxyExample {\n    public static void main(String[] args) {\n        // 4. 使用Proxy创建代理对象\n        // Proxy.newProxyInstance(\n\t// 类加载器：加载代理类的字节码。\n\t// 接口数组：指定代理对象要实现的接口。\n\t// InvocationHandler：定义代理对象如何处理方法调用。)\n        RealService realService = new RealService();//实例化目标对象\n        Service proxyInstance = (Service) Proxy.newProxyInstance(\n                realService.getClass().getClassLoader(),\n                realService.getClass().getInterfaces(),\n                new ServiceInvocationHandler(realService)\n        );// 创建目标对象的代理对象\n\n        // 调用代理对象的方法\n        proxyInstance.perform();\n    }\n}\n```\n\n##### 25 静态代理和动态代理的区别\n\n静态代理就是编译期要确定的，动态代理是运行期间确定的\n\n##### 26 什么是元注解\n\n**概念：**定义其他注解的注解，通过元注解产生其他注解，如@Override就是通过元注解定义出来的\n\n元注解有四个：@Target(表示该注解可以用在什么地方)、@Retention(表示在什么级别保存该注解信息)、@Documented(将此注解包含在javadoc中)、@Inherited(允许子类继承父类中的注解)\n\n**怎么定义一个注解？**\n\n在Java中，自定义注解通常使用`@interface`来定义，常见格式如下：\n\n```java\n@interface 注解名称 {\n    // 注解的属性 (默认值)\n    数据类型 属性名();\n}\n```\n\n**@Target 表示我们的注解可以用在哪些地方？**\n\n@Target(ElementType.TYPE)——接口、类、枚举、注解\n@Target(ElementType.FIELD)——字段、枚举的常量\n@Target(ElementType.METHOD)——方法\n@Target(ElementType.PARAMETER)——方法参数\n@Target(ElementType.CONSTRUCTOR) ——构造函数\n@Target(ElementType.LOCAL_VARIABLE)——局部变量\n@Target(ElementType.ANNOTATION_TYPE)——注解\n@Target(ElementType.PACKAGE)——包\n\n**@Retention 表示我们的注解在什么地方还有效？**\n\n1、RetentionPolicy.SOURCE：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；\n2、RetentionPolicy.CLASS：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期；\n3、RetentionPolicy.RUNTIME：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在；\n这3个生命周期分别对应于：Java源文件(.java文件) —> .class文件 —> 内存中的字节码**。**\n\n**@Documented 表示是否将我们的注解生成在javadoc中**\n\n**@Inherited 表示子类可以继承父类的注解**\n","source":"_posts/Java基础-面试题14-26.md","raw":"---\ntitle: 二、Java基础-面试题14-26\ndate: 2024-08-25 22:32:50\ntags: Java\n---\n##### 14 什么是泛型，有什么好处？\n\n**概念：**在定义类、接口和方法时使用类型参数(type parameter)。这些类型参数在实例化时被具体化为实际的类型。\n\n**好处：**\n\n**类型安全**：\n\n- 使用泛型可以在编译时检测类型错误，避免了运行时出现 `ClassCastException`。例如，使用泛型集合时，插入的元素类型必须匹配集合的类型参数。\n\n**消除强制类型转换**：\n\n- 在没有泛型的代码中，获取集合中的元素需要进行强制类型转换。泛型消除了这种需求，使代码更简洁和安全。\n\n**无泛型的代码：**\n\n```java\nList list = new ArrayList();\nlist.add(\"Hello\");\nString s = (String) list.get(0);  // 需要强制转换\n```\n\n**使用泛型的代码：**\n\n```java\nList<String> list = new ArrayList<>();\nlist.add(\"Hello\");\nString s = list.get(0);  // 不需要强制转换\n```\n\n##### 15 什么是类型擦除？\n\n在编译阶段泛型字段会被擦除，泛型类型参数在编译后被替换为它们的上界（通常是 `Object`）如下：\n\n```java\npublic class Foo<T> {\n\tT bar;\n\tvoid doSth(T param) {\n\t}\n}\n// 编译后，等同于\npublic class Foo<Object> {\n\tObject bar;\n\tvoid doSth(Object param) {\n\t}\n}\n```\n\n##### 16 泛型中的KTVE？Object等分别代表什么含义？\n\nE - Element （在集合中使用，集合中存放的是元素）\n\nT - Type （Java类，任意类型）\n\nK - Key （键）\n\nV - Value （值）\n\nN - Number （数值类型）\n\nObject - 所有类的根类\n\n```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GenericExamples {\n\n    public static void main(String[] args) {\n        // 1. E - Element: 用于集合中的元素\n        List<String> stringList = new ArrayList<>(); // E 被替换为 String\n        stringList.add(\"Apple\");\n        stringList.add(\"Banana\");\n        System.out.println(\"List<E> example:\");\n        for (String element : stringList) {\n            System.out.println(\"Element: \" + element); // 输出: Apple, Banana\n        }\n        System.out.println();\n\n        // 2. T - Type: 通用类型参数\n        TypeExample<Integer> intType = new TypeExample<>();\n        intType.setValue(123);\n        System.out.println(\"T - Type example:\");\n        System.out.println(\"Value: \" + intType.getValue()); // 输出: Value: 123\n        System.out.println();\n\n        // 3. K - Key, V - Value: 键值对映射\n        Map<String, Integer> map = new HashMap<>(); // K 被替换为 String, V 被替换为 Integer\n        map.put(\"Apple\", 1);\n        map.put(\"Banana\", 2);\n        System.out.println(\"K - Key, V - Value example:\");\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n        System.out.println();\n\n        // 4. N - Number: 限制为数值类型\n        NumberExample<Double> doubleExample = new NumberExample<>();\n        doubleExample.setNumber(3.14);\n        System.out.println(\"N - Number example:\");\n        System.out.println(\"Number: \" + doubleExample.getNumber()); // 输出: Number: 3.14\n        System.out.println();\n\n        // 5. Object: 所有类的根类，表示可以接受任何类型\n        List<Object> objectList = new ArrayList<>();\n        objectList.add(\"Hello\");\n        objectList.add(456);\n        objectList.add(78.90);\n        System.out.println(\"Object example:\");\n        for (Object obj : objectList) {\n            System.out.println(\"Object: \" + obj);\n        }\n    }\n\n    // T - 通用类型参数的示例类\n    static class TypeExample<T> {\n        private T value;\n\n        public void setValue(T value) {\n            this.value = value;\n        }\n\n        public T getValue() {\n            return value;\n        }\n    }\n\n    // N - 限制为数值类型的示例类\n    static class NumberExample<N extends Number> {\n        private N number;\n\n        public void setNumber(N number) {\n            this.number = number;\n        }\n\n        public N getNumber() {\n            return number;\n        }\n    }\n}\n\n```\n\n**代码解释**\n\n1. **`List<E>`** 示例：\n   - `stringList` 是一个 `List<String>`，演示了如何使用 `E` 作为集合中的元素类型。\n2. **`T` - Type 示例**：\n   - `TypeExample<T>` 是一个通用类型的类，展示了如何使用泛型类型参数 `T`。\n3. **`K` - Key 和 `V` - Value 示例**：\n   - 使用 `Map<K, V>` 展示了键值对映射的用法，其中 `K` 是键的类型，`V` 是值的类型。\n4. **`N` - Number 示例**：\n   - `NumberExample<N>` 类限制了泛型类型参数 `N` 为数值类型（如 `Integer`、`Double`），展示了如何使用泛型约束。\n5. **`Object` 示例**：\n   - `objectList` 是一个 `List<Object>`，展示了如何存储任意类型的对象。\n\n##### 17 泛型上下界\n\n**上界通配符 `<? extends Number>`**\n\n```scss\nNumber (类)  (上界) //表示可以是 `Number` 类型或其子类型，如 `Integer` 或 `Double`。\n   ^\n   |\n+---------+\n|         |\nInteger   Double (类)\n```\n\n**图示解析**：\n\n- 可以接受 `Number` 及其子类 `Integer`、`Double` 等。\n- 在代码中，`List<? extends Number>` 可以表示 `List<Number>`、`List<Integer>` 或 `List<Double>`。\n\n**下界通配符 `<? super Integer>`**\n\n```scss\nNumber   Object (所有类的根类) //表示可以是 Integer 类型或其父类型，如 Number 或 Object。\n    |         |\n    +---------+\n         |\n      Integer (类)  (下界)\n```\n\n**图示解析**：\n\n- 可以接受 `Integer` 及其父类 `Number`、`Object`。\n- 在代码中，`List<? super Integer>` 可以表示 `List<Integer>`、`List<Number>` 或 `List<Object>`。\n\n```java\n// 使用上界通配符，只读取数据\npublic static void processNumbersExtends(List<? extends Number> list) {\n    for (Number num : list) {\n        System.out.println(\"Number: \" + num);\n    }\n    // list.add(100); // 编译错误，不能添加元素\n}\n\n// 使用下界通配符，写入数据\npublic static void processNumbersSuper(List<? super Integer> list) {\n    list.add(100); // 合法，添加 Integer 类型\n    // Number num = list.get(0); // 编译错误，无法确定具体类型\n    Object obj = list.get(0); // 合法，读取为 Object 类型\n    System.out.println(\"Added: \" + obj);\n}\n```\n\n**代码解析**：\n\n**上界通配符：`<? extends Type>`**\n\n- **语义**：表示参数化类型的**上界**，即该泛型类型可以是 `Type` 本身或其任意子类。\n- **特性**：\n  - **只能读取，不能写入（除了添加 `null`）**：由于编译器无法确定具体的子类型，向其中添加元素可能会破坏类型安全。\n  - **适用于提供者（Producer）角色**：当你只需要从泛型对象中**获取数据**时，使用上界通配符。\n\n**下界通配符：`<? super Type>`**\n\n- **语义**：表示参数化类型的**下界**，即该泛型类型可以是 `Type` 本身或其任意父类。\n- **特性**：\n  - **可以写入，但读取时只能作为 `Object` 类型**：因为具体类型可能是 `Type` 的父类，读取元素时只能确保它至少是 `Object` 类型。\n  - **适用于消费者（Consumer）角色**：当你需要向泛型对象中**写入数据**时，使用下界通配符。\n\n如果一个方法既要写入还要读取，则不要加上限定符号。\n\n##### 18 什么是反射机制？为什么反射慢?\n\n**概念:**反射机制（Reflection）是Java语言的一种特性，它允许程序在运行时动态地获取有关类、接口、方法和字段的信息，并且可以在运行时创建对象、调用方法以及访问或修改字段。\n\n**反射的主要功能**\n\n1. **获取类的 Class 对象**：\n   - 通过 `Class.forName(\"className\")` 或 `object.getClass()` 获取一个类的 `Class` 对象。\n2. **获取类的信息**：\n   - 获取类的构造方法、字段、方法等信息。\n   - 例如，`Class.getDeclaredMethods()` 可以获取类中所有的方法。\n3. **实例化对象**：\n   - 通过反射可以动态地创建类的实例，使用 `Class.newInstance()` 或通过 `Constructor` 创建。\n4. **调用方法**：\n   - 使用 `Method.invoke()` 动态地调用对象的方法。\n5. **访问和修改字段**：\n   - 使用 `Field.get()` 和 `Field.set()` 可以在运行时访问或修改对象的字段值。\n\n```java\nclass ExampleClass {\n    private Integer total = 10;\n    private void printMessage(String message) {\n        System.out.println(\"Message: \" + message);\n    }\n}\npublic class ReflectionExample {\n    public static void main(String[] args) {\n        try {\n            // 获取指定类的 Class 对象\n            Class<?> clazzOne = Class.forName(\"com.qyj.subject.common.interview.basic.GenericExamples\");\n\n            // 获取指定类的所有方法\n            Method[] methods = clazzOne.getDeclaredMethods();\n\n            // 输出每个方法的名字\n            for (Method method : methods) {\n                System.out.println(\"GenericExamples Method: \" + method.getName());\n            }\n\n\n            // 创建ExampleClass的实例\n            ExampleClass instance = new ExampleClass();\n\n            // 获取ExampleClass的Class对象\n            Class<?> clazzTwo = ExampleClass.class;\n\n            // 使用getDeclaredMethod获取特定的方法\n            // 参数为方法名,参数类型(name,type)\n            Method method = clazzTwo.getDeclaredMethod(\"printMessage\", String.class);\n\n            // 由于printMessage是私有方法，我们需要设置可访问性\n            method.setAccessible(true);\n\n            // 调用获取到的方法，传递参数\n            method.invoke(instance, \"Hello, World!\");\n\n            // 获取 total 字段的 Field 对象\n            Field field = clazzTwo.getDeclaredField(\"total\");\n\n            // 将字段设置为可访问\n            field.setAccessible(true);\n\n            // 获取 total 字段的值\n            Integer totalValue = (Integer) field.get(instance);\n            System.out.println(\"Original total value: \" + totalValue); // 输出: 10\n\n            // 修改 total 字段的值\n            field.set(instance, 20);\n            System.out.println(\"Modified total value: \" + field.get(instance)); // 输出: 20\n\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n\n##### 19 Java中创建对象有那些方式?\n\n三种常见的创建对象的方法：使用 `new` 关键字、通过反射、以及通过反序列化。\n\n**`new` 关键字**:\n\n- 最常见的对象创建方式。\n- 编译时确定的，性能高。\n\n**反射**:\n\n- 允许在运行时动态创建对象。\n- 更灵活，但性能较低，且需要处理可能的异常。\n\n**反序列化**:\n\n- 通过将字节流转换回对象来创建对象。\n- 不调用构造器，直接恢复对象的状态，适用于分布式系统或持久化场景。\n\n```java\nimport java.io.*;  \nimport java.lang.reflect.Constructor;\n\npublic class ObjectCreationExample {\n\n    // 1. 使用new关键字创建对象\n    public void createUsingNew() {\n        Example example = new Example(\"Hello from new!\");\n        example.printMessage(); // 输出: Hello from new!\n    }\n\n    // 2. 使用反射创建对象\n    public void createUsingReflection() {\n        try {\n            // 获取Example类的Class对象\n            Class<?> clazz = Example.class;\n\n            // 获取构造器\n            Constructor<?> constructor = clazz.getConstructor(String.class);\n\n            // 使用构造器通过反射创建对象\n            Example example = (Example) constructor.newInstance(\"Hello via Reflection!\");\n            example.printMessage(); // 输出: Hello via Reflection!\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    // 3. 使用反序列化创建对象\n    public void createUsingDeserialization() {\n        // 序列化：将对象写入文件\n        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"example.ser\"))) {\n            Example example = new Example(\"Hello, World!\");\n            out.writeObject(example); // 将对象写入文件\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // 反序列化：从文件中读取对象\n        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(\"example.ser\"))) {\n            Example example = (Example) in.readObject(); // 通过反序列化创建对象\n            example.printMessage(); // 输出: Hello, World!\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        ObjectCreationExample objectCreationExample = new ObjectCreationExample();\n\n        // 使用new关键字创建对象\n        System.out.println(\"Creating object using new keyword:\");\n        objectCreationExample.createUsingNew();\n\n        System.out.println(\"\\nCreating object using reflection:\");\n        // 使用反射创建对象\n        objectCreationExample.createUsingReflection();\n\n        System.out.println(\"\\nCreating object using deserialization:\");\n        // 使用反序列化创建对象\n        objectCreationExample.createUsingDeserialization();\n    }\n}\n\n// 示例类，支持序列化\nclass Example implements Serializable {\n    private static final long serialVersionUID = 1L;\n    private String message;\n\n    public Example(String message) {\n        this.message = message;\n    }\n\n    public void printMessage() {\n        System.out.println(message);\n    }\n}\n```\n\n##### 20 序列化与反序列化\n\n20.1 **序列化:**是将一个对象的状态转换成字节流过程, **反序列化**：是将字节流转换回原始对象的过程。\n\n* **序列化：**对象 -> 字节流\n\n* **反序列化：**字节流 -> 对象\n\n20.2 **用途(为什么要使用序列化?)：**序列化是将对象转换成可传输的格式的过程，是一种数据传输手段，广泛应用于网络传输，RMI和RPC，数据存储和持久化等应用场景。\n\n20.3 **重点知识：**\n\n* 如果一个类想被序列化，则需要实现Serializable接口。\n\n* 通过`ObjectOutputStream`和`ObjectInputStream`对对象进行序列化与反序列化，如上述的代码所示。\n\n* 序列化不能保存静态变量\n* `transient` 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件，在被反序列化后，`transient` 变量的值被设为初始值，如 `int` 型的是 0，对象型的是 `null`。\n\n##### 21 序列化的实现原理\n\n**序列化的基本原理**\n\n1. **`Serializable` 接口**：\n   - 在Java中，一个类要实现序列化，必须实现 `Serializable` 接口。`Serializable` 是一个标记接口，意味着它没有任何方法，仅作为一个标记，表示该类的实例可以被序列化。\n   - 实现了 `Serializable` 接口的类的实例可以被序列化为字节流，然后再反序列化为对象。\n2. **序列化过程**：\n   - 序列化的过程是将对象的状态转化为字节流。这个过程由 `ObjectOutputStream` 类的 `writeObject()` 方法完成。\n   - `ObjectOutputStream` 会遍历对象的所有字段，并将它们的值写入输出流中。如果某个字段本身是对象引用，那么该对象也会被递归序列化。\n   - 类的元数据（例如类的名称、版本号等）以及对象的类型信息（例如对象属于哪个类）也会被写入字节流。\n3. **反序列化过程**：\n   - 反序列化的过程是将字节流恢复为原始的对象。这个过程由 `ObjectInputStream` 类的 `readObject()` 方法完成。\n   - `ObjectInputStream` 通过读取字节流中的类的元数据和字段数据，重新构造对象的实例。\n\n```java\n// 3. 使用反序列化创建对象\npublic void createUsingDeserialization() {\n    // 序列化：将对象写入文件\n    try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"example.ser\"))) {\n        Example example = new Example(\"Hello, World!\");\n        out.writeObject(example); // 将对象写入文件\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    // 反序列化：从文件中读取对象\n    try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(\"example.ser\"))) {\n        Example example = (Example) in.readObject(); // 通过反序列化创建对象\n        example.printMessage(); // 输出: Hello, World!\n    } catch (IOException | ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n##### 22 Serializable和Externalizable接口有什么不同？\n\n**实现方式：**\n\n* 通过 `Serializable` 接口，Java 可以自动处理对象的序列化和反序列化过程，无需开发者干预。\n\n* 通过 `Externalizable` 接口，开发者可以完全控制序列化和反序列化过程，手动实现 `writeExternal` 和 `readExternal` 方法。\n\n**无参构造器**:\n\n- 当使用 `Externalizable` 接口时，反序列化过程中需要使用无参构造器来创建对象实例，因此必须提供一个无参构造器。\n\n```java\nprivate static final long serialVersionUID = 1L; // 用于 Serializable 接口的版本控制\n\nprivate String name;\nprivate int age;\n\n// 必须提供一个无参构造器，供 Externalizable 使用\npublic Person() {\n}\n\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\n```\n\n**`writeExternal` 和 `readExternal` 方法：**\n\n```java\n@Override\npublic void writeExternal(ObjectOutput out) throws IOException {\n    // 手动控制序列化过程，只写入需要序列化的字段\n    out.writeUTF(name);\n    out.writeInt(age);\n}\n\n@Override\npublic void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n    // 手动控制反序列化过程，按顺序读取字段并恢复对象状态\n    this.name = in.readUTF();\n    this.age = in.readInt();\n}\n```\n\n##### 23 `serialVersionUID` 有何用途? 如果没定义会有什么问题？\n\n23.1 **用途：**`serialVersionUID` 是一个独特的标识符，用于表示类的序列化版本。它是 `Serializable` 接口的一部分，用来确保在反序列化时，类的版本与序列化时的版本保持一致。\n\n23.2 如果未定义 `serialVersionUID：`Java 将自动生成，但这会带来版本控制上的不确定性，可能导致 `InvalidClassException` 异常，尤其在类结构发生变化时。\n\n23.2 `serialVersionUlD`有两种显示的生成方式:是默认的1L，比如:\n\n```java\nprivate static final long serialVersionUID =1L;\n```\n\n二是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如:\n\n```java\nprivate static final long serialVersionUlD = xxxxL;\n```\n\n##### 24 Java的动态代理是什么？如何实现？\n\n**概念：**动态代理是Java 一大特性。 它的显著优势就是无侵入式的扩展代码。 通俗来讲就是**可以用来做方法的增强，让你可以在不修改源码的情况下，增强一些方法或者功能，在方法执行前后做任何你想做的事情**。 具体应用的话，比如可以添加调用日志，做事务控制等。\n\n**如何实现：**\n\n1、`JDK`动态代理：`Java.lang.reflect`包中的Proxy类和InvocationHandler接口提供了生成动态代理类的能力。\n\n2、`Cglib`动态代理：`Cglib(Code Generation Library)`是一个第三方代码生成类库，运行时在内存中动态生成一个子类对象从而实现对目标对象功能的扩展。\n\n**JDK动态代理**\n\n**步骤：**\n\n1. **定义接口**：目标类必须实现的接口。\n2. **实现接口的目标类**：实现业务逻辑。\n3. **创建`InvocationHandler`**：实现 `InvocationHandler` 接口，编写代理逻辑。\n4. **使用`Proxy`创建代理对象**：通过 `Proxy.newProxyInstance` 方法创建代理对象。\n\n**代码示例：**\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\n// 1. 定义接口 定义了目标类需要实现的方法 perform()\ninterface Service {\n    void perform();\n}\n\n// 2. 实现接口的目标类 实现了 Service 接口的 perform 方法，这是需要代理的目标对象。\nclass RealService implements Service {\n    @Override\n    public void perform() {\n        System.out.println(\"RealService: Performing the service.\");\n    }\n}\n\n// 3. 创建InvocationHandler\nclass ServiceInvocationHandler implements InvocationHandler {\n    private final Object target;\n\n    public ServiceInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"Before method: \" + method.getName()); //方法执行前\n        Object result = method.invoke(target, args); //方法执行中\n        System.out.println(\"After method: \" + method.getName()); //方法执行后\n        return result;\n    }\n}\n\npublic class DynamicProxyExample {\n    public static void main(String[] args) {\n        // 4. 使用Proxy创建代理对象\n        // Proxy.newProxyInstance(\n\t// 类加载器：加载代理类的字节码。\n\t// 接口数组：指定代理对象要实现的接口。\n\t// InvocationHandler：定义代理对象如何处理方法调用。)\n        RealService realService = new RealService();//实例化目标对象\n        Service proxyInstance = (Service) Proxy.newProxyInstance(\n                realService.getClass().getClassLoader(),\n                realService.getClass().getInterfaces(),\n                new ServiceInvocationHandler(realService)\n        );// 创建目标对象的代理对象\n\n        // 调用代理对象的方法\n        proxyInstance.perform();\n    }\n}\n```\n\n##### 25 静态代理和动态代理的区别\n\n静态代理就是编译期要确定的，动态代理是运行期间确定的\n\n##### 26 什么是元注解\n\n**概念：**定义其他注解的注解，通过元注解产生其他注解，如@Override就是通过元注解定义出来的\n\n元注解有四个：@Target(表示该注解可以用在什么地方)、@Retention(表示在什么级别保存该注解信息)、@Documented(将此注解包含在javadoc中)、@Inherited(允许子类继承父类中的注解)\n\n**怎么定义一个注解？**\n\n在Java中，自定义注解通常使用`@interface`来定义，常见格式如下：\n\n```java\n@interface 注解名称 {\n    // 注解的属性 (默认值)\n    数据类型 属性名();\n}\n```\n\n**@Target 表示我们的注解可以用在哪些地方？**\n\n@Target(ElementType.TYPE)——接口、类、枚举、注解\n@Target(ElementType.FIELD)——字段、枚举的常量\n@Target(ElementType.METHOD)——方法\n@Target(ElementType.PARAMETER)——方法参数\n@Target(ElementType.CONSTRUCTOR) ——构造函数\n@Target(ElementType.LOCAL_VARIABLE)——局部变量\n@Target(ElementType.ANNOTATION_TYPE)——注解\n@Target(ElementType.PACKAGE)——包\n\n**@Retention 表示我们的注解在什么地方还有效？**\n\n1、RetentionPolicy.SOURCE：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；\n2、RetentionPolicy.CLASS：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期；\n3、RetentionPolicy.RUNTIME：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在；\n这3个生命周期分别对应于：Java源文件(.java文件) —> .class文件 —> 内存中的字节码**。**\n\n**@Documented 表示是否将我们的注解生成在javadoc中**\n\n**@Inherited 表示子类可以继承父类的注解**\n","slug":"Java基础-面试题14-26","published":1,"updated":"2024-08-26T12:52:00.281Z","_id":"cm0azws7q0000z8u44xpy6sd6","comments":1,"layout":"post","photos":[],"content":"<h5 id=\"14-什么是泛型，有什么好处？\"><a href=\"#14-什么是泛型，有什么好处？\" class=\"headerlink\" title=\"14 什么是泛型，有什么好处？\"></a>14 什么是泛型，有什么好处？</h5><p><strong>概念：</strong>在定义类、接口和方法时使用类型参数(type parameter)。这些类型参数在实例化时被具体化为实际的类型。</p>\n<p><strong>好处：</strong></p>\n<p><strong>类型安全</strong>：</p>\n<ul>\n<li>使用泛型可以在编译时检测类型错误，避免了运行时出现 <code>ClassCastException</code>。例如，使用泛型集合时，插入的元素类型必须匹配集合的类型参数。</li>\n</ul>\n<p><strong>消除强制类型转换</strong>：</p>\n<ul>\n<li>在没有泛型的代码中，获取集合中的元素需要进行强制类型转换。泛型消除了这种需求，使代码更简洁和安全。</li>\n</ul>\n<p><strong>无泛型的代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">List</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> (String) list.get(<span class=\"number\">0</span>);  <span class=\"comment\">// 需要强制转换</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用泛型的代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> list.get(<span class=\"number\">0</span>);  <span class=\"comment\">// 不需要强制转换</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"15-什么是类型擦除？\"><a href=\"#15-什么是类型擦除？\" class=\"headerlink\" title=\"15 什么是类型擦除？\"></a>15 什么是类型擦除？</h5><p>在编译阶段泛型字段会被擦除，泛型类型参数在编译后被替换为它们的上界（通常是 <code>Object</code>）如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span>&lt;T&gt; &#123;</span><br><span class=\"line\">\tT bar;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">doSth</span><span class=\"params\">(T param)</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 编译后，等同于</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span>&lt;Object&gt; &#123;</span><br><span class=\"line\">\tObject bar;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">doSth</span><span class=\"params\">(Object param)</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"16-泛型中的KTVE？Object等分别代表什么含义？\"><a href=\"#16-泛型中的KTVE？Object等分别代表什么含义？\" class=\"headerlink\" title=\"16 泛型中的KTVE？Object等分别代表什么含义？\"></a>16 泛型中的KTVE？Object等分别代表什么含义？</h5><p>E - Element （在集合中使用，集合中存放的是元素）</p>\n<p>T - Type （Java类，任意类型）</p>\n<p>K - Key （键）</p>\n<p>V - Value （值）</p>\n<p>N - Number （数值类型）</p>\n<p>Object - 所有类的根类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GenericExamples</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. E - Element: 用于集合中的元素</span></span><br><span class=\"line\">        List&lt;String&gt; stringList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(); <span class=\"comment\">// E 被替换为 String</span></span><br><span class=\"line\">        stringList.add(<span class=\"string\">&quot;Apple&quot;</span>);</span><br><span class=\"line\">        stringList.add(<span class=\"string\">&quot;Banana&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;List&lt;E&gt; example:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String element : stringList) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Element: &quot;</span> + element); <span class=\"comment\">// 输出: Apple, Banana</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. T - Type: 通用类型参数</span></span><br><span class=\"line\">        TypeExample&lt;Integer&gt; intType = <span class=\"keyword\">new</span> <span class=\"title class_\">TypeExample</span>&lt;&gt;();</span><br><span class=\"line\">        intType.setValue(<span class=\"number\">123</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;T - Type example:&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Value: &quot;</span> + intType.getValue()); <span class=\"comment\">// 输出: Value: 123</span></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. K - Key, V - Value: 键值对映射</span></span><br><span class=\"line\">        Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(); <span class=\"comment\">// K 被替换为 String, V 被替换为 Integer</span></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;K - Key, V - Value example:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Key: &quot;</span> + entry.getKey() + <span class=\"string\">&quot;, Value: &quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4. N - Number: 限制为数值类型</span></span><br><span class=\"line\">        NumberExample&lt;Double&gt; doubleExample = <span class=\"keyword\">new</span> <span class=\"title class_\">NumberExample</span>&lt;&gt;();</span><br><span class=\"line\">        doubleExample.setNumber(<span class=\"number\">3.14</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;N - Number example:&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Number: &quot;</span> + doubleExample.getNumber()); <span class=\"comment\">// 输出: Number: 3.14</span></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5. Object: 所有类的根类，表示可以接受任何类型</span></span><br><span class=\"line\">        List&lt;Object&gt; objectList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        objectList.add(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">        objectList.add(<span class=\"number\">456</span>);</span><br><span class=\"line\">        objectList.add(<span class=\"number\">78.90</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Object example:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : objectList) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Object: &quot;</span> + obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T - 通用类型参数的示例类</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TypeExample</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setValue</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> T <span class=\"title function_\">getValue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// N - 限制为数值类型的示例类</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NumberExample</span>&lt;N <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> N number;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNumber</span><span class=\"params\">(N number)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.number = number;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> N <span class=\"title function_\">getNumber</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码解释</strong></p>\n<ol>\n<li><strong><code>List&lt;E&gt;</code></strong> 示例：<ul>\n<li><code>stringList</code> 是一个 <code>List&lt;String&gt;</code>，演示了如何使用 <code>E</code> 作为集合中的元素类型。</li>\n</ul>\n</li>\n<li><strong><code>T</code> - Type 示例</strong>：<ul>\n<li><code>TypeExample&lt;T&gt;</code> 是一个通用类型的类，展示了如何使用泛型类型参数 <code>T</code>。</li>\n</ul>\n</li>\n<li><strong><code>K</code> - Key 和 <code>V</code> - Value 示例</strong>：<ul>\n<li>使用 <code>Map&lt;K, V&gt;</code> 展示了键值对映射的用法，其中 <code>K</code> 是键的类型，<code>V</code> 是值的类型。</li>\n</ul>\n</li>\n<li><strong><code>N</code> - Number 示例</strong>：<ul>\n<li><code>NumberExample&lt;N&gt;</code> 类限制了泛型类型参数 <code>N</code> 为数值类型（如 <code>Integer</code>、<code>Double</code>），展示了如何使用泛型约束。</li>\n</ul>\n</li>\n<li><strong><code>Object</code> 示例</strong>：<ul>\n<li><code>objectList</code> 是一个 <code>List&lt;Object&gt;</code>，展示了如何存储任意类型的对象。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"17-泛型上下界\"><a href=\"#17-泛型上下界\" class=\"headerlink\" title=\"17 泛型上下界\"></a>17 泛型上下界</h5><p><strong>上界通配符 <code>&lt;? extends Number&gt;</code></strong></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number (类)  (上界) <span class=\"comment\">//表示可以是 `Number` 类型或其子类型，如 `Integer` 或 `Double`。</span></span><br><span class=\"line\">   ^</span><br><span class=\"line\">   |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">|         |</span><br><span class=\"line\">Integer   Double (类)</span><br></pre></td></tr></table></figure>\n\n<p><strong>图示解析</strong>：</p>\n<ul>\n<li>可以接受 <code>Number</code> 及其子类 <code>Integer</code>、<code>Double</code> 等。</li>\n<li>在代码中，<code>List&lt;? extends Number&gt;</code> 可以表示 <code>List&lt;Number&gt;</code>、<code>List&lt;Integer&gt;</code> 或 <code>List&lt;Double&gt;</code>。</li>\n</ul>\n<p><strong>下界通配符 <code>&lt;? super Integer&gt;</code></strong></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number   <span class=\"selector-tag\">Object</span> (所有类的根类) <span class=\"comment\">//表示可以是 Integer 类型或其父类型，如 Number 或 Object。</span></span><br><span class=\"line\">    |         |</span><br><span class=\"line\">    +---------+</span><br><span class=\"line\">         |</span><br><span class=\"line\">      Integer (类)  (下界)</span><br></pre></td></tr></table></figure>\n\n<p><strong>图示解析</strong>：</p>\n<ul>\n<li>可以接受 <code>Integer</code> 及其父类 <code>Number</code>、<code>Object</code>。</li>\n<li>在代码中，<code>List&lt;? super Integer&gt;</code> 可以表示 <code>List&lt;Integer&gt;</code>、<code>List&lt;Number&gt;</code> 或 <code>List&lt;Object&gt;</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用上界通配符，只读取数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processNumbersExtends</span><span class=\"params\">(List&lt;? extends Number&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Number num : list) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Number: &quot;</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// list.add(100); // 编译错误，不能添加元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用下界通配符，写入数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processNumbersSuper</span><span class=\"params\">(List&lt;? <span class=\"built_in\">super</span> Integer&gt; list)</span> &#123;</span><br><span class=\"line\">    list.add(<span class=\"number\">100</span>); <span class=\"comment\">// 合法，添加 Integer 类型</span></span><br><span class=\"line\">    <span class=\"comment\">// Number num = list.get(0); // 编译错误，无法确定具体类型</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> list.get(<span class=\"number\">0</span>); <span class=\"comment\">// 合法，读取为 Object 类型</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Added: &quot;</span> + obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码解析</strong>：</p>\n<p><strong>上界通配符：<code>&lt;? extends Type&gt;</code></strong></p>\n<ul>\n<li><strong>语义</strong>：表示参数化类型的<strong>上界</strong>，即该泛型类型可以是 <code>Type</code> 本身或其任意子类。</li>\n<li><strong>特性</strong>：<ul>\n<li><strong>只能读取，不能写入（除了添加 <code>null</code>）</strong>：由于编译器无法确定具体的子类型，向其中添加元素可能会破坏类型安全。</li>\n<li><strong>适用于提供者（Producer）角色</strong>：当你只需要从泛型对象中<strong>获取数据</strong>时，使用上界通配符。</li>\n</ul>\n</li>\n</ul>\n<p><strong>下界通配符：<code>&lt;? super Type&gt;</code></strong></p>\n<ul>\n<li><strong>语义</strong>：表示参数化类型的<strong>下界</strong>，即该泛型类型可以是 <code>Type</code> 本身或其任意父类。</li>\n<li><strong>特性</strong>：<ul>\n<li><strong>可以写入，但读取时只能作为 <code>Object</code> 类型</strong>：因为具体类型可能是 <code>Type</code> 的父类，读取元素时只能确保它至少是 <code>Object</code> 类型。</li>\n<li><strong>适用于消费者（Consumer）角色</strong>：当你需要向泛型对象中<strong>写入数据</strong>时，使用下界通配符。</li>\n</ul>\n</li>\n</ul>\n<p>如果一个方法既要写入还要读取，则不要加上限定符号。</p>\n<h5 id=\"18-什么是反射机制？为什么反射慢\"><a href=\"#18-什么是反射机制？为什么反射慢\" class=\"headerlink\" title=\"18 什么是反射机制？为什么反射慢?\"></a>18 什么是反射机制？为什么反射慢?</h5><p>**概念:**反射机制（Reflection）是Java语言的一种特性，它允许程序在运行时动态地获取有关类、接口、方法和字段的信息，并且可以在运行时创建对象、调用方法以及访问或修改字段。</p>\n<p><strong>反射的主要功能</strong></p>\n<ol>\n<li><strong>获取类的 Class 对象</strong>：<ul>\n<li>通过 <code>Class.forName(&quot;className&quot;)</code> 或 <code>object.getClass()</code> 获取一个类的 <code>Class</code> 对象。</li>\n</ul>\n</li>\n<li><strong>获取类的信息</strong>：<ul>\n<li>获取类的构造方法、字段、方法等信息。</li>\n<li>例如，<code>Class.getDeclaredMethods()</code> 可以获取类中所有的方法。</li>\n</ul>\n</li>\n<li><strong>实例化对象</strong>：<ul>\n<li>通过反射可以动态地创建类的实例，使用 <code>Class.newInstance()</code> 或通过 <code>Constructor</code> 创建。</li>\n</ul>\n</li>\n<li><strong>调用方法</strong>：<ul>\n<li>使用 <code>Method.invoke()</code> 动态地调用对象的方法。</li>\n</ul>\n</li>\n<li><strong>访问和修改字段</strong>：<ul>\n<li>使用 <code>Field.get()</code> 和 <code>Field.set()</code> 可以在运行时访问或修改对象的字段值。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ExampleClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Integer</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMessage</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Message: &quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReflectionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取指定类的 Class 对象</span></span><br><span class=\"line\">            Class&lt;?&gt; clazzOne = Class.forName(<span class=\"string\">&quot;com.qyj.subject.common.interview.basic.GenericExamples&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取指定类的所有方法</span></span><br><span class=\"line\">            Method[] methods = clazzOne.getDeclaredMethods();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 输出每个方法的名字</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;GenericExamples Method: &quot;</span> + method.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建ExampleClass的实例</span></span><br><span class=\"line\">            <span class=\"type\">ExampleClass</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ExampleClass</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取ExampleClass的Class对象</span></span><br><span class=\"line\">            Class&lt;?&gt; clazzTwo = ExampleClass.class;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 使用getDeclaredMethod获取特定的方法</span></span><br><span class=\"line\">            <span class=\"comment\">// 参数为方法名,参数类型(name,type)</span></span><br><span class=\"line\">            <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazzTwo.getDeclaredMethod(<span class=\"string\">&quot;printMessage&quot;</span>, String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 由于printMessage是私有方法，我们需要设置可访问性</span></span><br><span class=\"line\">            method.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 调用获取到的方法，传递参数</span></span><br><span class=\"line\">            method.invoke(instance, <span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取 total 字段的 Field 对象</span></span><br><span class=\"line\">            <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> clazzTwo.getDeclaredField(<span class=\"string\">&quot;total&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将字段设置为可访问</span></span><br><span class=\"line\">            field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取 total 字段的值</span></span><br><span class=\"line\">            <span class=\"type\">Integer</span> <span class=\"variable\">totalValue</span> <span class=\"operator\">=</span> (Integer) field.get(instance);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Original total value: &quot;</span> + totalValue); <span class=\"comment\">// 输出: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 修改 total 字段的值</span></span><br><span class=\"line\">            field.set(instance, <span class=\"number\">20</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Modified total value: &quot;</span> + field.get(instance)); <span class=\"comment\">// 输出: 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"19-Java中创建对象有那些方式\"><a href=\"#19-Java中创建对象有那些方式\" class=\"headerlink\" title=\"19 Java中创建对象有那些方式?\"></a>19 Java中创建对象有那些方式?</h5><p>三种常见的创建对象的方法：使用 <code>new</code> 关键字、通过反射、以及通过反序列化。</p>\n<p><strong><code>new</code> 关键字</strong>:</p>\n<ul>\n<li>最常见的对象创建方式。</li>\n<li>编译时确定的，性能高。</li>\n</ul>\n<p><strong>反射</strong>:</p>\n<ul>\n<li>允许在运行时动态创建对象。</li>\n<li>更灵活，但性能较低，且需要处理可能的异常。</li>\n</ul>\n<p><strong>反序列化</strong>:</p>\n<ul>\n<li>通过将字节流转换回对象来创建对象。</li>\n<li>不调用构造器，直接恢复对象的状态，适用于分布式系统或持久化场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ObjectCreationExample</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1. 使用new关键字创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUsingNew</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Example</span>(<span class=\"string\">&quot;Hello from new!&quot;</span>);</span><br><span class=\"line\">        example.printMessage(); <span class=\"comment\">// 输出: Hello from new!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 使用反射创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUsingReflection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取Example类的Class对象</span></span><br><span class=\"line\">            Class&lt;?&gt; clazz = Example.class;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取构造器</span></span><br><span class=\"line\">            Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 使用构造器通过反射创建对象</span></span><br><span class=\"line\">            <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> (Example) constructor.newInstance(<span class=\"string\">&quot;Hello via Reflection!&quot;</span>);</span><br><span class=\"line\">            example.printMessage(); <span class=\"comment\">// 输出: Hello via Reflection!</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 使用反序列化创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUsingDeserialization</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 序列化：将对象写入文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;example.ser&quot;</span>))) &#123;</span><br><span class=\"line\">            <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Example</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\">            out.writeObject(example); <span class=\"comment\">// 将对象写入文件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 反序列化：从文件中读取对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">ObjectInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;example.ser&quot;</span>))) &#123;</span><br><span class=\"line\">            <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> (Example) in.readObject(); <span class=\"comment\">// 通过反序列化创建对象</span></span><br><span class=\"line\">            example.printMessage(); <span class=\"comment\">// 输出: Hello, World!</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectCreationExample</span> <span class=\"variable\">objectCreationExample</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectCreationExample</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用new关键字创建对象</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Creating object using new keyword:&quot;</span>);</span><br><span class=\"line\">        objectCreationExample.createUsingNew();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\nCreating object using reflection:&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 使用反射创建对象</span></span><br><span class=\"line\">        objectCreationExample.createUsingReflection();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\nCreating object using deserialization:&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 使用反序列化创建对象</span></span><br><span class=\"line\">        objectCreationExample.createUsingDeserialization();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例类，支持序列化</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Example</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMessage</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"20-序列化与反序列化\"><a href=\"#20-序列化与反序列化\" class=\"headerlink\" title=\"20 序列化与反序列化\"></a>20 序列化与反序列化</h5><p>20.1 **序列化:**是将一个对象的状态转换成字节流过程, <strong>反序列化</strong>：是将字节流转换回原始对象的过程。</p>\n<ul>\n<li><p><strong>序列化：</strong>对象 -&gt; 字节流</p>\n</li>\n<li><p><strong>反序列化：</strong>字节流 -&gt; 对象</p>\n</li>\n</ul>\n<p>20.2 <strong>用途(为什么要使用序列化?)：</strong>序列化是将对象转换成可传输的格式的过程，是一种数据传输手段，广泛应用于网络传输，RMI和RPC，数据存储和持久化等应用场景。</p>\n<p>20.3 <strong>重点知识：</strong></p>\n<ul>\n<li><p>如果一个类想被序列化，则需要实现Serializable接口。</p>\n</li>\n<li><p>通过<code>ObjectOutputStream</code>和<code>ObjectInputStream</code>对对象进行序列化与反序列化，如上述的代码所示。</p>\n</li>\n<li><p>序列化不能保存静态变量</p>\n</li>\n<li><p><code>transient</code> 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件，在被反序列化后，<code>transient</code> 变量的值被设为初始值，如 <code>int</code> 型的是 0，对象型的是 <code>null</code>。</p>\n</li>\n</ul>\n<h5 id=\"21-序列化的实现原理\"><a href=\"#21-序列化的实现原理\" class=\"headerlink\" title=\"21 序列化的实现原理\"></a>21 序列化的实现原理</h5><p><strong>序列化的基本原理</strong></p>\n<ol>\n<li><strong><code>Serializable</code> 接口</strong>：<ul>\n<li>在Java中，一个类要实现序列化，必须实现 <code>Serializable</code> 接口。<code>Serializable</code> 是一个标记接口，意味着它没有任何方法，仅作为一个标记，表示该类的实例可以被序列化。</li>\n<li>实现了 <code>Serializable</code> 接口的类的实例可以被序列化为字节流，然后再反序列化为对象。</li>\n</ul>\n</li>\n<li><strong>序列化过程</strong>：<ul>\n<li>序列化的过程是将对象的状态转化为字节流。这个过程由 <code>ObjectOutputStream</code> 类的 <code>writeObject()</code> 方法完成。</li>\n<li><code>ObjectOutputStream</code> 会遍历对象的所有字段，并将它们的值写入输出流中。如果某个字段本身是对象引用，那么该对象也会被递归序列化。</li>\n<li>类的元数据（例如类的名称、版本号等）以及对象的类型信息（例如对象属于哪个类）也会被写入字节流。</li>\n</ul>\n</li>\n<li><strong>反序列化过程</strong>：<ul>\n<li>反序列化的过程是将字节流恢复为原始的对象。这个过程由 <code>ObjectInputStream</code> 类的 <code>readObject()</code> 方法完成。</li>\n<li><code>ObjectInputStream</code> 通过读取字节流中的类的元数据和字段数据，重新构造对象的实例。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 使用反序列化创建对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUsingDeserialization</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 序列化：将对象写入文件</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;example.ser&quot;</span>))) &#123;</span><br><span class=\"line\">        <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Example</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\">        out.writeObject(example); <span class=\"comment\">// 将对象写入文件</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 反序列化：从文件中读取对象</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">ObjectInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;example.ser&quot;</span>))) &#123;</span><br><span class=\"line\">        <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> (Example) in.readObject(); <span class=\"comment\">// 通过反序列化创建对象</span></span><br><span class=\"line\">        example.printMessage(); <span class=\"comment\">// 输出: Hello, World!</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"22-Serializable和Externalizable接口有什么不同？\"><a href=\"#22-Serializable和Externalizable接口有什么不同？\" class=\"headerlink\" title=\"22 Serializable和Externalizable接口有什么不同？\"></a>22 Serializable和Externalizable接口有什么不同？</h5><p><strong>实现方式：</strong></p>\n<ul>\n<li><p>通过 <code>Serializable</code> 接口，Java 可以自动处理对象的序列化和反序列化过程，无需开发者干预。</p>\n</li>\n<li><p>通过 <code>Externalizable</code> 接口，开发者可以完全控制序列化和反序列化过程，手动实现 <code>writeExternal</code> 和 <code>readExternal</code> 方法。</p>\n</li>\n</ul>\n<p><strong>无参构造器</strong>:</p>\n<ul>\n<li>当使用 <code>Externalizable</code> 接口时，反序列化过程中需要使用无参构造器来创建对象实例，因此必须提供一个无参构造器。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>; <span class=\"comment\">// 用于 Serializable 接口的版本控制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 必须提供一个无参构造器，供 Externalizable 使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>writeExternal</code> 和 <code>readExternal</code> 方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeExternal</span><span class=\"params\">(ObjectOutput out)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 手动控制序列化过程，只写入需要序列化的字段</span></span><br><span class=\"line\">    out.writeUTF(name);</span><br><span class=\"line\">    out.writeInt(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readExternal</span><span class=\"params\">(ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 手动控制反序列化过程，按顺序读取字段并恢复对象状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = in.readUTF();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = in.readInt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"23-serialVersionUID-有何用途-如果没定义会有什么问题？\"><a href=\"#23-serialVersionUID-有何用途-如果没定义会有什么问题？\" class=\"headerlink\" title=\"23 serialVersionUID 有何用途? 如果没定义会有什么问题？\"></a>23 <code>serialVersionUID</code> 有何用途? 如果没定义会有什么问题？</h5><p>23.1 <strong>用途：</strong><code>serialVersionUID</code> 是一个独特的标识符，用于表示类的序列化版本。它是 <code>Serializable</code> 接口的一部分，用来确保在反序列化时，类的版本与序列化时的版本保持一致。</p>\n<p>23.2 如果未定义 <code>serialVersionUID：</code>Java 将自动生成，但这会带来版本控制上的不确定性，可能导致 <code>InvalidClassException</code> 异常，尤其在类结构发生变化时。</p>\n<p>23.2 <code>serialVersionUlD</code>有两种显示的生成方式:是默认的1L，比如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span><span class=\"number\">1L</span>;</span><br></pre></td></tr></table></figure>\n\n<p>二是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUlD</span> <span class=\"operator\">=</span> xxxxL;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"24-Java的动态代理是什么？如何实现？\"><a href=\"#24-Java的动态代理是什么？如何实现？\" class=\"headerlink\" title=\"24 Java的动态代理是什么？如何实现？\"></a>24 Java的动态代理是什么？如何实现？</h5><p><strong>概念：</strong>动态代理是Java 一大特性。 它的显著优势就是无侵入式的扩展代码。 通俗来讲就是<strong>可以用来做方法的增强，让你可以在不修改源码的情况下，增强一些方法或者功能，在方法执行前后做任何你想做的事情</strong>。 具体应用的话，比如可以添加调用日志，做事务控制等。</p>\n<p><strong>如何实现：</strong></p>\n<p>1、<code>JDK</code>动态代理：<code>Java.lang.reflect</code>包中的Proxy类和InvocationHandler接口提供了生成动态代理类的能力。</p>\n<p>2、<code>Cglib</code>动态代理：<code>Cglib(Code Generation Library)</code>是一个第三方代码生成类库，运行时在内存中动态生成一个子类对象从而实现对目标对象功能的扩展。</p>\n<p><strong>JDK动态代理</strong></p>\n<p><strong>步骤：</strong></p>\n<ol>\n<li><strong>定义接口</strong>：目标类必须实现的接口。</li>\n<li><strong>实现接口的目标类</strong>：实现业务逻辑。</li>\n<li>**创建<code>InvocationHandler</code>**：实现 <code>InvocationHandler</code> 接口，编写代理逻辑。</li>\n<li><strong>使用<code>Proxy</code>创建代理对象</strong>：通过 <code>Proxy.newProxyInstance</code> 方法创建代理对象。</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 定义接口 定义了目标类需要实现的方法 perform()</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">perform</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 实现接口的目标类 实现了 Service 接口的 perform 方法，这是需要代理的目标对象。</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RealService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">perform</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;RealService: Performing the service.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 创建InvocationHandler</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ServiceInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ServiceInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before method: &quot;</span> + method.getName()); <span class=\"comment\">//方法执行前</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args); <span class=\"comment\">//方法执行中</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After method: &quot;</span> + method.getName()); <span class=\"comment\">//方法执行后</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicProxyExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 4. 使用Proxy创建代理对象</span></span><br><span class=\"line\">        <span class=\"comment\">// Proxy.newProxyInstance(</span></span><br><span class=\"line\">\t<span class=\"comment\">// 类加载器：加载代理类的字节码。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 接口数组：指定代理对象要实现的接口。</span></span><br><span class=\"line\">\t<span class=\"comment\">// InvocationHandler：定义代理对象如何处理方法调用。)</span></span><br><span class=\"line\">        <span class=\"type\">RealService</span> <span class=\"variable\">realService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RealService</span>();<span class=\"comment\">//实例化目标对象</span></span><br><span class=\"line\">        <span class=\"type\">Service</span> <span class=\"variable\">proxyInstance</span> <span class=\"operator\">=</span> (Service) Proxy.newProxyInstance(</span><br><span class=\"line\">                realService.getClass().getClassLoader(),</span><br><span class=\"line\">                realService.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ServiceInvocationHandler</span>(realService)</span><br><span class=\"line\">        );<span class=\"comment\">// 创建目标对象的代理对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用代理对象的方法</span></span><br><span class=\"line\">        proxyInstance.perform();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"25-静态代理和动态代理的区别\"><a href=\"#25-静态代理和动态代理的区别\" class=\"headerlink\" title=\"25 静态代理和动态代理的区别\"></a>25 静态代理和动态代理的区别</h5><p>静态代理就是编译期要确定的，动态代理是运行期间确定的</p>\n<h5 id=\"26-什么是元注解\"><a href=\"#26-什么是元注解\" class=\"headerlink\" title=\"26 什么是元注解\"></a>26 什么是元注解</h5><p><strong>概念：</strong>定义其他注解的注解，通过元注解产生其他注解，如@Override就是通过元注解定义出来的</p>\n<p>元注解有四个：@Target(表示该注解可以用在什么地方)、@Retention(表示在什么级别保存该注解信息)、@Documented(将此注解包含在javadoc中)、@Inherited(允许子类继承父类中的注解)</p>\n<p><strong>怎么定义一个注解？</strong></p>\n<p>在Java中，自定义注解通常使用<code>@interface</code>来定义，常见格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@interface</span> 注解名称 &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注解的属性 (默认值)</span></span><br><span class=\"line\">    数据类型 属性名();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@Target 表示我们的注解可以用在哪些地方？</strong></p>\n<p>@Target(ElementType.TYPE)——接口、类、枚举、注解<br>@Target(ElementType.FIELD)——字段、枚举的常量<br>@Target(ElementType.METHOD)——方法<br>@Target(ElementType.PARAMETER)——方法参数<br>@Target(ElementType.CONSTRUCTOR) ——构造函数<br>@Target(ElementType.LOCAL_VARIABLE)——局部变量<br>@Target(ElementType.ANNOTATION_TYPE)——注解<br>@Target(ElementType.PACKAGE)——包</p>\n<p><strong>@Retention 表示我们的注解在什么地方还有效？</strong></p>\n<p>1、RetentionPolicy.SOURCE：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；<br>2、RetentionPolicy.CLASS：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期；<br>3、RetentionPolicy.RUNTIME：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在；<br>这3个生命周期分别对应于：Java源文件(.java文件) —&gt; .class文件 —&gt; 内存中的字节码<strong>。</strong></p>\n<p><strong>@Documented 表示是否将我们的注解生成在javadoc中</strong></p>\n<p><strong>@Inherited 表示子类可以继承父类的注解</strong></p>\n","excerpt":"","more":"<h5 id=\"14-什么是泛型，有什么好处？\"><a href=\"#14-什么是泛型，有什么好处？\" class=\"headerlink\" title=\"14 什么是泛型，有什么好处？\"></a>14 什么是泛型，有什么好处？</h5><p><strong>概念：</strong>在定义类、接口和方法时使用类型参数(type parameter)。这些类型参数在实例化时被具体化为实际的类型。</p>\n<p><strong>好处：</strong></p>\n<p><strong>类型安全</strong>：</p>\n<ul>\n<li>使用泛型可以在编译时检测类型错误，避免了运行时出现 <code>ClassCastException</code>。例如，使用泛型集合时，插入的元素类型必须匹配集合的类型参数。</li>\n</ul>\n<p><strong>消除强制类型转换</strong>：</p>\n<ul>\n<li>在没有泛型的代码中，获取集合中的元素需要进行强制类型转换。泛型消除了这种需求，使代码更简洁和安全。</li>\n</ul>\n<p><strong>无泛型的代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">List</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> (String) list.get(<span class=\"number\">0</span>);  <span class=\"comment\">// 需要强制转换</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用泛型的代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> list.get(<span class=\"number\">0</span>);  <span class=\"comment\">// 不需要强制转换</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"15-什么是类型擦除？\"><a href=\"#15-什么是类型擦除？\" class=\"headerlink\" title=\"15 什么是类型擦除？\"></a>15 什么是类型擦除？</h5><p>在编译阶段泛型字段会被擦除，泛型类型参数在编译后被替换为它们的上界（通常是 <code>Object</code>）如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span>&lt;T&gt; &#123;</span><br><span class=\"line\">\tT bar;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">doSth</span><span class=\"params\">(T param)</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 编译后，等同于</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span>&lt;Object&gt; &#123;</span><br><span class=\"line\">\tObject bar;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">doSth</span><span class=\"params\">(Object param)</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"16-泛型中的KTVE？Object等分别代表什么含义？\"><a href=\"#16-泛型中的KTVE？Object等分别代表什么含义？\" class=\"headerlink\" title=\"16 泛型中的KTVE？Object等分别代表什么含义？\"></a>16 泛型中的KTVE？Object等分别代表什么含义？</h5><p>E - Element （在集合中使用，集合中存放的是元素）</p>\n<p>T - Type （Java类，任意类型）</p>\n<p>K - Key （键）</p>\n<p>V - Value （值）</p>\n<p>N - Number （数值类型）</p>\n<p>Object - 所有类的根类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GenericExamples</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. E - Element: 用于集合中的元素</span></span><br><span class=\"line\">        List&lt;String&gt; stringList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(); <span class=\"comment\">// E 被替换为 String</span></span><br><span class=\"line\">        stringList.add(<span class=\"string\">&quot;Apple&quot;</span>);</span><br><span class=\"line\">        stringList.add(<span class=\"string\">&quot;Banana&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;List&lt;E&gt; example:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String element : stringList) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Element: &quot;</span> + element); <span class=\"comment\">// 输出: Apple, Banana</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. T - Type: 通用类型参数</span></span><br><span class=\"line\">        TypeExample&lt;Integer&gt; intType = <span class=\"keyword\">new</span> <span class=\"title class_\">TypeExample</span>&lt;&gt;();</span><br><span class=\"line\">        intType.setValue(<span class=\"number\">123</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;T - Type example:&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Value: &quot;</span> + intType.getValue()); <span class=\"comment\">// 输出: Value: 123</span></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. K - Key, V - Value: 键值对映射</span></span><br><span class=\"line\">        Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(); <span class=\"comment\">// K 被替换为 String, V 被替换为 Integer</span></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;K - Key, V - Value example:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Key: &quot;</span> + entry.getKey() + <span class=\"string\">&quot;, Value: &quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4. N - Number: 限制为数值类型</span></span><br><span class=\"line\">        NumberExample&lt;Double&gt; doubleExample = <span class=\"keyword\">new</span> <span class=\"title class_\">NumberExample</span>&lt;&gt;();</span><br><span class=\"line\">        doubleExample.setNumber(<span class=\"number\">3.14</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;N - Number example:&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Number: &quot;</span> + doubleExample.getNumber()); <span class=\"comment\">// 输出: Number: 3.14</span></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5. Object: 所有类的根类，表示可以接受任何类型</span></span><br><span class=\"line\">        List&lt;Object&gt; objectList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        objectList.add(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">        objectList.add(<span class=\"number\">456</span>);</span><br><span class=\"line\">        objectList.add(<span class=\"number\">78.90</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Object example:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : objectList) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Object: &quot;</span> + obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T - 通用类型参数的示例类</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TypeExample</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setValue</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> T <span class=\"title function_\">getValue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// N - 限制为数值类型的示例类</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NumberExample</span>&lt;N <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> N number;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNumber</span><span class=\"params\">(N number)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.number = number;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> N <span class=\"title function_\">getNumber</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码解释</strong></p>\n<ol>\n<li><strong><code>List&lt;E&gt;</code></strong> 示例：<ul>\n<li><code>stringList</code> 是一个 <code>List&lt;String&gt;</code>，演示了如何使用 <code>E</code> 作为集合中的元素类型。</li>\n</ul>\n</li>\n<li><strong><code>T</code> - Type 示例</strong>：<ul>\n<li><code>TypeExample&lt;T&gt;</code> 是一个通用类型的类，展示了如何使用泛型类型参数 <code>T</code>。</li>\n</ul>\n</li>\n<li><strong><code>K</code> - Key 和 <code>V</code> - Value 示例</strong>：<ul>\n<li>使用 <code>Map&lt;K, V&gt;</code> 展示了键值对映射的用法，其中 <code>K</code> 是键的类型，<code>V</code> 是值的类型。</li>\n</ul>\n</li>\n<li><strong><code>N</code> - Number 示例</strong>：<ul>\n<li><code>NumberExample&lt;N&gt;</code> 类限制了泛型类型参数 <code>N</code> 为数值类型（如 <code>Integer</code>、<code>Double</code>），展示了如何使用泛型约束。</li>\n</ul>\n</li>\n<li><strong><code>Object</code> 示例</strong>：<ul>\n<li><code>objectList</code> 是一个 <code>List&lt;Object&gt;</code>，展示了如何存储任意类型的对象。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"17-泛型上下界\"><a href=\"#17-泛型上下界\" class=\"headerlink\" title=\"17 泛型上下界\"></a>17 泛型上下界</h5><p><strong>上界通配符 <code>&lt;? extends Number&gt;</code></strong></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number (类)  (上界) <span class=\"comment\">//表示可以是 `Number` 类型或其子类型，如 `Integer` 或 `Double`。</span></span><br><span class=\"line\">   ^</span><br><span class=\"line\">   |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">|         |</span><br><span class=\"line\">Integer   Double (类)</span><br></pre></td></tr></table></figure>\n\n<p><strong>图示解析</strong>：</p>\n<ul>\n<li>可以接受 <code>Number</code> 及其子类 <code>Integer</code>、<code>Double</code> 等。</li>\n<li>在代码中，<code>List&lt;? extends Number&gt;</code> 可以表示 <code>List&lt;Number&gt;</code>、<code>List&lt;Integer&gt;</code> 或 <code>List&lt;Double&gt;</code>。</li>\n</ul>\n<p><strong>下界通配符 <code>&lt;? super Integer&gt;</code></strong></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number   <span class=\"selector-tag\">Object</span> (所有类的根类) <span class=\"comment\">//表示可以是 Integer 类型或其父类型，如 Number 或 Object。</span></span><br><span class=\"line\">    |         |</span><br><span class=\"line\">    +---------+</span><br><span class=\"line\">         |</span><br><span class=\"line\">      Integer (类)  (下界)</span><br></pre></td></tr></table></figure>\n\n<p><strong>图示解析</strong>：</p>\n<ul>\n<li>可以接受 <code>Integer</code> 及其父类 <code>Number</code>、<code>Object</code>。</li>\n<li>在代码中，<code>List&lt;? super Integer&gt;</code> 可以表示 <code>List&lt;Integer&gt;</code>、<code>List&lt;Number&gt;</code> 或 <code>List&lt;Object&gt;</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用上界通配符，只读取数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processNumbersExtends</span><span class=\"params\">(List&lt;? extends Number&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Number num : list) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Number: &quot;</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// list.add(100); // 编译错误，不能添加元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用下界通配符，写入数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processNumbersSuper</span><span class=\"params\">(List&lt;? <span class=\"built_in\">super</span> Integer&gt; list)</span> &#123;</span><br><span class=\"line\">    list.add(<span class=\"number\">100</span>); <span class=\"comment\">// 合法，添加 Integer 类型</span></span><br><span class=\"line\">    <span class=\"comment\">// Number num = list.get(0); // 编译错误，无法确定具体类型</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> list.get(<span class=\"number\">0</span>); <span class=\"comment\">// 合法，读取为 Object 类型</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Added: &quot;</span> + obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码解析</strong>：</p>\n<p><strong>上界通配符：<code>&lt;? extends Type&gt;</code></strong></p>\n<ul>\n<li><strong>语义</strong>：表示参数化类型的<strong>上界</strong>，即该泛型类型可以是 <code>Type</code> 本身或其任意子类。</li>\n<li><strong>特性</strong>：<ul>\n<li><strong>只能读取，不能写入（除了添加 <code>null</code>）</strong>：由于编译器无法确定具体的子类型，向其中添加元素可能会破坏类型安全。</li>\n<li><strong>适用于提供者（Producer）角色</strong>：当你只需要从泛型对象中<strong>获取数据</strong>时，使用上界通配符。</li>\n</ul>\n</li>\n</ul>\n<p><strong>下界通配符：<code>&lt;? super Type&gt;</code></strong></p>\n<ul>\n<li><strong>语义</strong>：表示参数化类型的<strong>下界</strong>，即该泛型类型可以是 <code>Type</code> 本身或其任意父类。</li>\n<li><strong>特性</strong>：<ul>\n<li><strong>可以写入，但读取时只能作为 <code>Object</code> 类型</strong>：因为具体类型可能是 <code>Type</code> 的父类，读取元素时只能确保它至少是 <code>Object</code> 类型。</li>\n<li><strong>适用于消费者（Consumer）角色</strong>：当你需要向泛型对象中<strong>写入数据</strong>时，使用下界通配符。</li>\n</ul>\n</li>\n</ul>\n<p>如果一个方法既要写入还要读取，则不要加上限定符号。</p>\n<h5 id=\"18-什么是反射机制？为什么反射慢\"><a href=\"#18-什么是反射机制？为什么反射慢\" class=\"headerlink\" title=\"18 什么是反射机制？为什么反射慢?\"></a>18 什么是反射机制？为什么反射慢?</h5><p>**概念:**反射机制（Reflection）是Java语言的一种特性，它允许程序在运行时动态地获取有关类、接口、方法和字段的信息，并且可以在运行时创建对象、调用方法以及访问或修改字段。</p>\n<p><strong>反射的主要功能</strong></p>\n<ol>\n<li><strong>获取类的 Class 对象</strong>：<ul>\n<li>通过 <code>Class.forName(&quot;className&quot;)</code> 或 <code>object.getClass()</code> 获取一个类的 <code>Class</code> 对象。</li>\n</ul>\n</li>\n<li><strong>获取类的信息</strong>：<ul>\n<li>获取类的构造方法、字段、方法等信息。</li>\n<li>例如，<code>Class.getDeclaredMethods()</code> 可以获取类中所有的方法。</li>\n</ul>\n</li>\n<li><strong>实例化对象</strong>：<ul>\n<li>通过反射可以动态地创建类的实例，使用 <code>Class.newInstance()</code> 或通过 <code>Constructor</code> 创建。</li>\n</ul>\n</li>\n<li><strong>调用方法</strong>：<ul>\n<li>使用 <code>Method.invoke()</code> 动态地调用对象的方法。</li>\n</ul>\n</li>\n<li><strong>访问和修改字段</strong>：<ul>\n<li>使用 <code>Field.get()</code> 和 <code>Field.set()</code> 可以在运行时访问或修改对象的字段值。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ExampleClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Integer</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMessage</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Message: &quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReflectionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取指定类的 Class 对象</span></span><br><span class=\"line\">            Class&lt;?&gt; clazzOne = Class.forName(<span class=\"string\">&quot;com.qyj.subject.common.interview.basic.GenericExamples&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取指定类的所有方法</span></span><br><span class=\"line\">            Method[] methods = clazzOne.getDeclaredMethods();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 输出每个方法的名字</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;GenericExamples Method: &quot;</span> + method.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建ExampleClass的实例</span></span><br><span class=\"line\">            <span class=\"type\">ExampleClass</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ExampleClass</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取ExampleClass的Class对象</span></span><br><span class=\"line\">            Class&lt;?&gt; clazzTwo = ExampleClass.class;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 使用getDeclaredMethod获取特定的方法</span></span><br><span class=\"line\">            <span class=\"comment\">// 参数为方法名,参数类型(name,type)</span></span><br><span class=\"line\">            <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazzTwo.getDeclaredMethod(<span class=\"string\">&quot;printMessage&quot;</span>, String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 由于printMessage是私有方法，我们需要设置可访问性</span></span><br><span class=\"line\">            method.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 调用获取到的方法，传递参数</span></span><br><span class=\"line\">            method.invoke(instance, <span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取 total 字段的 Field 对象</span></span><br><span class=\"line\">            <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> clazzTwo.getDeclaredField(<span class=\"string\">&quot;total&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将字段设置为可访问</span></span><br><span class=\"line\">            field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取 total 字段的值</span></span><br><span class=\"line\">            <span class=\"type\">Integer</span> <span class=\"variable\">totalValue</span> <span class=\"operator\">=</span> (Integer) field.get(instance);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Original total value: &quot;</span> + totalValue); <span class=\"comment\">// 输出: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 修改 total 字段的值</span></span><br><span class=\"line\">            field.set(instance, <span class=\"number\">20</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Modified total value: &quot;</span> + field.get(instance)); <span class=\"comment\">// 输出: 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"19-Java中创建对象有那些方式\"><a href=\"#19-Java中创建对象有那些方式\" class=\"headerlink\" title=\"19 Java中创建对象有那些方式?\"></a>19 Java中创建对象有那些方式?</h5><p>三种常见的创建对象的方法：使用 <code>new</code> 关键字、通过反射、以及通过反序列化。</p>\n<p><strong><code>new</code> 关键字</strong>:</p>\n<ul>\n<li>最常见的对象创建方式。</li>\n<li>编译时确定的，性能高。</li>\n</ul>\n<p><strong>反射</strong>:</p>\n<ul>\n<li>允许在运行时动态创建对象。</li>\n<li>更灵活，但性能较低，且需要处理可能的异常。</li>\n</ul>\n<p><strong>反序列化</strong>:</p>\n<ul>\n<li>通过将字节流转换回对象来创建对象。</li>\n<li>不调用构造器，直接恢复对象的状态，适用于分布式系统或持久化场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ObjectCreationExample</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1. 使用new关键字创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUsingNew</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Example</span>(<span class=\"string\">&quot;Hello from new!&quot;</span>);</span><br><span class=\"line\">        example.printMessage(); <span class=\"comment\">// 输出: Hello from new!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 使用反射创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUsingReflection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取Example类的Class对象</span></span><br><span class=\"line\">            Class&lt;?&gt; clazz = Example.class;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取构造器</span></span><br><span class=\"line\">            Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 使用构造器通过反射创建对象</span></span><br><span class=\"line\">            <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> (Example) constructor.newInstance(<span class=\"string\">&quot;Hello via Reflection!&quot;</span>);</span><br><span class=\"line\">            example.printMessage(); <span class=\"comment\">// 输出: Hello via Reflection!</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 使用反序列化创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUsingDeserialization</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 序列化：将对象写入文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;example.ser&quot;</span>))) &#123;</span><br><span class=\"line\">            <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Example</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\">            out.writeObject(example); <span class=\"comment\">// 将对象写入文件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 反序列化：从文件中读取对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">ObjectInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;example.ser&quot;</span>))) &#123;</span><br><span class=\"line\">            <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> (Example) in.readObject(); <span class=\"comment\">// 通过反序列化创建对象</span></span><br><span class=\"line\">            example.printMessage(); <span class=\"comment\">// 输出: Hello, World!</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectCreationExample</span> <span class=\"variable\">objectCreationExample</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectCreationExample</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用new关键字创建对象</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Creating object using new keyword:&quot;</span>);</span><br><span class=\"line\">        objectCreationExample.createUsingNew();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\nCreating object using reflection:&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 使用反射创建对象</span></span><br><span class=\"line\">        objectCreationExample.createUsingReflection();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\nCreating object using deserialization:&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 使用反序列化创建对象</span></span><br><span class=\"line\">        objectCreationExample.createUsingDeserialization();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例类，支持序列化</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Example</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMessage</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"20-序列化与反序列化\"><a href=\"#20-序列化与反序列化\" class=\"headerlink\" title=\"20 序列化与反序列化\"></a>20 序列化与反序列化</h5><p>20.1 **序列化:**是将一个对象的状态转换成字节流过程, <strong>反序列化</strong>：是将字节流转换回原始对象的过程。</p>\n<ul>\n<li><p><strong>序列化：</strong>对象 -&gt; 字节流</p>\n</li>\n<li><p><strong>反序列化：</strong>字节流 -&gt; 对象</p>\n</li>\n</ul>\n<p>20.2 <strong>用途(为什么要使用序列化?)：</strong>序列化是将对象转换成可传输的格式的过程，是一种数据传输手段，广泛应用于网络传输，RMI和RPC，数据存储和持久化等应用场景。</p>\n<p>20.3 <strong>重点知识：</strong></p>\n<ul>\n<li><p>如果一个类想被序列化，则需要实现Serializable接口。</p>\n</li>\n<li><p>通过<code>ObjectOutputStream</code>和<code>ObjectInputStream</code>对对象进行序列化与反序列化，如上述的代码所示。</p>\n</li>\n<li><p>序列化不能保存静态变量</p>\n</li>\n<li><p><code>transient</code> 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件，在被反序列化后，<code>transient</code> 变量的值被设为初始值，如 <code>int</code> 型的是 0，对象型的是 <code>null</code>。</p>\n</li>\n</ul>\n<h5 id=\"21-序列化的实现原理\"><a href=\"#21-序列化的实现原理\" class=\"headerlink\" title=\"21 序列化的实现原理\"></a>21 序列化的实现原理</h5><p><strong>序列化的基本原理</strong></p>\n<ol>\n<li><strong><code>Serializable</code> 接口</strong>：<ul>\n<li>在Java中，一个类要实现序列化，必须实现 <code>Serializable</code> 接口。<code>Serializable</code> 是一个标记接口，意味着它没有任何方法，仅作为一个标记，表示该类的实例可以被序列化。</li>\n<li>实现了 <code>Serializable</code> 接口的类的实例可以被序列化为字节流，然后再反序列化为对象。</li>\n</ul>\n</li>\n<li><strong>序列化过程</strong>：<ul>\n<li>序列化的过程是将对象的状态转化为字节流。这个过程由 <code>ObjectOutputStream</code> 类的 <code>writeObject()</code> 方法完成。</li>\n<li><code>ObjectOutputStream</code> 会遍历对象的所有字段，并将它们的值写入输出流中。如果某个字段本身是对象引用，那么该对象也会被递归序列化。</li>\n<li>类的元数据（例如类的名称、版本号等）以及对象的类型信息（例如对象属于哪个类）也会被写入字节流。</li>\n</ul>\n</li>\n<li><strong>反序列化过程</strong>：<ul>\n<li>反序列化的过程是将字节流恢复为原始的对象。这个过程由 <code>ObjectInputStream</code> 类的 <code>readObject()</code> 方法完成。</li>\n<li><code>ObjectInputStream</code> 通过读取字节流中的类的元数据和字段数据，重新构造对象的实例。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 使用反序列化创建对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUsingDeserialization</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 序列化：将对象写入文件</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;example.ser&quot;</span>))) &#123;</span><br><span class=\"line\">        <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Example</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\">        out.writeObject(example); <span class=\"comment\">// 将对象写入文件</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 反序列化：从文件中读取对象</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">ObjectInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;example.ser&quot;</span>))) &#123;</span><br><span class=\"line\">        <span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> (Example) in.readObject(); <span class=\"comment\">// 通过反序列化创建对象</span></span><br><span class=\"line\">        example.printMessage(); <span class=\"comment\">// 输出: Hello, World!</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"22-Serializable和Externalizable接口有什么不同？\"><a href=\"#22-Serializable和Externalizable接口有什么不同？\" class=\"headerlink\" title=\"22 Serializable和Externalizable接口有什么不同？\"></a>22 Serializable和Externalizable接口有什么不同？</h5><p><strong>实现方式：</strong></p>\n<ul>\n<li><p>通过 <code>Serializable</code> 接口，Java 可以自动处理对象的序列化和反序列化过程，无需开发者干预。</p>\n</li>\n<li><p>通过 <code>Externalizable</code> 接口，开发者可以完全控制序列化和反序列化过程，手动实现 <code>writeExternal</code> 和 <code>readExternal</code> 方法。</p>\n</li>\n</ul>\n<p><strong>无参构造器</strong>:</p>\n<ul>\n<li>当使用 <code>Externalizable</code> 接口时，反序列化过程中需要使用无参构造器来创建对象实例，因此必须提供一个无参构造器。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>; <span class=\"comment\">// 用于 Serializable 接口的版本控制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 必须提供一个无参构造器，供 Externalizable 使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>writeExternal</code> 和 <code>readExternal</code> 方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeExternal</span><span class=\"params\">(ObjectOutput out)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 手动控制序列化过程，只写入需要序列化的字段</span></span><br><span class=\"line\">    out.writeUTF(name);</span><br><span class=\"line\">    out.writeInt(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readExternal</span><span class=\"params\">(ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 手动控制反序列化过程，按顺序读取字段并恢复对象状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = in.readUTF();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = in.readInt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"23-serialVersionUID-有何用途-如果没定义会有什么问题？\"><a href=\"#23-serialVersionUID-有何用途-如果没定义会有什么问题？\" class=\"headerlink\" title=\"23 serialVersionUID 有何用途? 如果没定义会有什么问题？\"></a>23 <code>serialVersionUID</code> 有何用途? 如果没定义会有什么问题？</h5><p>23.1 <strong>用途：</strong><code>serialVersionUID</code> 是一个独特的标识符，用于表示类的序列化版本。它是 <code>Serializable</code> 接口的一部分，用来确保在反序列化时，类的版本与序列化时的版本保持一致。</p>\n<p>23.2 如果未定义 <code>serialVersionUID：</code>Java 将自动生成，但这会带来版本控制上的不确定性，可能导致 <code>InvalidClassException</code> 异常，尤其在类结构发生变化时。</p>\n<p>23.2 <code>serialVersionUlD</code>有两种显示的生成方式:是默认的1L，比如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span><span class=\"number\">1L</span>;</span><br></pre></td></tr></table></figure>\n\n<p>二是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUlD</span> <span class=\"operator\">=</span> xxxxL;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"24-Java的动态代理是什么？如何实现？\"><a href=\"#24-Java的动态代理是什么？如何实现？\" class=\"headerlink\" title=\"24 Java的动态代理是什么？如何实现？\"></a>24 Java的动态代理是什么？如何实现？</h5><p><strong>概念：</strong>动态代理是Java 一大特性。 它的显著优势就是无侵入式的扩展代码。 通俗来讲就是<strong>可以用来做方法的增强，让你可以在不修改源码的情况下，增强一些方法或者功能，在方法执行前后做任何你想做的事情</strong>。 具体应用的话，比如可以添加调用日志，做事务控制等。</p>\n<p><strong>如何实现：</strong></p>\n<p>1、<code>JDK</code>动态代理：<code>Java.lang.reflect</code>包中的Proxy类和InvocationHandler接口提供了生成动态代理类的能力。</p>\n<p>2、<code>Cglib</code>动态代理：<code>Cglib(Code Generation Library)</code>是一个第三方代码生成类库，运行时在内存中动态生成一个子类对象从而实现对目标对象功能的扩展。</p>\n<p><strong>JDK动态代理</strong></p>\n<p><strong>步骤：</strong></p>\n<ol>\n<li><strong>定义接口</strong>：目标类必须实现的接口。</li>\n<li><strong>实现接口的目标类</strong>：实现业务逻辑。</li>\n<li>**创建<code>InvocationHandler</code>**：实现 <code>InvocationHandler</code> 接口，编写代理逻辑。</li>\n<li><strong>使用<code>Proxy</code>创建代理对象</strong>：通过 <code>Proxy.newProxyInstance</code> 方法创建代理对象。</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 定义接口 定义了目标类需要实现的方法 perform()</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">perform</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 实现接口的目标类 实现了 Service 接口的 perform 方法，这是需要代理的目标对象。</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RealService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">perform</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;RealService: Performing the service.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 创建InvocationHandler</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ServiceInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ServiceInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before method: &quot;</span> + method.getName()); <span class=\"comment\">//方法执行前</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args); <span class=\"comment\">//方法执行中</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After method: &quot;</span> + method.getName()); <span class=\"comment\">//方法执行后</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicProxyExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 4. 使用Proxy创建代理对象</span></span><br><span class=\"line\">        <span class=\"comment\">// Proxy.newProxyInstance(</span></span><br><span class=\"line\">\t<span class=\"comment\">// 类加载器：加载代理类的字节码。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 接口数组：指定代理对象要实现的接口。</span></span><br><span class=\"line\">\t<span class=\"comment\">// InvocationHandler：定义代理对象如何处理方法调用。)</span></span><br><span class=\"line\">        <span class=\"type\">RealService</span> <span class=\"variable\">realService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RealService</span>();<span class=\"comment\">//实例化目标对象</span></span><br><span class=\"line\">        <span class=\"type\">Service</span> <span class=\"variable\">proxyInstance</span> <span class=\"operator\">=</span> (Service) Proxy.newProxyInstance(</span><br><span class=\"line\">                realService.getClass().getClassLoader(),</span><br><span class=\"line\">                realService.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ServiceInvocationHandler</span>(realService)</span><br><span class=\"line\">        );<span class=\"comment\">// 创建目标对象的代理对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用代理对象的方法</span></span><br><span class=\"line\">        proxyInstance.perform();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"25-静态代理和动态代理的区别\"><a href=\"#25-静态代理和动态代理的区别\" class=\"headerlink\" title=\"25 静态代理和动态代理的区别\"></a>25 静态代理和动态代理的区别</h5><p>静态代理就是编译期要确定的，动态代理是运行期间确定的</p>\n<h5 id=\"26-什么是元注解\"><a href=\"#26-什么是元注解\" class=\"headerlink\" title=\"26 什么是元注解\"></a>26 什么是元注解</h5><p><strong>概念：</strong>定义其他注解的注解，通过元注解产生其他注解，如@Override就是通过元注解定义出来的</p>\n<p>元注解有四个：@Target(表示该注解可以用在什么地方)、@Retention(表示在什么级别保存该注解信息)、@Documented(将此注解包含在javadoc中)、@Inherited(允许子类继承父类中的注解)</p>\n<p><strong>怎么定义一个注解？</strong></p>\n<p>在Java中，自定义注解通常使用<code>@interface</code>来定义，常见格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@interface</span> 注解名称 &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注解的属性 (默认值)</span></span><br><span class=\"line\">    数据类型 属性名();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@Target 表示我们的注解可以用在哪些地方？</strong></p>\n<p>@Target(ElementType.TYPE)——接口、类、枚举、注解<br>@Target(ElementType.FIELD)——字段、枚举的常量<br>@Target(ElementType.METHOD)——方法<br>@Target(ElementType.PARAMETER)——方法参数<br>@Target(ElementType.CONSTRUCTOR) ——构造函数<br>@Target(ElementType.LOCAL_VARIABLE)——局部变量<br>@Target(ElementType.ANNOTATION_TYPE)——注解<br>@Target(ElementType.PACKAGE)——包</p>\n<p><strong>@Retention 表示我们的注解在什么地方还有效？</strong></p>\n<p>1、RetentionPolicy.SOURCE：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；<br>2、RetentionPolicy.CLASS：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期；<br>3、RetentionPolicy.RUNTIME：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在；<br>这3个生命周期分别对应于：Java源文件(.java文件) —&gt; .class文件 —&gt; 内存中的字节码<strong>。</strong></p>\n<p><strong>@Documented 表示是否将我们的注解生成在javadoc中</strong></p>\n<p><strong>@Inherited 表示子类可以继承父类的注解</strong></p>\n"},{"title":"三、Java基础-面试题27-39","date":"2024-08-26T14:32:50.000Z","_content":"##### 前言 UML图示\n\n```mermaid\nclassDiagram\n    class InterfaceA {\n        <<interface>>\n        +methodA()\n    }\n\n    class InterfaceB {\n        <<interface>>\n        +methodB()\n    }\n\n    class BaseClass {\n        +baseMethod()\n    }\n\n    class DerivedClass {\n        +methodA()\n        +methodB()\n        +derivedMethod()\n    }\n\n    BaseClass <|-- DerivedClass\n    InterfaceA <|.. DerivedClass\n    InterfaceB <|.. DerivedClass\n```\n\n##### 对应代码示例\n\n```java\n// 定义接口 InterfaceA\ninterface InterfaceA {\n    void methodA();\n}\n\n// 定义接口 InterfaceB\ninterface InterfaceB {\n    void methodB();\n}\n\n// 定义基类 BaseClass\nclass BaseClass {\n    public void baseMethod() {\n        System.out.println(\"Base method in BaseClass\");\n    }\n}\n\n// 定义继承自 BaseClass 并实现 InterfaceA 和 InterfaceB 的 DerivedClass\nclass DerivedClass extends BaseClass implements InterfaceA, InterfaceB {\n\n    @Override\n    public void methodA() {\n        System.out.println(\"Method A implemented in DerivedClass\");\n    }\n\n    @Override\n    public void methodB() {\n        System.out.println(\"Method B implemented in DerivedClass\");\n    }\n\n    public void derivedMethod() {\n        System.out.println(\"Derived method in DerivedClass\");\n    }\n}\n\n// 测试类\npublic class Main {\n    public static void main(String[] args) {\n        DerivedClass derived = new DerivedClass();\n        derived.baseMethod();    // 来自 BaseClass\n        derived.methodA();       // 实现自 InterfaceA\n        derived.methodB();       // 实现自 InterfaceB\n        derived.derivedMethod(); // DerivedClass 特有的方法\n    }\n}\n```\n\n\n\n##### 27 异常类\n\n```mermaid\ngraph TD\n    A[Throwable] --> B[Exception]\n    A --> C[Error]\n    \n    B --> D[Checked Exception]\n    D --> E[IOException]\n    D --> F[SQLException]\n    D --> G[ClassNotFoundException]\n    \n    B --> H[RuntimeException]\n    H --> I[NullPointerException]\n    H --> J[ArrayIndexOutOfBoundsException]\n    H --> K[ArithmeticException]\n    H --> L[ClassCastException]\n    \n    C --> M[OutOfMemoryError]\n    C --> N[StackOverflowError]\n```\n\n**图解说明：**\n\n- `Throwable` 是所有异常类的根类，继承`Object`，实现了序列化接口，`Exception`和`Error`是两个最重要的子类。\n- Exception是 Throwable的子类，表示可恢复的异常。\n  - `Checked Exception` 是所有受检异常的统称，需要捕获，需要处理的异常，直接继承自 `Exception` 类。常见的子类有 `IOException`、`SQLException`、`ClassNotFoundException` 等。\n  - `RuntimeException` 是所有非受检异常的统称，继承自 `Exception` 类。常见的子类有 `NullPointerException`、`ArrayIndexOutOfBoundsException`、`ArithmeticException`、`ClassCastException` 等。\n- `Error` 是 `Throwable` 的另一个子类，表示系统级的严重错误，通常不需要捕获，程序无法自动解决，只有退出运行才能解决。常见的子类有 `OutOfMemoryError` 和 `StackOverflowError`。\n\n##### 28 说说Java异常处理相关的几个关键字，以及简单用法？\n\nthrows、throw、try、catch、finally\n\n1. try 包裹执行语句\n2. catch指定想要捕获的异常的类型\n3. finally确保一段代码不管发生什么异常都要被执行\n4. throw明确抛出一个异常\n5. throws用来声明一个方法可能抛出的异常\n\n##### 29 try中return A，catch中return B，finally中return C，最终返回值是什么？\n\n```java\npublic class Example {\n    public static void main(String[] args) {\n        System.out.println(testMethod());\n    }\n\n    public static String testMethod() {\n        try {\n            //System.out.print(1/0); 异常代码\n            return \"A\";\n        } catch (Exception e) {\n            return \"B\";\n        } finally {\n            return \"C\";\n        }\n    }\n}\n```\n\n解释：\n\n1. **`try` 块**：\n   - `try` 块中的代码首先执行，并且因为 `return \"A\";` 语句的存在，方法会准备返回 \"A\"。\n   - 在准备返回值之前，Java会记住这个返回值，但并不会立即返回，而是继续执行 `finally` 块中的代码。\n2. **`catch` 块**：\n   - 如果 `try` 块中的代码抛出了异常，那么会进入 `catch` 块。如果没有异常发生，`catch` 块就不会执行。\n   - 但无论 `catch` 块是否执行，`finally` 块中的代码始终会执行。\n3. **`finally` 块**：\n   - `finally` 块中的代码是无论如何都会执行的。即使 `try` 或 `catch` 中有 `return` 语句，`finally` 仍然会在方法返回之前执行。\n   - 在 `finally` 块中，如果再次出现 `return` 语句，它会覆盖之前在 `try` 或 `catch` 中准备返回的值，并最终返回 `finally` 中的值。\n\n总结：在try-catch-finally结构中，try和catch中的return的结果都会被暂存，检查finally后有没有return，有则会覆盖；尽量避免在 `finally` 块中使用 `return` 语句，因为这会导致代码的可读性下降和预期外的行为。\n\n##### 30 finally中代码一定会执行吗？\n\n大多数情况下都是会执行的，有一些特殊的情况导致finally块中的代码不执行，如下：\n\n1、**JVM 崩溃**：如果在 `try` 或 `catch` 块执行过程中，JVM 进程突然崩溃（例如内存不足、硬件故障），`finally` 块可能不会执行。\n\n2、**System.exit()**：如果在 `try` 或 `catch` 块中调用了 `System.exit()`，则 JVM 会立即终止，不会再执行 `finally` 块。例如：\n\n```java\npublic class Example {\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"In try block\");\n            System.exit(0);\n        } finally {\n            System.out.println(\"In finally block\");\n        }\n    }\n}\n```\n\n`System.exit(0)` 直接终止了 JVM，导致 `finally` 块没有执行。\n\n3、**无限循环或死锁**：如果在 `try` 块或 `catch` 块中出现了无限循环或死锁，`finally` 块可能永远不会执行，因为程序无法跳出循环或解决死锁。例如：\n\n```java\npublic class Example {\n    public static void main(String[] args) {\n        try {\n            while (true) {\n                // Infinite loop\n            }\n        } finally {\n            System.out.println(\"In finally block\");\n        }\n    }\n}\n```\n\n在这种情况下，`finally` 块永远不会被执行，因为程序永远停留在无限循环中。\n\n##### 31 在处理异常的时候，我们应该要注意些什么？\n\n1.`RuntimeException` 不需要显式地 `throws`\n\n**说明**：`RuntimeException` 及其子类属于非受检异常（Unchecked Exception），在方法声明中不需要显式地用 `throws` 关键字抛出这些异常。\n\n2.`catch` 需要先从子类进行捕获\n\n**说明**：在捕获异常时，如果有多个 `catch` 块，需要先捕获具体的子类异常，再捕获通用的父类异常，否则会导致编译错误。\n\n3.始终在 `finally` 中释放资源\n\n**说明**：在使用 `try-catch` 处理异常时，如果有资源需要关闭（如文件、数据库连接等），应在 `finally` 块中释放资源，以确保即使出现异常，资源也能够得到正确的释放。\n\n4.不要在 `finally` 块中使用 `return` 语句\n\n**说明**：在 `finally` 块中使用 `return` 语句会覆盖 `try` 或 `catch` 块中的 `return` 语句，从而导致不可预测的行为\n\n5.只捕获你能处理的异常\n\n**说明**：不要随意捕获所有异常（如捕获 `Exception`），而应该只捕获你能够合理处理的异常。这有助于确保代码更加健壮，并且能够对错误做出合理的响应。\n\n##### 32 什么是AIO、BIO和NIO？\n\n![1705133708567-49955e01-446a-4fef-b441-4356180eac5c](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/1705133708567-49955e01-446a-4fef-b441-4356180eac5c.png)\n\n**BIO (Blocking I/O)**:\n同步阻塞 I/O，是 JDK 1.4 之前的传统 I/O 模型。线程发起 I/O 请求后，会被阻塞，直到数据准备好并完成 I/O 操作后，线程才能继续执行其他任务。每个 I/O 请求都由一个独立线程处理，因此在高并发情况下容易造成线程资源的浪费和系统负担。\n\n**NIO (Non-Blocking I/O)**:\n同步非阻塞 I/O，是 JDK 1.4 引入的 I/O 模型。线程发起 I/O 请求后不会阻塞，而是立即返回。用户线程可以继续处理其他任务，不必等待 I/O 操作完成。通过轮询机制（Selector），线程可以检查 I/O 操作是否已完成，并在数据就绪后进行处理。NIO 允许一个线程处理多个 I/O 连接，显著提高了系统的并发处理能力。\n\n**AIO (Asynchronous I/O)**:\n异步非阻塞 I/O，是 JDK 7 引入的 I/O 模型。线程发起 I/O 请求后立即返回，不需要阻塞，也不需要轮询检查操作结果。I/O 操作完成后，系统会自动回调指定的处理函数（CompletionHandler），通知调用方处理结果。AIO 更加高效，适合处理大量并发连接和复杂 I/O 操作的场景。\n\n##### 33 Java是值传递还是引用传递？\n\n**值传递和引用传递最大的区别就是传递过程中有没有复制出来一个副本，如果是传递副本，那就是值传递，否则就是引用传递。Java对象的传递，是通过复制的方式把引用关系传递了，因为有复制的过程，所以是值传递，**只不过对于Java对象的传递，传递的内容是对象的引用。**总的来说，Java只有值传递。**\n\n```java\npublic class ValueReferenceExample {\n\n    public static void main(String[] args) {\n        // 基本数据类型\n        int a = 5;\n        System.out.println(\"Before modifyPrimitive: a = \" + a);\n        modifyPrimitive(a);\n        System.out.println(\"After modifyPrimitive: a = \" + a);\n\n        // 对象类型\n        MyObject obj = new MyObject();\n        obj.value = 10;\n        System.out.println(\"Before modifyObject: obj.value = \" + obj.value);\n        modifyObject(obj);\n        System.out.println(\"After modifyObject: obj.value = \" + obj.value);\n\n        // 对象引用重新分配\n        resetObject(obj);\n        System.out.println(\"After resetObject: obj.value = \" + obj.value);\n    }\n\t// 值传递，传递的是副本\n    public static void modifyPrimitive(int x) {\n        x = 10;  // 仅修改了副本，不影响原始变量\n    }\n\t// 引用传递，复制引用地址并进行传递\n    public static void modifyObject(MyObject o) {\n        o.value = 20;  // 修改对象属性，因为都是指向同一个对象，影响到原始对象\n    }\n\n    // 这个重新分配的引用仅在 resetObject 方法内部有效，并不影响 obj 的原始引用。\n    public static void resetObject(MyObject o) {\n        o = new MyObject();  // 重新分配引用，不影响原始对象\n        o.value = 30;  // 修改新对象的属性，原始对象不受影响\n    }\n\n}\n\nclass MyObject {\n    int value;\n}\n```\n\n##### 34 什么是深拷贝和浅拷贝？\n\n**浅拷贝(Shallow Copy)**: 浅拷贝复制对象时，只复制对象的基本属性和对象的引用，引用对象不复制的实际内容。这意味着拷贝后的对象与原对象共享同一个引用对象的实例。\n\n**深拷贝(Deep Copy)**: 深拷贝不仅复制对象的基本属性，还复制所有引用对象的实际内容。拷贝后的对象和原对象完全独立，没有任何共享的引用。\n\n##### 35 SimpleDateFormat是线程安全的吗？使用时应该注意什么？\n\n**答：**非线程安全的，`SimpleDateFormat` 类在解析或格式化日期时会维护内部状态，比如 `Calendar` 对象，这些状态在多个线程并发访问时可能会相互干扰，导致格式化或解析的结果不正确，甚至可能抛出 `NumberFormatException` 或 `ArrayIndexOutOfBoundsException`。\n\n**如何在多线程环境中安全地使用 `SimpleDateFormat`？**\n\n**局部变量方式**:\n\n- 每次调用 `formatDateWithSimpleDateFormat` 时，都会创建一个新的 `SimpleDateFormat` 实例，确保线程安全。\n\n```java\n// 1. 使用局部变量确保线程安全\npublic String formatDateWithSimpleDateFormat(Date date) {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n    return sdf.format(date);\n}\n```\n\n**同步块**:\n\n- `formatDateWithSynchronized` 方法使用 `synchronized` 关键字，确保同一时刻只有一个线程可以执行格式化操作，保证线程安全。\n\n```java\n// 2. 使用同步块确保线程安全\nprivate static final SimpleDateFormat sharedSdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n\npublic synchronized String formatDateWithSynchronized(Date date) {\n    return sharedSdf.format(date);\n}\n```\n\n**使用 `ThreadLocal`**：\n\n- 通过 `ThreadLocal` 为每个线程创建一个 `SimpleDateFormat` 实例，这样每个线程都有自己的实例，既保证了线程安全，又避免了性能问题。\n\n```java\nprivate static final ThreadLocal<SimpleDateFormat> sdf = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyy-MM-dd\"));\n\npublic String formatDate(Date date) {\n    return sdf.get().format(date);\n}\n```\n\n**使用替代方案**：\n\n- 从 Java 8 开始，`java.time` 包中的 `DateTimeFormatter` 类提供了不可变的、线程安全的日期时间格式化工具，推荐使用它代替 `SimpleDateFormat`。\n\n```java\nprivate static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n\npublic String formatDate(LocalDate date) {\n    return date.format(formatter);\n}\n```\n\n##### 36 什么是UUID？\n\nUUID（Universally Unique Identifier），即通用唯一标识符，是一种标准化的128位数字标识符，用于标识信息中的唯一对象。UUID 是根据特定算法生成的，可以在分布式系统中用于唯一地标识信息，无需集中管理。UUID 的主要目的是确保不同时间、不同地点生成的ID是唯一的。\n\n##### 37 char能存储中文吗？\n\n是的，`char` 可以存储中文字符。在Java中，`char` 数据类型是 16 位的无符号整数，使用 Unicode 编码（UTF-16）表示字符。Unicode 是一种字符编码标准，能够表示世界上几乎所有的字符集，包括中文字符。\n\n##### 38 while(true)和for(;;)那个性能好？\n\n都一样，都是做无限循环\n\n##### 39 ClassNotFoundException和NoClassDefFoundError的区别是什么？\n\n* `ClassNotFoundException`发生在 **运行时**，是一个**受检异常**，表示在运行时动态加载类时找不到指定的类。通常由程序的逻辑错误引发，如类名拼写错误、类路径配置不当等。\n\n* `NoClassDefFoundError`也发生在 **运行时**，是一个**错误**，表示 `JVM` 在加载一个已经编译过的类时，无法找到该类。通常由运行时环境的问题引发，如类路径中缺少类、类文件损坏等。","source":"_posts/Java基础-面试题27-39.md","raw":"---\ntitle: 三、Java基础-面试题27-39\ndate: 2024-08-26 22:32:50\ntags: Java\n---\n##### 前言 UML图示\n\n```mermaid\nclassDiagram\n    class InterfaceA {\n        <<interface>>\n        +methodA()\n    }\n\n    class InterfaceB {\n        <<interface>>\n        +methodB()\n    }\n\n    class BaseClass {\n        +baseMethod()\n    }\n\n    class DerivedClass {\n        +methodA()\n        +methodB()\n        +derivedMethod()\n    }\n\n    BaseClass <|-- DerivedClass\n    InterfaceA <|.. DerivedClass\n    InterfaceB <|.. DerivedClass\n```\n\n##### 对应代码示例\n\n```java\n// 定义接口 InterfaceA\ninterface InterfaceA {\n    void methodA();\n}\n\n// 定义接口 InterfaceB\ninterface InterfaceB {\n    void methodB();\n}\n\n// 定义基类 BaseClass\nclass BaseClass {\n    public void baseMethod() {\n        System.out.println(\"Base method in BaseClass\");\n    }\n}\n\n// 定义继承自 BaseClass 并实现 InterfaceA 和 InterfaceB 的 DerivedClass\nclass DerivedClass extends BaseClass implements InterfaceA, InterfaceB {\n\n    @Override\n    public void methodA() {\n        System.out.println(\"Method A implemented in DerivedClass\");\n    }\n\n    @Override\n    public void methodB() {\n        System.out.println(\"Method B implemented in DerivedClass\");\n    }\n\n    public void derivedMethod() {\n        System.out.println(\"Derived method in DerivedClass\");\n    }\n}\n\n// 测试类\npublic class Main {\n    public static void main(String[] args) {\n        DerivedClass derived = new DerivedClass();\n        derived.baseMethod();    // 来自 BaseClass\n        derived.methodA();       // 实现自 InterfaceA\n        derived.methodB();       // 实现自 InterfaceB\n        derived.derivedMethod(); // DerivedClass 特有的方法\n    }\n}\n```\n\n\n\n##### 27 异常类\n\n```mermaid\ngraph TD\n    A[Throwable] --> B[Exception]\n    A --> C[Error]\n    \n    B --> D[Checked Exception]\n    D --> E[IOException]\n    D --> F[SQLException]\n    D --> G[ClassNotFoundException]\n    \n    B --> H[RuntimeException]\n    H --> I[NullPointerException]\n    H --> J[ArrayIndexOutOfBoundsException]\n    H --> K[ArithmeticException]\n    H --> L[ClassCastException]\n    \n    C --> M[OutOfMemoryError]\n    C --> N[StackOverflowError]\n```\n\n**图解说明：**\n\n- `Throwable` 是所有异常类的根类，继承`Object`，实现了序列化接口，`Exception`和`Error`是两个最重要的子类。\n- Exception是 Throwable的子类，表示可恢复的异常。\n  - `Checked Exception` 是所有受检异常的统称，需要捕获，需要处理的异常，直接继承自 `Exception` 类。常见的子类有 `IOException`、`SQLException`、`ClassNotFoundException` 等。\n  - `RuntimeException` 是所有非受检异常的统称，继承自 `Exception` 类。常见的子类有 `NullPointerException`、`ArrayIndexOutOfBoundsException`、`ArithmeticException`、`ClassCastException` 等。\n- `Error` 是 `Throwable` 的另一个子类，表示系统级的严重错误，通常不需要捕获，程序无法自动解决，只有退出运行才能解决。常见的子类有 `OutOfMemoryError` 和 `StackOverflowError`。\n\n##### 28 说说Java异常处理相关的几个关键字，以及简单用法？\n\nthrows、throw、try、catch、finally\n\n1. try 包裹执行语句\n2. catch指定想要捕获的异常的类型\n3. finally确保一段代码不管发生什么异常都要被执行\n4. throw明确抛出一个异常\n5. throws用来声明一个方法可能抛出的异常\n\n##### 29 try中return A，catch中return B，finally中return C，最终返回值是什么？\n\n```java\npublic class Example {\n    public static void main(String[] args) {\n        System.out.println(testMethod());\n    }\n\n    public static String testMethod() {\n        try {\n            //System.out.print(1/0); 异常代码\n            return \"A\";\n        } catch (Exception e) {\n            return \"B\";\n        } finally {\n            return \"C\";\n        }\n    }\n}\n```\n\n解释：\n\n1. **`try` 块**：\n   - `try` 块中的代码首先执行，并且因为 `return \"A\";` 语句的存在，方法会准备返回 \"A\"。\n   - 在准备返回值之前，Java会记住这个返回值，但并不会立即返回，而是继续执行 `finally` 块中的代码。\n2. **`catch` 块**：\n   - 如果 `try` 块中的代码抛出了异常，那么会进入 `catch` 块。如果没有异常发生，`catch` 块就不会执行。\n   - 但无论 `catch` 块是否执行，`finally` 块中的代码始终会执行。\n3. **`finally` 块**：\n   - `finally` 块中的代码是无论如何都会执行的。即使 `try` 或 `catch` 中有 `return` 语句，`finally` 仍然会在方法返回之前执行。\n   - 在 `finally` 块中，如果再次出现 `return` 语句，它会覆盖之前在 `try` 或 `catch` 中准备返回的值，并最终返回 `finally` 中的值。\n\n总结：在try-catch-finally结构中，try和catch中的return的结果都会被暂存，检查finally后有没有return，有则会覆盖；尽量避免在 `finally` 块中使用 `return` 语句，因为这会导致代码的可读性下降和预期外的行为。\n\n##### 30 finally中代码一定会执行吗？\n\n大多数情况下都是会执行的，有一些特殊的情况导致finally块中的代码不执行，如下：\n\n1、**JVM 崩溃**：如果在 `try` 或 `catch` 块执行过程中，JVM 进程突然崩溃（例如内存不足、硬件故障），`finally` 块可能不会执行。\n\n2、**System.exit()**：如果在 `try` 或 `catch` 块中调用了 `System.exit()`，则 JVM 会立即终止，不会再执行 `finally` 块。例如：\n\n```java\npublic class Example {\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"In try block\");\n            System.exit(0);\n        } finally {\n            System.out.println(\"In finally block\");\n        }\n    }\n}\n```\n\n`System.exit(0)` 直接终止了 JVM，导致 `finally` 块没有执行。\n\n3、**无限循环或死锁**：如果在 `try` 块或 `catch` 块中出现了无限循环或死锁，`finally` 块可能永远不会执行，因为程序无法跳出循环或解决死锁。例如：\n\n```java\npublic class Example {\n    public static void main(String[] args) {\n        try {\n            while (true) {\n                // Infinite loop\n            }\n        } finally {\n            System.out.println(\"In finally block\");\n        }\n    }\n}\n```\n\n在这种情况下，`finally` 块永远不会被执行，因为程序永远停留在无限循环中。\n\n##### 31 在处理异常的时候，我们应该要注意些什么？\n\n1.`RuntimeException` 不需要显式地 `throws`\n\n**说明**：`RuntimeException` 及其子类属于非受检异常（Unchecked Exception），在方法声明中不需要显式地用 `throws` 关键字抛出这些异常。\n\n2.`catch` 需要先从子类进行捕获\n\n**说明**：在捕获异常时，如果有多个 `catch` 块，需要先捕获具体的子类异常，再捕获通用的父类异常，否则会导致编译错误。\n\n3.始终在 `finally` 中释放资源\n\n**说明**：在使用 `try-catch` 处理异常时，如果有资源需要关闭（如文件、数据库连接等），应在 `finally` 块中释放资源，以确保即使出现异常，资源也能够得到正确的释放。\n\n4.不要在 `finally` 块中使用 `return` 语句\n\n**说明**：在 `finally` 块中使用 `return` 语句会覆盖 `try` 或 `catch` 块中的 `return` 语句，从而导致不可预测的行为\n\n5.只捕获你能处理的异常\n\n**说明**：不要随意捕获所有异常（如捕获 `Exception`），而应该只捕获你能够合理处理的异常。这有助于确保代码更加健壮，并且能够对错误做出合理的响应。\n\n##### 32 什么是AIO、BIO和NIO？\n\n![1705133708567-49955e01-446a-4fef-b441-4356180eac5c](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/1705133708567-49955e01-446a-4fef-b441-4356180eac5c.png)\n\n**BIO (Blocking I/O)**:\n同步阻塞 I/O，是 JDK 1.4 之前的传统 I/O 模型。线程发起 I/O 请求后，会被阻塞，直到数据准备好并完成 I/O 操作后，线程才能继续执行其他任务。每个 I/O 请求都由一个独立线程处理，因此在高并发情况下容易造成线程资源的浪费和系统负担。\n\n**NIO (Non-Blocking I/O)**:\n同步非阻塞 I/O，是 JDK 1.4 引入的 I/O 模型。线程发起 I/O 请求后不会阻塞，而是立即返回。用户线程可以继续处理其他任务，不必等待 I/O 操作完成。通过轮询机制（Selector），线程可以检查 I/O 操作是否已完成，并在数据就绪后进行处理。NIO 允许一个线程处理多个 I/O 连接，显著提高了系统的并发处理能力。\n\n**AIO (Asynchronous I/O)**:\n异步非阻塞 I/O，是 JDK 7 引入的 I/O 模型。线程发起 I/O 请求后立即返回，不需要阻塞，也不需要轮询检查操作结果。I/O 操作完成后，系统会自动回调指定的处理函数（CompletionHandler），通知调用方处理结果。AIO 更加高效，适合处理大量并发连接和复杂 I/O 操作的场景。\n\n##### 33 Java是值传递还是引用传递？\n\n**值传递和引用传递最大的区别就是传递过程中有没有复制出来一个副本，如果是传递副本，那就是值传递，否则就是引用传递。Java对象的传递，是通过复制的方式把引用关系传递了，因为有复制的过程，所以是值传递，**只不过对于Java对象的传递，传递的内容是对象的引用。**总的来说，Java只有值传递。**\n\n```java\npublic class ValueReferenceExample {\n\n    public static void main(String[] args) {\n        // 基本数据类型\n        int a = 5;\n        System.out.println(\"Before modifyPrimitive: a = \" + a);\n        modifyPrimitive(a);\n        System.out.println(\"After modifyPrimitive: a = \" + a);\n\n        // 对象类型\n        MyObject obj = new MyObject();\n        obj.value = 10;\n        System.out.println(\"Before modifyObject: obj.value = \" + obj.value);\n        modifyObject(obj);\n        System.out.println(\"After modifyObject: obj.value = \" + obj.value);\n\n        // 对象引用重新分配\n        resetObject(obj);\n        System.out.println(\"After resetObject: obj.value = \" + obj.value);\n    }\n\t// 值传递，传递的是副本\n    public static void modifyPrimitive(int x) {\n        x = 10;  // 仅修改了副本，不影响原始变量\n    }\n\t// 引用传递，复制引用地址并进行传递\n    public static void modifyObject(MyObject o) {\n        o.value = 20;  // 修改对象属性，因为都是指向同一个对象，影响到原始对象\n    }\n\n    // 这个重新分配的引用仅在 resetObject 方法内部有效，并不影响 obj 的原始引用。\n    public static void resetObject(MyObject o) {\n        o = new MyObject();  // 重新分配引用，不影响原始对象\n        o.value = 30;  // 修改新对象的属性，原始对象不受影响\n    }\n\n}\n\nclass MyObject {\n    int value;\n}\n```\n\n##### 34 什么是深拷贝和浅拷贝？\n\n**浅拷贝(Shallow Copy)**: 浅拷贝复制对象时，只复制对象的基本属性和对象的引用，引用对象不复制的实际内容。这意味着拷贝后的对象与原对象共享同一个引用对象的实例。\n\n**深拷贝(Deep Copy)**: 深拷贝不仅复制对象的基本属性，还复制所有引用对象的实际内容。拷贝后的对象和原对象完全独立，没有任何共享的引用。\n\n##### 35 SimpleDateFormat是线程安全的吗？使用时应该注意什么？\n\n**答：**非线程安全的，`SimpleDateFormat` 类在解析或格式化日期时会维护内部状态，比如 `Calendar` 对象，这些状态在多个线程并发访问时可能会相互干扰，导致格式化或解析的结果不正确，甚至可能抛出 `NumberFormatException` 或 `ArrayIndexOutOfBoundsException`。\n\n**如何在多线程环境中安全地使用 `SimpleDateFormat`？**\n\n**局部变量方式**:\n\n- 每次调用 `formatDateWithSimpleDateFormat` 时，都会创建一个新的 `SimpleDateFormat` 实例，确保线程安全。\n\n```java\n// 1. 使用局部变量确保线程安全\npublic String formatDateWithSimpleDateFormat(Date date) {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n    return sdf.format(date);\n}\n```\n\n**同步块**:\n\n- `formatDateWithSynchronized` 方法使用 `synchronized` 关键字，确保同一时刻只有一个线程可以执行格式化操作，保证线程安全。\n\n```java\n// 2. 使用同步块确保线程安全\nprivate static final SimpleDateFormat sharedSdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n\npublic synchronized String formatDateWithSynchronized(Date date) {\n    return sharedSdf.format(date);\n}\n```\n\n**使用 `ThreadLocal`**：\n\n- 通过 `ThreadLocal` 为每个线程创建一个 `SimpleDateFormat` 实例，这样每个线程都有自己的实例，既保证了线程安全，又避免了性能问题。\n\n```java\nprivate static final ThreadLocal<SimpleDateFormat> sdf = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyy-MM-dd\"));\n\npublic String formatDate(Date date) {\n    return sdf.get().format(date);\n}\n```\n\n**使用替代方案**：\n\n- 从 Java 8 开始，`java.time` 包中的 `DateTimeFormatter` 类提供了不可变的、线程安全的日期时间格式化工具，推荐使用它代替 `SimpleDateFormat`。\n\n```java\nprivate static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n\npublic String formatDate(LocalDate date) {\n    return date.format(formatter);\n}\n```\n\n##### 36 什么是UUID？\n\nUUID（Universally Unique Identifier），即通用唯一标识符，是一种标准化的128位数字标识符，用于标识信息中的唯一对象。UUID 是根据特定算法生成的，可以在分布式系统中用于唯一地标识信息，无需集中管理。UUID 的主要目的是确保不同时间、不同地点生成的ID是唯一的。\n\n##### 37 char能存储中文吗？\n\n是的，`char` 可以存储中文字符。在Java中，`char` 数据类型是 16 位的无符号整数，使用 Unicode 编码（UTF-16）表示字符。Unicode 是一种字符编码标准，能够表示世界上几乎所有的字符集，包括中文字符。\n\n##### 38 while(true)和for(;;)那个性能好？\n\n都一样，都是做无限循环\n\n##### 39 ClassNotFoundException和NoClassDefFoundError的区别是什么？\n\n* `ClassNotFoundException`发生在 **运行时**，是一个**受检异常**，表示在运行时动态加载类时找不到指定的类。通常由程序的逻辑错误引发，如类名拼写错误、类路径配置不当等。\n\n* `NoClassDefFoundError`也发生在 **运行时**，是一个**错误**，表示 `JVM` 在加载一个已经编译过的类时，无法找到该类。通常由运行时环境的问题引发，如类路径中缺少类、类文件损坏等。","slug":"Java基础-面试题27-39","published":1,"updated":"2024-08-26T12:52:01.816Z","_id":"cm0azws7s0001z8u42a4n98x7","comments":1,"layout":"post","photos":[],"content":"<h5 id=\"前言-UML图示\"><a href=\"#前言-UML图示\" class=\"headerlink\" title=\"前言 UML图示\"></a>前言 UML图示</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">    class InterfaceA &#123;</span><br><span class=\"line\">        &lt;&lt;interface&gt;&gt;</span><br><span class=\"line\">        +methodA()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class InterfaceB &#123;</span><br><span class=\"line\">        &lt;&lt;interface&gt;&gt;</span><br><span class=\"line\">        +methodB()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class BaseClass &#123;</span><br><span class=\"line\">        +baseMethod()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class DerivedClass &#123;</span><br><span class=\"line\">        +methodA()</span><br><span class=\"line\">        +methodB()</span><br><span class=\"line\">        +derivedMethod()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    BaseClass &lt;|-- DerivedClass</span><br><span class=\"line\">    InterfaceA &lt;|.. DerivedClass</span><br><span class=\"line\">    InterfaceB &lt;|.. DerivedClass</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"对应代码示例\"><a href=\"#对应代码示例\" class=\"headerlink\" title=\"对应代码示例\"></a>对应代码示例</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义接口 InterfaceA</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceA</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">methodA</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义接口 InterfaceB</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceB</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">methodB</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义基类 BaseClass</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">baseMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Base method in BaseClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义继承自 BaseClass 并实现 InterfaceA 和 InterfaceB 的 DerivedClass</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DerivedClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InterfaceA</span>, InterfaceB &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Method A implemented in DerivedClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Method B implemented in DerivedClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">derivedMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Derived method in DerivedClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DerivedClass</span> <span class=\"variable\">derived</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DerivedClass</span>();</span><br><span class=\"line\">        derived.baseMethod();    <span class=\"comment\">// 来自 BaseClass</span></span><br><span class=\"line\">        derived.methodA();       <span class=\"comment\">// 实现自 InterfaceA</span></span><br><span class=\"line\">        derived.methodB();       <span class=\"comment\">// 实现自 InterfaceB</span></span><br><span class=\"line\">        derived.derivedMethod(); <span class=\"comment\">// DerivedClass 特有的方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"27-异常类\"><a href=\"#27-异常类\" class=\"headerlink\" title=\"27 异常类\"></a>27 异常类</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD</span><br><span class=\"line\">    A[Throwable] --&gt; B[Exception]</span><br><span class=\"line\">    A --&gt; C[Error]</span><br><span class=\"line\">    </span><br><span class=\"line\">    B --&gt; D[Checked Exception]</span><br><span class=\"line\">    D --&gt; E[IOException]</span><br><span class=\"line\">    D --&gt; F[SQLException]</span><br><span class=\"line\">    D --&gt; G[ClassNotFoundException]</span><br><span class=\"line\">    </span><br><span class=\"line\">    B --&gt; H[RuntimeException]</span><br><span class=\"line\">    H --&gt; I[NullPointerException]</span><br><span class=\"line\">    H --&gt; J[ArrayIndexOutOfBoundsException]</span><br><span class=\"line\">    H --&gt; K[ArithmeticException]</span><br><span class=\"line\">    H --&gt; L[ClassCastException]</span><br><span class=\"line\">    </span><br><span class=\"line\">    C --&gt; M[OutOfMemoryError]</span><br><span class=\"line\">    C --&gt; N[StackOverflowError]</span><br></pre></td></tr></table></figure>\n\n<p><strong>图解说明：</strong></p>\n<ul>\n<li><code>Throwable</code> 是所有异常类的根类，继承<code>Object</code>，实现了序列化接口，<code>Exception</code>和<code>Error</code>是两个最重要的子类。</li>\n<li>Exception是 Throwable的子类，表示可恢复的异常。<ul>\n<li><code>Checked Exception</code> 是所有受检异常的统称，需要捕获，需要处理的异常，直接继承自 <code>Exception</code> 类。常见的子类有 <code>IOException</code>、<code>SQLException</code>、<code>ClassNotFoundException</code> 等。</li>\n<li><code>RuntimeException</code> 是所有非受检异常的统称，继承自 <code>Exception</code> 类。常见的子类有 <code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code>、<code>ArithmeticException</code>、<code>ClassCastException</code> 等。</li>\n</ul>\n</li>\n<li><code>Error</code> 是 <code>Throwable</code> 的另一个子类，表示系统级的严重错误，通常不需要捕获，程序无法自动解决，只有退出运行才能解决。常见的子类有 <code>OutOfMemoryError</code> 和 <code>StackOverflowError</code>。</li>\n</ul>\n<h5 id=\"28-说说Java异常处理相关的几个关键字，以及简单用法？\"><a href=\"#28-说说Java异常处理相关的几个关键字，以及简单用法？\" class=\"headerlink\" title=\"28 说说Java异常处理相关的几个关键字，以及简单用法？\"></a>28 说说Java异常处理相关的几个关键字，以及简单用法？</h5><p>throws、throw、try、catch、finally</p>\n<ol>\n<li>try 包裹执行语句</li>\n<li>catch指定想要捕获的异常的类型</li>\n<li>finally确保一段代码不管发生什么异常都要被执行</li>\n<li>throw明确抛出一个异常</li>\n<li>throws用来声明一个方法可能抛出的异常</li>\n</ol>\n<h5 id=\"29-try中return-A，catch中return-B，finally中return-C，最终返回值是什么？\"><a href=\"#29-try中return-A，catch中return-B，finally中return-C，最终返回值是什么？\" class=\"headerlink\" title=\"29 try中return A，catch中return B，finally中return C，最终返回值是什么？\"></a>29 try中return A，catch中return B，finally中return C，最终返回值是什么？</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(testMethod());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">testMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.print(1/0); 异常代码</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;B&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;C&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<ol>\n<li><strong><code>try</code> 块</strong>：<ul>\n<li><code>try</code> 块中的代码首先执行，并且因为 <code>return &quot;A&quot;;</code> 语句的存在，方法会准备返回 “A”。</li>\n<li>在准备返回值之前，Java会记住这个返回值，但并不会立即返回，而是继续执行 <code>finally</code> 块中的代码。</li>\n</ul>\n</li>\n<li><strong><code>catch</code> 块</strong>：<ul>\n<li>如果 <code>try</code> 块中的代码抛出了异常，那么会进入 <code>catch</code> 块。如果没有异常发生，<code>catch</code> 块就不会执行。</li>\n<li>但无论 <code>catch</code> 块是否执行，<code>finally</code> 块中的代码始终会执行。</li>\n</ul>\n</li>\n<li><strong><code>finally</code> 块</strong>：<ul>\n<li><code>finally</code> 块中的代码是无论如何都会执行的。即使 <code>try</code> 或 <code>catch</code> 中有 <code>return</code> 语句，<code>finally</code> 仍然会在方法返回之前执行。</li>\n<li>在 <code>finally</code> 块中，如果再次出现 <code>return</code> 语句，它会覆盖之前在 <code>try</code> 或 <code>catch</code> 中准备返回的值，并最终返回 <code>finally</code> 中的值。</li>\n</ul>\n</li>\n</ol>\n<p>总结：在try-catch-finally结构中，try和catch中的return的结果都会被暂存，检查finally后有没有return，有则会覆盖；尽量避免在 <code>finally</code> 块中使用 <code>return</code> 语句，因为这会导致代码的可读性下降和预期外的行为。</p>\n<h5 id=\"30-finally中代码一定会执行吗？\"><a href=\"#30-finally中代码一定会执行吗？\" class=\"headerlink\" title=\"30 finally中代码一定会执行吗？\"></a>30 finally中代码一定会执行吗？</h5><p>大多数情况下都是会执行的，有一些特殊的情况导致finally块中的代码不执行，如下：</p>\n<p>1、<strong>JVM 崩溃</strong>：如果在 <code>try</code> 或 <code>catch</code> 块执行过程中，JVM 进程突然崩溃（例如内存不足、硬件故障），<code>finally</code> 块可能不会执行。</p>\n<p>2、**System.exit()**：如果在 <code>try</code> 或 <code>catch</code> 块中调用了 <code>System.exit()</code>，则 JVM 会立即终止，不会再执行 <code>finally</code> 块。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;In try block&quot;</span>);</span><br><span class=\"line\">            System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;In finally block&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>System.exit(0)</code> 直接终止了 JVM，导致 <code>finally</code> 块没有执行。</p>\n<p>3、<strong>无限循环或死锁</strong>：如果在 <code>try</code> 块或 <code>catch</code> 块中出现了无限循环或死锁，<code>finally</code> 块可能永远不会执行，因为程序无法跳出循环或解决死锁。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Infinite loop</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;In finally block&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，<code>finally</code> 块永远不会被执行，因为程序永远停留在无限循环中。</p>\n<h5 id=\"31-在处理异常的时候，我们应该要注意些什么？\"><a href=\"#31-在处理异常的时候，我们应该要注意些什么？\" class=\"headerlink\" title=\"31 在处理异常的时候，我们应该要注意些什么？\"></a>31 在处理异常的时候，我们应该要注意些什么？</h5><p>1.<code>RuntimeException</code> 不需要显式地 <code>throws</code></p>\n<p><strong>说明</strong>：<code>RuntimeException</code> 及其子类属于非受检异常（Unchecked Exception），在方法声明中不需要显式地用 <code>throws</code> 关键字抛出这些异常。</p>\n<p>2.<code>catch</code> 需要先从子类进行捕获</p>\n<p><strong>说明</strong>：在捕获异常时，如果有多个 <code>catch</code> 块，需要先捕获具体的子类异常，再捕获通用的父类异常，否则会导致编译错误。</p>\n<p>3.始终在 <code>finally</code> 中释放资源</p>\n<p><strong>说明</strong>：在使用 <code>try-catch</code> 处理异常时，如果有资源需要关闭（如文件、数据库连接等），应在 <code>finally</code> 块中释放资源，以确保即使出现异常，资源也能够得到正确的释放。</p>\n<p>4.不要在 <code>finally</code> 块中使用 <code>return</code> 语句</p>\n<p><strong>说明</strong>：在 <code>finally</code> 块中使用 <code>return</code> 语句会覆盖 <code>try</code> 或 <code>catch</code> 块中的 <code>return</code> 语句，从而导致不可预测的行为</p>\n<p>5.只捕获你能处理的异常</p>\n<p><strong>说明</strong>：不要随意捕获所有异常（如捕获 <code>Exception</code>），而应该只捕获你能够合理处理的异常。这有助于确保代码更加健壮，并且能够对错误做出合理的响应。</p>\n<h5 id=\"32-什么是AIO、BIO和NIO？\"><a href=\"#32-什么是AIO、BIO和NIO？\" class=\"headerlink\" title=\"32 什么是AIO、BIO和NIO？\"></a>32 什么是AIO、BIO和NIO？</h5><p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/1705133708567-49955e01-446a-4fef-b441-4356180eac5c.png\" alt=\"1705133708567-49955e01-446a-4fef-b441-4356180eac5c\"></p>\n<p><strong>BIO (Blocking I&#x2F;O)</strong>:<br>同步阻塞 I&#x2F;O，是 JDK 1.4 之前的传统 I&#x2F;O 模型。线程发起 I&#x2F;O 请求后，会被阻塞，直到数据准备好并完成 I&#x2F;O 操作后，线程才能继续执行其他任务。每个 I&#x2F;O 请求都由一个独立线程处理，因此在高并发情况下容易造成线程资源的浪费和系统负担。</p>\n<p><strong>NIO (Non-Blocking I&#x2F;O)</strong>:<br>同步非阻塞 I&#x2F;O，是 JDK 1.4 引入的 I&#x2F;O 模型。线程发起 I&#x2F;O 请求后不会阻塞，而是立即返回。用户线程可以继续处理其他任务，不必等待 I&#x2F;O 操作完成。通过轮询机制（Selector），线程可以检查 I&#x2F;O 操作是否已完成，并在数据就绪后进行处理。NIO 允许一个线程处理多个 I&#x2F;O 连接，显著提高了系统的并发处理能力。</p>\n<p><strong>AIO (Asynchronous I&#x2F;O)</strong>:<br>异步非阻塞 I&#x2F;O，是 JDK 7 引入的 I&#x2F;O 模型。线程发起 I&#x2F;O 请求后立即返回，不需要阻塞，也不需要轮询检查操作结果。I&#x2F;O 操作完成后，系统会自动回调指定的处理函数（CompletionHandler），通知调用方处理结果。AIO 更加高效，适合处理大量并发连接和复杂 I&#x2F;O 操作的场景。</p>\n<h5 id=\"33-Java是值传递还是引用传递？\"><a href=\"#33-Java是值传递还是引用传递？\" class=\"headerlink\" title=\"33 Java是值传递还是引用传递？\"></a>33 Java是值传递还是引用传递？</h5><p><strong>值传递和引用传递最大的区别就是传递过程中有没有复制出来一个副本，如果是传递副本，那就是值传递，否则就是引用传递。Java对象的传递，是通过复制的方式把引用关系传递了，因为有复制的过程，所以是值传递，</strong>只不过对于Java对象的传递，传递的内容是对象的引用。<strong>总的来说，Java只有值传递。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ValueReferenceExample</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 基本数据类型</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before modifyPrimitive: a = &quot;</span> + a);</span><br><span class=\"line\">        modifyPrimitive(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After modifyPrimitive: a = &quot;</span> + a);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 对象类型</span></span><br><span class=\"line\">        <span class=\"type\">MyObject</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyObject</span>();</span><br><span class=\"line\">        obj.value = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before modifyObject: obj.value = &quot;</span> + obj.value);</span><br><span class=\"line\">        modifyObject(obj);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After modifyObject: obj.value = &quot;</span> + obj.value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 对象引用重新分配</span></span><br><span class=\"line\">        resetObject(obj);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After resetObject: obj.value = &quot;</span> + obj.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 值传递，传递的是副本</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">modifyPrimitive</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        x = <span class=\"number\">10</span>;  <span class=\"comment\">// 仅修改了副本，不影响原始变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 引用传递，复制引用地址并进行传递</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">modifyObject</span><span class=\"params\">(MyObject o)</span> &#123;</span><br><span class=\"line\">        o.value = <span class=\"number\">20</span>;  <span class=\"comment\">// 修改对象属性，因为都是指向同一个对象，影响到原始对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这个重新分配的引用仅在 resetObject 方法内部有效，并不影响 obj 的原始引用。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resetObject</span><span class=\"params\">(MyObject o)</span> &#123;</span><br><span class=\"line\">        o = <span class=\"keyword\">new</span> <span class=\"title class_\">MyObject</span>();  <span class=\"comment\">// 重新分配引用，不影响原始对象</span></span><br><span class=\"line\">        o.value = <span class=\"number\">30</span>;  <span class=\"comment\">// 修改新对象的属性，原始对象不受影响</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"34-什么是深拷贝和浅拷贝？\"><a href=\"#34-什么是深拷贝和浅拷贝？\" class=\"headerlink\" title=\"34 什么是深拷贝和浅拷贝？\"></a>34 什么是深拷贝和浅拷贝？</h5><p><strong>浅拷贝(Shallow Copy)</strong>: 浅拷贝复制对象时，只复制对象的基本属性和对象的引用，引用对象不复制的实际内容。这意味着拷贝后的对象与原对象共享同一个引用对象的实例。</p>\n<p><strong>深拷贝(Deep Copy)</strong>: 深拷贝不仅复制对象的基本属性，还复制所有引用对象的实际内容。拷贝后的对象和原对象完全独立，没有任何共享的引用。</p>\n<h5 id=\"35-SimpleDateFormat是线程安全的吗？使用时应该注意什么？\"><a href=\"#35-SimpleDateFormat是线程安全的吗？使用时应该注意什么？\" class=\"headerlink\" title=\"35 SimpleDateFormat是线程安全的吗？使用时应该注意什么？\"></a>35 SimpleDateFormat是线程安全的吗？使用时应该注意什么？</h5><p><strong>答：</strong>非线程安全的，<code>SimpleDateFormat</code> 类在解析或格式化日期时会维护内部状态，比如 <code>Calendar</code> 对象，这些状态在多个线程并发访问时可能会相互干扰，导致格式化或解析的结果不正确，甚至可能抛出 <code>NumberFormatException</code> 或 <code>ArrayIndexOutOfBoundsException</code>。</p>\n<p><strong>如何在多线程环境中安全地使用 <code>SimpleDateFormat</code>？</strong></p>\n<p><strong>局部变量方式</strong>:</p>\n<ul>\n<li>每次调用 <code>formatDateWithSimpleDateFormat</code> 时，都会创建一个新的 <code>SimpleDateFormat</code> 实例，确保线程安全。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 使用局部变量确保线程安全</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">formatDateWithSimpleDateFormat</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdf.format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>同步块</strong>:</p>\n<ul>\n<li><code>formatDateWithSynchronized</code> 方法使用 <code>synchronized</code> 关键字，确保同一时刻只有一个线程可以执行格式化操作，保证线程安全。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2. 使用同步块确保线程安全</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sharedSdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> String <span class=\"title function_\">formatDateWithSynchronized</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sharedSdf.format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**使用 <code>ThreadLocal</code>**：</p>\n<ul>\n<li>通过 <code>ThreadLocal</code> 为每个线程创建一个 <code>SimpleDateFormat</code> 实例，这样每个线程都有自己的实例，既保证了线程安全，又避免了性能问题。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;SimpleDateFormat&gt; sdf = ThreadLocal.withInitial(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">formatDate</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdf.get().format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用替代方案</strong>：</p>\n<ul>\n<li>从 Java 8 开始，<code>java.time</code> 包中的 <code>DateTimeFormatter</code> 类提供了不可变的、线程安全的日期时间格式化工具，推荐使用它代替 <code>SimpleDateFormat</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">formatDate</span><span class=\"params\">(LocalDate date)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date.format(formatter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"36-什么是UUID？\"><a href=\"#36-什么是UUID？\" class=\"headerlink\" title=\"36 什么是UUID？\"></a>36 什么是UUID？</h5><p>UUID（Universally Unique Identifier），即通用唯一标识符，是一种标准化的128位数字标识符，用于标识信息中的唯一对象。UUID 是根据特定算法生成的，可以在分布式系统中用于唯一地标识信息，无需集中管理。UUID 的主要目的是确保不同时间、不同地点生成的ID是唯一的。</p>\n<h5 id=\"37-char能存储中文吗？\"><a href=\"#37-char能存储中文吗？\" class=\"headerlink\" title=\"37 char能存储中文吗？\"></a>37 char能存储中文吗？</h5><p>是的，<code>char</code> 可以存储中文字符。在Java中，<code>char</code> 数据类型是 16 位的无符号整数，使用 Unicode 编码（UTF-16）表示字符。Unicode 是一种字符编码标准，能够表示世界上几乎所有的字符集，包括中文字符。</p>\n<h5 id=\"38-while-true-和for-那个性能好？\"><a href=\"#38-while-true-和for-那个性能好？\" class=\"headerlink\" title=\"38 while(true)和for(;;)那个性能好？\"></a>38 while(true)和for(;;)那个性能好？</h5><p>都一样，都是做无限循环</p>\n<h5 id=\"39-ClassNotFoundException和NoClassDefFoundError的区别是什么？\"><a href=\"#39-ClassNotFoundException和NoClassDefFoundError的区别是什么？\" class=\"headerlink\" title=\"39 ClassNotFoundException和NoClassDefFoundError的区别是什么？\"></a>39 ClassNotFoundException和NoClassDefFoundError的区别是什么？</h5><ul>\n<li><p><code>ClassNotFoundException</code>发生在 <strong>运行时</strong>，是一个<strong>受检异常</strong>，表示在运行时动态加载类时找不到指定的类。通常由程序的逻辑错误引发，如类名拼写错误、类路径配置不当等。</p>\n</li>\n<li><p><code>NoClassDefFoundError</code>也发生在 <strong>运行时</strong>，是一个<strong>错误</strong>，表示 <code>JVM</code> 在加载一个已经编译过的类时，无法找到该类。通常由运行时环境的问题引发，如类路径中缺少类、类文件损坏等。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h5 id=\"前言-UML图示\"><a href=\"#前言-UML图示\" class=\"headerlink\" title=\"前言 UML图示\"></a>前言 UML图示</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">    class InterfaceA &#123;</span><br><span class=\"line\">        &lt;&lt;interface&gt;&gt;</span><br><span class=\"line\">        +methodA()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class InterfaceB &#123;</span><br><span class=\"line\">        &lt;&lt;interface&gt;&gt;</span><br><span class=\"line\">        +methodB()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class BaseClass &#123;</span><br><span class=\"line\">        +baseMethod()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class DerivedClass &#123;</span><br><span class=\"line\">        +methodA()</span><br><span class=\"line\">        +methodB()</span><br><span class=\"line\">        +derivedMethod()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    BaseClass &lt;|-- DerivedClass</span><br><span class=\"line\">    InterfaceA &lt;|.. DerivedClass</span><br><span class=\"line\">    InterfaceB &lt;|.. DerivedClass</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"对应代码示例\"><a href=\"#对应代码示例\" class=\"headerlink\" title=\"对应代码示例\"></a>对应代码示例</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义接口 InterfaceA</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceA</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">methodA</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义接口 InterfaceB</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceB</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">methodB</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义基类 BaseClass</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">baseMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Base method in BaseClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义继承自 BaseClass 并实现 InterfaceA 和 InterfaceB 的 DerivedClass</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DerivedClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InterfaceA</span>, InterfaceB &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Method A implemented in DerivedClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Method B implemented in DerivedClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">derivedMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Derived method in DerivedClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DerivedClass</span> <span class=\"variable\">derived</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DerivedClass</span>();</span><br><span class=\"line\">        derived.baseMethod();    <span class=\"comment\">// 来自 BaseClass</span></span><br><span class=\"line\">        derived.methodA();       <span class=\"comment\">// 实现自 InterfaceA</span></span><br><span class=\"line\">        derived.methodB();       <span class=\"comment\">// 实现自 InterfaceB</span></span><br><span class=\"line\">        derived.derivedMethod(); <span class=\"comment\">// DerivedClass 特有的方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"27-异常类\"><a href=\"#27-异常类\" class=\"headerlink\" title=\"27 异常类\"></a>27 异常类</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD</span><br><span class=\"line\">    A[Throwable] --&gt; B[Exception]</span><br><span class=\"line\">    A --&gt; C[Error]</span><br><span class=\"line\">    </span><br><span class=\"line\">    B --&gt; D[Checked Exception]</span><br><span class=\"line\">    D --&gt; E[IOException]</span><br><span class=\"line\">    D --&gt; F[SQLException]</span><br><span class=\"line\">    D --&gt; G[ClassNotFoundException]</span><br><span class=\"line\">    </span><br><span class=\"line\">    B --&gt; H[RuntimeException]</span><br><span class=\"line\">    H --&gt; I[NullPointerException]</span><br><span class=\"line\">    H --&gt; J[ArrayIndexOutOfBoundsException]</span><br><span class=\"line\">    H --&gt; K[ArithmeticException]</span><br><span class=\"line\">    H --&gt; L[ClassCastException]</span><br><span class=\"line\">    </span><br><span class=\"line\">    C --&gt; M[OutOfMemoryError]</span><br><span class=\"line\">    C --&gt; N[StackOverflowError]</span><br></pre></td></tr></table></figure>\n\n<p><strong>图解说明：</strong></p>\n<ul>\n<li><code>Throwable</code> 是所有异常类的根类，继承<code>Object</code>，实现了序列化接口，<code>Exception</code>和<code>Error</code>是两个最重要的子类。</li>\n<li>Exception是 Throwable的子类，表示可恢复的异常。<ul>\n<li><code>Checked Exception</code> 是所有受检异常的统称，需要捕获，需要处理的异常，直接继承自 <code>Exception</code> 类。常见的子类有 <code>IOException</code>、<code>SQLException</code>、<code>ClassNotFoundException</code> 等。</li>\n<li><code>RuntimeException</code> 是所有非受检异常的统称，继承自 <code>Exception</code> 类。常见的子类有 <code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code>、<code>ArithmeticException</code>、<code>ClassCastException</code> 等。</li>\n</ul>\n</li>\n<li><code>Error</code> 是 <code>Throwable</code> 的另一个子类，表示系统级的严重错误，通常不需要捕获，程序无法自动解决，只有退出运行才能解决。常见的子类有 <code>OutOfMemoryError</code> 和 <code>StackOverflowError</code>。</li>\n</ul>\n<h5 id=\"28-说说Java异常处理相关的几个关键字，以及简单用法？\"><a href=\"#28-说说Java异常处理相关的几个关键字，以及简单用法？\" class=\"headerlink\" title=\"28 说说Java异常处理相关的几个关键字，以及简单用法？\"></a>28 说说Java异常处理相关的几个关键字，以及简单用法？</h5><p>throws、throw、try、catch、finally</p>\n<ol>\n<li>try 包裹执行语句</li>\n<li>catch指定想要捕获的异常的类型</li>\n<li>finally确保一段代码不管发生什么异常都要被执行</li>\n<li>throw明确抛出一个异常</li>\n<li>throws用来声明一个方法可能抛出的异常</li>\n</ol>\n<h5 id=\"29-try中return-A，catch中return-B，finally中return-C，最终返回值是什么？\"><a href=\"#29-try中return-A，catch中return-B，finally中return-C，最终返回值是什么？\" class=\"headerlink\" title=\"29 try中return A，catch中return B，finally中return C，最终返回值是什么？\"></a>29 try中return A，catch中return B，finally中return C，最终返回值是什么？</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(testMethod());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">testMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.print(1/0); 异常代码</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;B&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;C&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<ol>\n<li><strong><code>try</code> 块</strong>：<ul>\n<li><code>try</code> 块中的代码首先执行，并且因为 <code>return &quot;A&quot;;</code> 语句的存在，方法会准备返回 “A”。</li>\n<li>在准备返回值之前，Java会记住这个返回值，但并不会立即返回，而是继续执行 <code>finally</code> 块中的代码。</li>\n</ul>\n</li>\n<li><strong><code>catch</code> 块</strong>：<ul>\n<li>如果 <code>try</code> 块中的代码抛出了异常，那么会进入 <code>catch</code> 块。如果没有异常发生，<code>catch</code> 块就不会执行。</li>\n<li>但无论 <code>catch</code> 块是否执行，<code>finally</code> 块中的代码始终会执行。</li>\n</ul>\n</li>\n<li><strong><code>finally</code> 块</strong>：<ul>\n<li><code>finally</code> 块中的代码是无论如何都会执行的。即使 <code>try</code> 或 <code>catch</code> 中有 <code>return</code> 语句，<code>finally</code> 仍然会在方法返回之前执行。</li>\n<li>在 <code>finally</code> 块中，如果再次出现 <code>return</code> 语句，它会覆盖之前在 <code>try</code> 或 <code>catch</code> 中准备返回的值，并最终返回 <code>finally</code> 中的值。</li>\n</ul>\n</li>\n</ol>\n<p>总结：在try-catch-finally结构中，try和catch中的return的结果都会被暂存，检查finally后有没有return，有则会覆盖；尽量避免在 <code>finally</code> 块中使用 <code>return</code> 语句，因为这会导致代码的可读性下降和预期外的行为。</p>\n<h5 id=\"30-finally中代码一定会执行吗？\"><a href=\"#30-finally中代码一定会执行吗？\" class=\"headerlink\" title=\"30 finally中代码一定会执行吗？\"></a>30 finally中代码一定会执行吗？</h5><p>大多数情况下都是会执行的，有一些特殊的情况导致finally块中的代码不执行，如下：</p>\n<p>1、<strong>JVM 崩溃</strong>：如果在 <code>try</code> 或 <code>catch</code> 块执行过程中，JVM 进程突然崩溃（例如内存不足、硬件故障），<code>finally</code> 块可能不会执行。</p>\n<p>2、**System.exit()**：如果在 <code>try</code> 或 <code>catch</code> 块中调用了 <code>System.exit()</code>，则 JVM 会立即终止，不会再执行 <code>finally</code> 块。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;In try block&quot;</span>);</span><br><span class=\"line\">            System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;In finally block&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>System.exit(0)</code> 直接终止了 JVM，导致 <code>finally</code> 块没有执行。</p>\n<p>3、<strong>无限循环或死锁</strong>：如果在 <code>try</code> 块或 <code>catch</code> 块中出现了无限循环或死锁，<code>finally</code> 块可能永远不会执行，因为程序无法跳出循环或解决死锁。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Infinite loop</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;In finally block&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，<code>finally</code> 块永远不会被执行，因为程序永远停留在无限循环中。</p>\n<h5 id=\"31-在处理异常的时候，我们应该要注意些什么？\"><a href=\"#31-在处理异常的时候，我们应该要注意些什么？\" class=\"headerlink\" title=\"31 在处理异常的时候，我们应该要注意些什么？\"></a>31 在处理异常的时候，我们应该要注意些什么？</h5><p>1.<code>RuntimeException</code> 不需要显式地 <code>throws</code></p>\n<p><strong>说明</strong>：<code>RuntimeException</code> 及其子类属于非受检异常（Unchecked Exception），在方法声明中不需要显式地用 <code>throws</code> 关键字抛出这些异常。</p>\n<p>2.<code>catch</code> 需要先从子类进行捕获</p>\n<p><strong>说明</strong>：在捕获异常时，如果有多个 <code>catch</code> 块，需要先捕获具体的子类异常，再捕获通用的父类异常，否则会导致编译错误。</p>\n<p>3.始终在 <code>finally</code> 中释放资源</p>\n<p><strong>说明</strong>：在使用 <code>try-catch</code> 处理异常时，如果有资源需要关闭（如文件、数据库连接等），应在 <code>finally</code> 块中释放资源，以确保即使出现异常，资源也能够得到正确的释放。</p>\n<p>4.不要在 <code>finally</code> 块中使用 <code>return</code> 语句</p>\n<p><strong>说明</strong>：在 <code>finally</code> 块中使用 <code>return</code> 语句会覆盖 <code>try</code> 或 <code>catch</code> 块中的 <code>return</code> 语句，从而导致不可预测的行为</p>\n<p>5.只捕获你能处理的异常</p>\n<p><strong>说明</strong>：不要随意捕获所有异常（如捕获 <code>Exception</code>），而应该只捕获你能够合理处理的异常。这有助于确保代码更加健壮，并且能够对错误做出合理的响应。</p>\n<h5 id=\"32-什么是AIO、BIO和NIO？\"><a href=\"#32-什么是AIO、BIO和NIO？\" class=\"headerlink\" title=\"32 什么是AIO、BIO和NIO？\"></a>32 什么是AIO、BIO和NIO？</h5><p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/1705133708567-49955e01-446a-4fef-b441-4356180eac5c.png\" alt=\"1705133708567-49955e01-446a-4fef-b441-4356180eac5c\"></p>\n<p><strong>BIO (Blocking I&#x2F;O)</strong>:<br>同步阻塞 I&#x2F;O，是 JDK 1.4 之前的传统 I&#x2F;O 模型。线程发起 I&#x2F;O 请求后，会被阻塞，直到数据准备好并完成 I&#x2F;O 操作后，线程才能继续执行其他任务。每个 I&#x2F;O 请求都由一个独立线程处理，因此在高并发情况下容易造成线程资源的浪费和系统负担。</p>\n<p><strong>NIO (Non-Blocking I&#x2F;O)</strong>:<br>同步非阻塞 I&#x2F;O，是 JDK 1.4 引入的 I&#x2F;O 模型。线程发起 I&#x2F;O 请求后不会阻塞，而是立即返回。用户线程可以继续处理其他任务，不必等待 I&#x2F;O 操作完成。通过轮询机制（Selector），线程可以检查 I&#x2F;O 操作是否已完成，并在数据就绪后进行处理。NIO 允许一个线程处理多个 I&#x2F;O 连接，显著提高了系统的并发处理能力。</p>\n<p><strong>AIO (Asynchronous I&#x2F;O)</strong>:<br>异步非阻塞 I&#x2F;O，是 JDK 7 引入的 I&#x2F;O 模型。线程发起 I&#x2F;O 请求后立即返回，不需要阻塞，也不需要轮询检查操作结果。I&#x2F;O 操作完成后，系统会自动回调指定的处理函数（CompletionHandler），通知调用方处理结果。AIO 更加高效，适合处理大量并发连接和复杂 I&#x2F;O 操作的场景。</p>\n<h5 id=\"33-Java是值传递还是引用传递？\"><a href=\"#33-Java是值传递还是引用传递？\" class=\"headerlink\" title=\"33 Java是值传递还是引用传递？\"></a>33 Java是值传递还是引用传递？</h5><p><strong>值传递和引用传递最大的区别就是传递过程中有没有复制出来一个副本，如果是传递副本，那就是值传递，否则就是引用传递。Java对象的传递，是通过复制的方式把引用关系传递了，因为有复制的过程，所以是值传递，</strong>只不过对于Java对象的传递，传递的内容是对象的引用。<strong>总的来说，Java只有值传递。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ValueReferenceExample</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 基本数据类型</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before modifyPrimitive: a = &quot;</span> + a);</span><br><span class=\"line\">        modifyPrimitive(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After modifyPrimitive: a = &quot;</span> + a);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 对象类型</span></span><br><span class=\"line\">        <span class=\"type\">MyObject</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyObject</span>();</span><br><span class=\"line\">        obj.value = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before modifyObject: obj.value = &quot;</span> + obj.value);</span><br><span class=\"line\">        modifyObject(obj);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After modifyObject: obj.value = &quot;</span> + obj.value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 对象引用重新分配</span></span><br><span class=\"line\">        resetObject(obj);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After resetObject: obj.value = &quot;</span> + obj.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 值传递，传递的是副本</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">modifyPrimitive</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        x = <span class=\"number\">10</span>;  <span class=\"comment\">// 仅修改了副本，不影响原始变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 引用传递，复制引用地址并进行传递</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">modifyObject</span><span class=\"params\">(MyObject o)</span> &#123;</span><br><span class=\"line\">        o.value = <span class=\"number\">20</span>;  <span class=\"comment\">// 修改对象属性，因为都是指向同一个对象，影响到原始对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这个重新分配的引用仅在 resetObject 方法内部有效，并不影响 obj 的原始引用。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resetObject</span><span class=\"params\">(MyObject o)</span> &#123;</span><br><span class=\"line\">        o = <span class=\"keyword\">new</span> <span class=\"title class_\">MyObject</span>();  <span class=\"comment\">// 重新分配引用，不影响原始对象</span></span><br><span class=\"line\">        o.value = <span class=\"number\">30</span>;  <span class=\"comment\">// 修改新对象的属性，原始对象不受影响</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"34-什么是深拷贝和浅拷贝？\"><a href=\"#34-什么是深拷贝和浅拷贝？\" class=\"headerlink\" title=\"34 什么是深拷贝和浅拷贝？\"></a>34 什么是深拷贝和浅拷贝？</h5><p><strong>浅拷贝(Shallow Copy)</strong>: 浅拷贝复制对象时，只复制对象的基本属性和对象的引用，引用对象不复制的实际内容。这意味着拷贝后的对象与原对象共享同一个引用对象的实例。</p>\n<p><strong>深拷贝(Deep Copy)</strong>: 深拷贝不仅复制对象的基本属性，还复制所有引用对象的实际内容。拷贝后的对象和原对象完全独立，没有任何共享的引用。</p>\n<h5 id=\"35-SimpleDateFormat是线程安全的吗？使用时应该注意什么？\"><a href=\"#35-SimpleDateFormat是线程安全的吗？使用时应该注意什么？\" class=\"headerlink\" title=\"35 SimpleDateFormat是线程安全的吗？使用时应该注意什么？\"></a>35 SimpleDateFormat是线程安全的吗？使用时应该注意什么？</h5><p><strong>答：</strong>非线程安全的，<code>SimpleDateFormat</code> 类在解析或格式化日期时会维护内部状态，比如 <code>Calendar</code> 对象，这些状态在多个线程并发访问时可能会相互干扰，导致格式化或解析的结果不正确，甚至可能抛出 <code>NumberFormatException</code> 或 <code>ArrayIndexOutOfBoundsException</code>。</p>\n<p><strong>如何在多线程环境中安全地使用 <code>SimpleDateFormat</code>？</strong></p>\n<p><strong>局部变量方式</strong>:</p>\n<ul>\n<li>每次调用 <code>formatDateWithSimpleDateFormat</code> 时，都会创建一个新的 <code>SimpleDateFormat</code> 实例，确保线程安全。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 使用局部变量确保线程安全</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">formatDateWithSimpleDateFormat</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdf.format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>同步块</strong>:</p>\n<ul>\n<li><code>formatDateWithSynchronized</code> 方法使用 <code>synchronized</code> 关键字，确保同一时刻只有一个线程可以执行格式化操作，保证线程安全。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2. 使用同步块确保线程安全</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sharedSdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> String <span class=\"title function_\">formatDateWithSynchronized</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sharedSdf.format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**使用 <code>ThreadLocal</code>**：</p>\n<ul>\n<li>通过 <code>ThreadLocal</code> 为每个线程创建一个 <code>SimpleDateFormat</code> 实例，这样每个线程都有自己的实例，既保证了线程安全，又避免了性能问题。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;SimpleDateFormat&gt; sdf = ThreadLocal.withInitial(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">formatDate</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdf.get().format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用替代方案</strong>：</p>\n<ul>\n<li>从 Java 8 开始，<code>java.time</code> 包中的 <code>DateTimeFormatter</code> 类提供了不可变的、线程安全的日期时间格式化工具，推荐使用它代替 <code>SimpleDateFormat</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">formatDate</span><span class=\"params\">(LocalDate date)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date.format(formatter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"36-什么是UUID？\"><a href=\"#36-什么是UUID？\" class=\"headerlink\" title=\"36 什么是UUID？\"></a>36 什么是UUID？</h5><p>UUID（Universally Unique Identifier），即通用唯一标识符，是一种标准化的128位数字标识符，用于标识信息中的唯一对象。UUID 是根据特定算法生成的，可以在分布式系统中用于唯一地标识信息，无需集中管理。UUID 的主要目的是确保不同时间、不同地点生成的ID是唯一的。</p>\n<h5 id=\"37-char能存储中文吗？\"><a href=\"#37-char能存储中文吗？\" class=\"headerlink\" title=\"37 char能存储中文吗？\"></a>37 char能存储中文吗？</h5><p>是的，<code>char</code> 可以存储中文字符。在Java中，<code>char</code> 数据类型是 16 位的无符号整数，使用 Unicode 编码（UTF-16）表示字符。Unicode 是一种字符编码标准，能够表示世界上几乎所有的字符集，包括中文字符。</p>\n<h5 id=\"38-while-true-和for-那个性能好？\"><a href=\"#38-while-true-和for-那个性能好？\" class=\"headerlink\" title=\"38 while(true)和for(;;)那个性能好？\"></a>38 while(true)和for(;;)那个性能好？</h5><p>都一样，都是做无限循环</p>\n<h5 id=\"39-ClassNotFoundException和NoClassDefFoundError的区别是什么？\"><a href=\"#39-ClassNotFoundException和NoClassDefFoundError的区别是什么？\" class=\"headerlink\" title=\"39 ClassNotFoundException和NoClassDefFoundError的区别是什么？\"></a>39 ClassNotFoundException和NoClassDefFoundError的区别是什么？</h5><ul>\n<li><p><code>ClassNotFoundException</code>发生在 <strong>运行时</strong>，是一个<strong>受检异常</strong>，表示在运行时动态加载类时找不到指定的类。通常由程序的逻辑错误引发，如类名拼写错误、类路径配置不当等。</p>\n</li>\n<li><p><code>NoClassDefFoundError</code>也发生在 <strong>运行时</strong>，是一个<strong>错误</strong>，表示 <code>JVM</code> 在加载一个已经编译过的类时，无法找到该类。通常由运行时环境的问题引发，如类路径中缺少类、类文件损坏等。</p>\n</li>\n</ul>\n"},{"title":"一、Java基础-面试题1-13","date":"2024-08-24T14:32:50.000Z","_content":"##### 1 Java和C++的区别？\n\nC++是编译型语言，Java是解释型语言。\n\n##### 2 如何理解面向过程和面向对象？\n\n2.1面向过程把问题分解成每一步骤，每一个步骤用函数实现，面向对象把步骤分解，步骤抽象，形成对象，通过对象的调用解决问题。\n\n2.2面向对象的三大特点\n\n* **封装**：抽象成一个具体的Java类\n\n* **继承**：子类继承父类（基类）的方法，方便方法复用\n\n* **多态**：`override`运行时多态 `overload`编译时多态\n\n##### 3接口和抽象类的区别？\n\n* 抽象类可以有构造器，接口不能有构造器，抽象类和接口都不能被实例化。\n\n* 接口可以被实现，抽象类可以被继承。\n\n* 一个类可以实现多个接口，但是只能继承一个抽象类，接口支持多重继承。\n\n抽象类示例如下：\n\n```java\nabstract class AnimalTwo {\n    // 抽象方法，子类必须实现\n    abstract void makeSound();\n    // 构造器\n    public AnimalTwo() {\n        System.out.println(\"I am father\");\n    }\n    // 抽象类中的具体方法\n    void breathe() {\n        System.out.println(\"Breathing...\");\n    }\n}\n\nclass DogTwo extends AnimalTwo {\n    @Override\n    void makeSound() {\n        System.out.println(\"Bark!\");\n    }\n\n    public DogTwo() {\n        super();\n        System.out.println(\"I am son\");\n    }\n\n}\n\npublic class AbstractExample {\n    public static void main(String[] args) {\n//        AnimalTwo animalTwo = new AnimalTwo(); 抽象类不能被实例化\n        DogTwo dogTwo = new DogTwo();\n        dogTwo.makeSound();  // 输出：Bark!\n        dogTwo.breathe();    // 输出：Breathing...\n    }\n}\n```\n\n接口示例如下：\n\n```java\ninterface Flyable {\n    void fly();\n}\n\n// 不能这样做：\n// Flyable flyable = new Flyable(); // 编译错误，因为接口不能被实例化\n\n// 这样是可以的：\nclass Bird implements Flyable {\n    public void fly() {\n        System.out.println(\"Bird is flying\");\n    }\n}\npublic class InterfaceExample {\n    public static void main(String[] args) {\n        Flyable flyable = new Bird(); // 使用实现了接口的类来实例化\n        flyable.fly(); // 输出：Bird is flying\n    }\n\n}\n```\n\n##### 4 Java中已经有了基本数据类型，为什么还需要包装类？\n\n4.1区别：\n\n* 基本类型默认值为0，false或\\u0000等，包装类为null。\n* 基本直接使用，不需要new，包装需要new。\n\n4.2自动拆箱和装箱\n\n* 自动拆箱：包装类转成基本数据类型；自动装箱：基本数据类型转换成包装类。\n\n4.3自动拆箱和装箱应用场景：包装类型和基本类型比较大小，包装类型的运算等\n\n```java\npublic class AutoBoxingUnboxingExample {\n    public static void main(String[] args) {\n        /*\n        在 c == d 的比较中，c 和 d 是 Integer 对象，因此它们的引用地址不同，因为它们的值超过了 Java 的整数缓存范围（-128 到 127）。\n        如果 c 和 d 在这个范围内，== 比较结果为 true，因为 Java 对这些值进行了缓存。\n         */\n\n        // 基本类型\n        int a = 10;\n        // 包装类型\n        Integer b = 10;\n\n        // 比较基本类型和包装类型\n        if (a == b) {\n            System.out.println(\"a 和 b 相等 (自动拆箱)\");\n        } else {\n            System.out.println(\"a 和 b 不相等\");\n        }\n\n        // 比较两个包装类型\n        Integer c = 128;\n        Integer d = 128;\n\n        if (c == d) {\n            System.out.println(\"c 和 d 引用相同\");\n        } else {\n            System.out.println(\"c 和 d 引用不同\");\n        }\n\n        // 使用 equals() 方法比较两个包装类型的值\n        if (c.equals(d)) {\n            System.out.println(\"c 和 d 的值相等\");\n        } else {\n            System.out.println(\"c 和 d 的值不相等\");\n        }\n\n        // 基本类型和包装类型的运算\n        int sum = a + b; // b 自动拆箱为 int 类型\n        System.out.println(\"a + b = \" + sum);\n    }\n}\n```\n\n##### 5 为什么不能用float,double表示金额？\n\n避免造成精度丢失，`Java`提供了`BigDecimal`来进行精确计算。\n\n##### 6 为什么不能用BigDecimal中的equals方法来做值比较？\n\n因为使用`BigDecimal`中的`equals`方法会比较值和标度，如比较0.1和0.10，他们的值虽然是一样的，但是精度是不一样的。通常使用`compareTo`进行值的比较。\n\n##### 7 BigDecimal(double)和BigDecimal(String)有什么区别？\n\n`BigDecimal(double)`创建出的值并不是准确的数字，而是一个近似值，而使用`BigDecimal(String)`所创建出的值就等于其本身。\n\n如：`new BigDecimal(0.1)`所创建出的值并不等于0.1，而`BigDecimal(\"0.1\")`创建出的值正好等于0.1。\n\n##### 8 String、StringBuilder、StringBuffer的区别？\n\n8.1 `String`类被声明为`final`，`final`修饰的类是不能被继承的，所以`String`类中的方法无法被重写。\n\n8.2 ` String`类没有提供用于修改字符串内容的方法，任何对字符串的修改，都会产生一个新的`String`对象。如下：\n\n```java\nString s = \"abcd\"\ns = s.concat(\"ef\")\n```\n\n虽然字符串内容看似已经成功修改，但是实际上s已经创建了一个新的对象了。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/1693569145559-1464948e-b069-4234-8f03-40dba93f044b.jpeg)\n\n所以当需要创建可变的字符串对象时，通常使用`StringBuilder`或`StringBuffer`。\n\n8.3 String的\"+\"是如何实现的\n\n```java\nString s1 = \"a\";\nString s2 = \"b\";\nString s3 = s1 + \",\" + s2 //等同于(new StringBuilder()).append(s1).append(\",\").append(s2).toString()\n```\n\n使用`+`进行字符拼接，实际上是通过`StringBuilder`的`append`方法进行处理的。\n\n8.4 为什么不要再循环中频繁的使用字符串拼接，而是使用`StringBuffer`和`StringBuilder`进行替代\n\n因为每次循坏都会创建临时对象，造成性能下降和内存浪费，如下：\n\n```java\nString result = \"\";\nfor (int i = 0; i < 1000; i++) {\n    result += i;  //等同于(new StringBuilder()).append(result).append(i).toString()\n}\n```\n\n##### 9 String为什么设计成不可变的？\n\n可以从缓存，安全性，线程安全等角度进行解释。\n\n9.1 **缓存**：`Java`中会存在一个字符串常量池，当创建对象时，常量池会先检查是否已经存在改对象，如已经存在则指向同一对象，如不存在则创建新的对象，这种机制依赖于`String`的不可变性。\n\n9.2 **安全性**：在实际应用中，用户密钥，文件路径等敏感信息都是用`String`类来进行存储的，如果`String`类是可变的，在某些情况下内容会被恶意篡改，从而引发安全性问题。\n\n9.3 **线程安全**：不可变对象在多个线程之间共享，它们的线程是安全的，当某个线程更改了值，会在字符串常量池中创建一个新的字符串，而不是修改相同的值，因此，字符串对于多线程来说是安全的。\n\n##### 10 String str=new String(hollis)创建了几个对象？\n\n通常情况下，这行代码会创建两个对象，\n\n1. **字符串常量池中的对象**：\n   - `hollis` 是一个字符串字面量。在代码执行时，Java 会检查字符串常量池中是否已经存在内容为 `hollis` 的字符串对象。如果不存在，Java 会在字符串常量池中创建一个新的 `hollis` 字符串对象。\n   - 如果常量池中已经存在 `hollis`，则不会创建新的对象。\n2. **堆中的 `String` 对象**：\n   - `new String(hollis)` 明确表示创建一个新的 `String` 对象，即使 `hollis` 已经存在于字符串常量池中。这个新的 `String` 对象会存储在堆（heap）中，并且它的内容会是指向常量池中 `hollis` 的引用。\n   - 这个 `String` 对象是通过 `new` 关键字创建的，因此在每次执行这行代码时都会生成一个新的对象。\n\n**结论**：\n\n- 如果 `hollis` 字符串字面量在常量池中不存在，那么 `String str = new String(hollis);` 这行代码会创建两个对象：一个在字符串常量池中，一个在堆中。\n- 如果 `hollis` 字符串字面量已经在常量池中存在，那么这行代码只会创建一个对象，即堆中的 `String` 对象。\n\n总结： **通常情况下，这行代码会创建两个对象**，一个在常量池中（如果字面量 `hollis` 还不存在），一个在堆中（无论如何都会创建）。\n\n##### 11 String a = \"ab\"; String b = \"a\" + \"b\"; a == b 吗？\n\n结果为`true`，因为==比较的是对象的引用，因为a和b都是**字面量**组成的字符串，引用地址在编译的时候已经确定了，在编译时，会把字面量直接拼接在一起，所以二者都是引用同一个对象。\n\n**字面量**：说简单点，字面量就是指有数字、字母等构成的字符串或数值，字面量只能以右值出现，即右值等于左边的值，如下：\n\n```java\nint a = 1;\nString s = \"hollis\";\n```\n\n##### 12 RPC接口返回中，使用基本类型还是包装类？\n\n尽量使用包装类，因为基本数据类型在发生异常的时候可能会返回默认值，如`int` 默认返回0，而包装类则会返回`null`。\n\n##### 13 在开发过程中常见的语法糖？\n\n所谓语法糖就是方便开发人员使用，对语法进行简化；但在编译的时候会还原成最基础的语法，这个就是解语法糖。\n\n13.1 **`switch`支持使用`String`类**\n\n`Java`中的`switch`原本就是支持基本类型，比如`int`、`char`等，对于`int`类型，会直接比较数值，对于`char`，则会比较ASCII码。对于编译器来说，\n\n任何类型的比较都要转成整型。如`short`、`char`（ASCII码是整型）、以及`int`。\n\n```java\nString str = \"world\";\nswitch (str) {\n    case \"hello\":\n        System.out.println(\"hello\");\n        break;\n    case \"world\":\n        System.out.println(\"world\");\n        break;\n    default:\n        break;\n}\n```\n\n实际在编译器中的代码如下：\n\n```java\nString str =\"world\";\nString s;\nswitch((s=str).hashcode()) {\n\tcase 99162322:\n\t\tif(s.equals(\"hello”))\n\t\t\tSystem.out.println(\"hello\");\n\t\tbreak;\n\tcase 113318802:\n\t\tif(s.equals(\"world\"))\n\t\t\tSystem.out.println(\"world\");\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}\n```\n\n字符串的`switch`是通过`equals()`和`hasdCode()`方法来实现的\n\n13.2 **泛型**\n\n13.2.1 **定义**：泛型允许类、接口、和方法在定义的时候使用类型参数，这能使代码更加通用和类型安全。\n\n**类**：\n\n```java\n// 泛型类\npublic class Box<T> {\n    private T item;\n\n    public void setItem(T item) {\n        this.item = item;\n    }\n\n    public T getItem() {\n        return item;\n    }\n}\n```\n\n上面的代码中，`Box` 类是一个泛型类，`T` 是一个类型参数，可以在创建 `Box` 对象时指定具体的类型。\n\n**接口**：\n\n```java\ninterface InterfaceName<T> {\n    // 在接口中使用类型参数T\n    T Method(T param);\n}\n```\n\n**方法**：方法也可以是泛型的，即方法定义中可以有一个或多个类型参数。这使得方法能够处理不同类型的对象，而不需要定义多个重载方法。\n\n```java\npublic <T> void printArray(T[] array) { // 方法声明使用了泛型类型（如 T）\n    for (T element : array) {\n        System.out.println(element);\n    }\n}\n```\n\n如果去掉方法中的`<T>`，则编译器会报警：Cannot resolve symbol 'T'，这意味着编译器不知道`T`是什么类型。\n\n13.2.2 **泛型的边界**：对泛型类型参数进行约束，比如要求类型参数必须是某个类的子类或实现某个接口。这可以通过使用 `extends` 关键字来实现。\n\n```java\npublic <T extends Number> void printNumber(T number) {\n    System.out.println(number);\n}\n```\n\n在这个方法中，`T` 必须是 `Number` 的子类或 `Number` 本身。这样就限制了 `printNumber` 方法只能接受数字类型的参数\n\n13.2.3 **通配符**：\n\n在泛型中，通配符用于表示未知类型。常见的通配符有两种：\n\n- **无界通配符（?）**：可以接受任何类型。\n- **有界通配符**：\n  - **`? extends T`**：表示可以接受 `T` 类型及其子类型。\n  - **`? super T`**：表示可以接受 `T` 类型及其父类型。\n\n示例：\n\n```java\npublic void processElements(List<? extends Number> list) {\n    for (Number number : list) {\n        System.out.println(number);\n    }\n}\n```\n\n在这个方法中，`List<? extends Number>` 表示可以接受一个 `Number` 或 `Number` 的子类的列表。\n\n13.2.4 **类型擦除**\n\n泛型在编译时被擦除，实际上运行时并不保留类型信息。例如，`List<String>` 在运行时就是 `List`。\n\n13.3 **自动拆箱与装箱**\n\n**自动装箱**：原始类型转换成对应的对象，如int变量转换成Integer对象。\n\n**自动拆箱**：对应的对象转成成原始类型，Integer对象转换成int类型值。\n\n原始类型byte,short,char,int,long,float,double,boolean 对应的封装类为Byte,Short,Character,Integer,Long,Float,Double,Boolean。装箱过程是通过调用包装器的`valueOf`方法实现的，而拆箱过程则是调用包装器的`xxxValue`方法实现的，如下：\n\n```java\nInteger i = 10;  // 自动装箱\nint n = i;       // 自动拆箱\n//等效于\nInteger i = Integer.valueOf(10);  // 自动装箱\nint n = i.intValue();             // 自动拆箱\n```\n\n13.4 **枚举**\n\n枚举是一种特殊的数据类型，用于表示有限的一组常量。当我们使用`enum`来定义一个枚举类型的时候，编译器会自动帮我们创建一个`final`类型的类继承`enum`类，所以枚举类型不能被继承。\n\n13.5 **for-each**\n\nfor-each的实现原理其实就是使用了普通的for循环和迭代器，迭代器示例如下：\n\n```java\npublic static void main(String[] args) {\n    // 创建一个 ArrayList 并添加一些元素\n    ArrayList<String> fruits = new ArrayList<>();\n    fruits.add(\"Apple\");\n    fruits.add(\"Banana\");\n    fruits.add(\"Cherry\");\n    fruits.add(\"Date\");\n\n    // 获取该 ArrayList 的迭代器\n    Iterator<String> iterator = fruits.iterator();\n\n    // 使用迭代器遍历集合\n    while (iterator.hasNext()) //检查集合是否存在下一元素\n    {\n        String fruit = iterator.next();//获取当前元素\n        System.out.println(fruit);\n    }\n}\n```\n\n**迭代器的特点**\n\n- **顺序访问**：`Iterator` 提供了一种顺序访问集合元素的方式。\n- **移除元素**：`Iterator` 还提供了 `remove()` 方法，可以在遍历时移除当前元素，但需要注意，它只能在调用 `next()` 之后调用，且只能移除当前遍历的元素\n\n13.6 **try-with-resource**\n\n基本语法\n\n```java\ntry (ResourceType resource = new ResourceType()) {\n    // 使用资源\n} catch (ExceptionType e) {\n    // 处理异常\n}\n```\n\n* **ResourceType**: 资源的类型，它必须实现 `AutoCloseable` 接口。\n\n* **resource**: 声明并初始化要使用的资源。\n\n* **try 块**: 在此块中使用资源，资源在此块结束时自动关闭。\n\n* **catch 块**: 用于处理可能出现的异常。\n\n","source":"_posts/Java基础-面试题1-13.md","raw":"---\ntitle: 一、Java基础-面试题1-13\ndate: 2024-08-24 22:32:50\ntags: Java\n---\n##### 1 Java和C++的区别？\n\nC++是编译型语言，Java是解释型语言。\n\n##### 2 如何理解面向过程和面向对象？\n\n2.1面向过程把问题分解成每一步骤，每一个步骤用函数实现，面向对象把步骤分解，步骤抽象，形成对象，通过对象的调用解决问题。\n\n2.2面向对象的三大特点\n\n* **封装**：抽象成一个具体的Java类\n\n* **继承**：子类继承父类（基类）的方法，方便方法复用\n\n* **多态**：`override`运行时多态 `overload`编译时多态\n\n##### 3接口和抽象类的区别？\n\n* 抽象类可以有构造器，接口不能有构造器，抽象类和接口都不能被实例化。\n\n* 接口可以被实现，抽象类可以被继承。\n\n* 一个类可以实现多个接口，但是只能继承一个抽象类，接口支持多重继承。\n\n抽象类示例如下：\n\n```java\nabstract class AnimalTwo {\n    // 抽象方法，子类必须实现\n    abstract void makeSound();\n    // 构造器\n    public AnimalTwo() {\n        System.out.println(\"I am father\");\n    }\n    // 抽象类中的具体方法\n    void breathe() {\n        System.out.println(\"Breathing...\");\n    }\n}\n\nclass DogTwo extends AnimalTwo {\n    @Override\n    void makeSound() {\n        System.out.println(\"Bark!\");\n    }\n\n    public DogTwo() {\n        super();\n        System.out.println(\"I am son\");\n    }\n\n}\n\npublic class AbstractExample {\n    public static void main(String[] args) {\n//        AnimalTwo animalTwo = new AnimalTwo(); 抽象类不能被实例化\n        DogTwo dogTwo = new DogTwo();\n        dogTwo.makeSound();  // 输出：Bark!\n        dogTwo.breathe();    // 输出：Breathing...\n    }\n}\n```\n\n接口示例如下：\n\n```java\ninterface Flyable {\n    void fly();\n}\n\n// 不能这样做：\n// Flyable flyable = new Flyable(); // 编译错误，因为接口不能被实例化\n\n// 这样是可以的：\nclass Bird implements Flyable {\n    public void fly() {\n        System.out.println(\"Bird is flying\");\n    }\n}\npublic class InterfaceExample {\n    public static void main(String[] args) {\n        Flyable flyable = new Bird(); // 使用实现了接口的类来实例化\n        flyable.fly(); // 输出：Bird is flying\n    }\n\n}\n```\n\n##### 4 Java中已经有了基本数据类型，为什么还需要包装类？\n\n4.1区别：\n\n* 基本类型默认值为0，false或\\u0000等，包装类为null。\n* 基本直接使用，不需要new，包装需要new。\n\n4.2自动拆箱和装箱\n\n* 自动拆箱：包装类转成基本数据类型；自动装箱：基本数据类型转换成包装类。\n\n4.3自动拆箱和装箱应用场景：包装类型和基本类型比较大小，包装类型的运算等\n\n```java\npublic class AutoBoxingUnboxingExample {\n    public static void main(String[] args) {\n        /*\n        在 c == d 的比较中，c 和 d 是 Integer 对象，因此它们的引用地址不同，因为它们的值超过了 Java 的整数缓存范围（-128 到 127）。\n        如果 c 和 d 在这个范围内，== 比较结果为 true，因为 Java 对这些值进行了缓存。\n         */\n\n        // 基本类型\n        int a = 10;\n        // 包装类型\n        Integer b = 10;\n\n        // 比较基本类型和包装类型\n        if (a == b) {\n            System.out.println(\"a 和 b 相等 (自动拆箱)\");\n        } else {\n            System.out.println(\"a 和 b 不相等\");\n        }\n\n        // 比较两个包装类型\n        Integer c = 128;\n        Integer d = 128;\n\n        if (c == d) {\n            System.out.println(\"c 和 d 引用相同\");\n        } else {\n            System.out.println(\"c 和 d 引用不同\");\n        }\n\n        // 使用 equals() 方法比较两个包装类型的值\n        if (c.equals(d)) {\n            System.out.println(\"c 和 d 的值相等\");\n        } else {\n            System.out.println(\"c 和 d 的值不相等\");\n        }\n\n        // 基本类型和包装类型的运算\n        int sum = a + b; // b 自动拆箱为 int 类型\n        System.out.println(\"a + b = \" + sum);\n    }\n}\n```\n\n##### 5 为什么不能用float,double表示金额？\n\n避免造成精度丢失，`Java`提供了`BigDecimal`来进行精确计算。\n\n##### 6 为什么不能用BigDecimal中的equals方法来做值比较？\n\n因为使用`BigDecimal`中的`equals`方法会比较值和标度，如比较0.1和0.10，他们的值虽然是一样的，但是精度是不一样的。通常使用`compareTo`进行值的比较。\n\n##### 7 BigDecimal(double)和BigDecimal(String)有什么区别？\n\n`BigDecimal(double)`创建出的值并不是准确的数字，而是一个近似值，而使用`BigDecimal(String)`所创建出的值就等于其本身。\n\n如：`new BigDecimal(0.1)`所创建出的值并不等于0.1，而`BigDecimal(\"0.1\")`创建出的值正好等于0.1。\n\n##### 8 String、StringBuilder、StringBuffer的区别？\n\n8.1 `String`类被声明为`final`，`final`修饰的类是不能被继承的，所以`String`类中的方法无法被重写。\n\n8.2 ` String`类没有提供用于修改字符串内容的方法，任何对字符串的修改，都会产生一个新的`String`对象。如下：\n\n```java\nString s = \"abcd\"\ns = s.concat(\"ef\")\n```\n\n虽然字符串内容看似已经成功修改，但是实际上s已经创建了一个新的对象了。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/1693569145559-1464948e-b069-4234-8f03-40dba93f044b.jpeg)\n\n所以当需要创建可变的字符串对象时，通常使用`StringBuilder`或`StringBuffer`。\n\n8.3 String的\"+\"是如何实现的\n\n```java\nString s1 = \"a\";\nString s2 = \"b\";\nString s3 = s1 + \",\" + s2 //等同于(new StringBuilder()).append(s1).append(\",\").append(s2).toString()\n```\n\n使用`+`进行字符拼接，实际上是通过`StringBuilder`的`append`方法进行处理的。\n\n8.4 为什么不要再循环中频繁的使用字符串拼接，而是使用`StringBuffer`和`StringBuilder`进行替代\n\n因为每次循坏都会创建临时对象，造成性能下降和内存浪费，如下：\n\n```java\nString result = \"\";\nfor (int i = 0; i < 1000; i++) {\n    result += i;  //等同于(new StringBuilder()).append(result).append(i).toString()\n}\n```\n\n##### 9 String为什么设计成不可变的？\n\n可以从缓存，安全性，线程安全等角度进行解释。\n\n9.1 **缓存**：`Java`中会存在一个字符串常量池，当创建对象时，常量池会先检查是否已经存在改对象，如已经存在则指向同一对象，如不存在则创建新的对象，这种机制依赖于`String`的不可变性。\n\n9.2 **安全性**：在实际应用中，用户密钥，文件路径等敏感信息都是用`String`类来进行存储的，如果`String`类是可变的，在某些情况下内容会被恶意篡改，从而引发安全性问题。\n\n9.3 **线程安全**：不可变对象在多个线程之间共享，它们的线程是安全的，当某个线程更改了值，会在字符串常量池中创建一个新的字符串，而不是修改相同的值，因此，字符串对于多线程来说是安全的。\n\n##### 10 String str=new String(hollis)创建了几个对象？\n\n通常情况下，这行代码会创建两个对象，\n\n1. **字符串常量池中的对象**：\n   - `hollis` 是一个字符串字面量。在代码执行时，Java 会检查字符串常量池中是否已经存在内容为 `hollis` 的字符串对象。如果不存在，Java 会在字符串常量池中创建一个新的 `hollis` 字符串对象。\n   - 如果常量池中已经存在 `hollis`，则不会创建新的对象。\n2. **堆中的 `String` 对象**：\n   - `new String(hollis)` 明确表示创建一个新的 `String` 对象，即使 `hollis` 已经存在于字符串常量池中。这个新的 `String` 对象会存储在堆（heap）中，并且它的内容会是指向常量池中 `hollis` 的引用。\n   - 这个 `String` 对象是通过 `new` 关键字创建的，因此在每次执行这行代码时都会生成一个新的对象。\n\n**结论**：\n\n- 如果 `hollis` 字符串字面量在常量池中不存在，那么 `String str = new String(hollis);` 这行代码会创建两个对象：一个在字符串常量池中，一个在堆中。\n- 如果 `hollis` 字符串字面量已经在常量池中存在，那么这行代码只会创建一个对象，即堆中的 `String` 对象。\n\n总结： **通常情况下，这行代码会创建两个对象**，一个在常量池中（如果字面量 `hollis` 还不存在），一个在堆中（无论如何都会创建）。\n\n##### 11 String a = \"ab\"; String b = \"a\" + \"b\"; a == b 吗？\n\n结果为`true`，因为==比较的是对象的引用，因为a和b都是**字面量**组成的字符串，引用地址在编译的时候已经确定了，在编译时，会把字面量直接拼接在一起，所以二者都是引用同一个对象。\n\n**字面量**：说简单点，字面量就是指有数字、字母等构成的字符串或数值，字面量只能以右值出现，即右值等于左边的值，如下：\n\n```java\nint a = 1;\nString s = \"hollis\";\n```\n\n##### 12 RPC接口返回中，使用基本类型还是包装类？\n\n尽量使用包装类，因为基本数据类型在发生异常的时候可能会返回默认值，如`int` 默认返回0，而包装类则会返回`null`。\n\n##### 13 在开发过程中常见的语法糖？\n\n所谓语法糖就是方便开发人员使用，对语法进行简化；但在编译的时候会还原成最基础的语法，这个就是解语法糖。\n\n13.1 **`switch`支持使用`String`类**\n\n`Java`中的`switch`原本就是支持基本类型，比如`int`、`char`等，对于`int`类型，会直接比较数值，对于`char`，则会比较ASCII码。对于编译器来说，\n\n任何类型的比较都要转成整型。如`short`、`char`（ASCII码是整型）、以及`int`。\n\n```java\nString str = \"world\";\nswitch (str) {\n    case \"hello\":\n        System.out.println(\"hello\");\n        break;\n    case \"world\":\n        System.out.println(\"world\");\n        break;\n    default:\n        break;\n}\n```\n\n实际在编译器中的代码如下：\n\n```java\nString str =\"world\";\nString s;\nswitch((s=str).hashcode()) {\n\tcase 99162322:\n\t\tif(s.equals(\"hello”))\n\t\t\tSystem.out.println(\"hello\");\n\t\tbreak;\n\tcase 113318802:\n\t\tif(s.equals(\"world\"))\n\t\t\tSystem.out.println(\"world\");\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}\n```\n\n字符串的`switch`是通过`equals()`和`hasdCode()`方法来实现的\n\n13.2 **泛型**\n\n13.2.1 **定义**：泛型允许类、接口、和方法在定义的时候使用类型参数，这能使代码更加通用和类型安全。\n\n**类**：\n\n```java\n// 泛型类\npublic class Box<T> {\n    private T item;\n\n    public void setItem(T item) {\n        this.item = item;\n    }\n\n    public T getItem() {\n        return item;\n    }\n}\n```\n\n上面的代码中，`Box` 类是一个泛型类，`T` 是一个类型参数，可以在创建 `Box` 对象时指定具体的类型。\n\n**接口**：\n\n```java\ninterface InterfaceName<T> {\n    // 在接口中使用类型参数T\n    T Method(T param);\n}\n```\n\n**方法**：方法也可以是泛型的，即方法定义中可以有一个或多个类型参数。这使得方法能够处理不同类型的对象，而不需要定义多个重载方法。\n\n```java\npublic <T> void printArray(T[] array) { // 方法声明使用了泛型类型（如 T）\n    for (T element : array) {\n        System.out.println(element);\n    }\n}\n```\n\n如果去掉方法中的`<T>`，则编译器会报警：Cannot resolve symbol 'T'，这意味着编译器不知道`T`是什么类型。\n\n13.2.2 **泛型的边界**：对泛型类型参数进行约束，比如要求类型参数必须是某个类的子类或实现某个接口。这可以通过使用 `extends` 关键字来实现。\n\n```java\npublic <T extends Number> void printNumber(T number) {\n    System.out.println(number);\n}\n```\n\n在这个方法中，`T` 必须是 `Number` 的子类或 `Number` 本身。这样就限制了 `printNumber` 方法只能接受数字类型的参数\n\n13.2.3 **通配符**：\n\n在泛型中，通配符用于表示未知类型。常见的通配符有两种：\n\n- **无界通配符（?）**：可以接受任何类型。\n- **有界通配符**：\n  - **`? extends T`**：表示可以接受 `T` 类型及其子类型。\n  - **`? super T`**：表示可以接受 `T` 类型及其父类型。\n\n示例：\n\n```java\npublic void processElements(List<? extends Number> list) {\n    for (Number number : list) {\n        System.out.println(number);\n    }\n}\n```\n\n在这个方法中，`List<? extends Number>` 表示可以接受一个 `Number` 或 `Number` 的子类的列表。\n\n13.2.4 **类型擦除**\n\n泛型在编译时被擦除，实际上运行时并不保留类型信息。例如，`List<String>` 在运行时就是 `List`。\n\n13.3 **自动拆箱与装箱**\n\n**自动装箱**：原始类型转换成对应的对象，如int变量转换成Integer对象。\n\n**自动拆箱**：对应的对象转成成原始类型，Integer对象转换成int类型值。\n\n原始类型byte,short,char,int,long,float,double,boolean 对应的封装类为Byte,Short,Character,Integer,Long,Float,Double,Boolean。装箱过程是通过调用包装器的`valueOf`方法实现的，而拆箱过程则是调用包装器的`xxxValue`方法实现的，如下：\n\n```java\nInteger i = 10;  // 自动装箱\nint n = i;       // 自动拆箱\n//等效于\nInteger i = Integer.valueOf(10);  // 自动装箱\nint n = i.intValue();             // 自动拆箱\n```\n\n13.4 **枚举**\n\n枚举是一种特殊的数据类型，用于表示有限的一组常量。当我们使用`enum`来定义一个枚举类型的时候，编译器会自动帮我们创建一个`final`类型的类继承`enum`类，所以枚举类型不能被继承。\n\n13.5 **for-each**\n\nfor-each的实现原理其实就是使用了普通的for循环和迭代器，迭代器示例如下：\n\n```java\npublic static void main(String[] args) {\n    // 创建一个 ArrayList 并添加一些元素\n    ArrayList<String> fruits = new ArrayList<>();\n    fruits.add(\"Apple\");\n    fruits.add(\"Banana\");\n    fruits.add(\"Cherry\");\n    fruits.add(\"Date\");\n\n    // 获取该 ArrayList 的迭代器\n    Iterator<String> iterator = fruits.iterator();\n\n    // 使用迭代器遍历集合\n    while (iterator.hasNext()) //检查集合是否存在下一元素\n    {\n        String fruit = iterator.next();//获取当前元素\n        System.out.println(fruit);\n    }\n}\n```\n\n**迭代器的特点**\n\n- **顺序访问**：`Iterator` 提供了一种顺序访问集合元素的方式。\n- **移除元素**：`Iterator` 还提供了 `remove()` 方法，可以在遍历时移除当前元素，但需要注意，它只能在调用 `next()` 之后调用，且只能移除当前遍历的元素\n\n13.6 **try-with-resource**\n\n基本语法\n\n```java\ntry (ResourceType resource = new ResourceType()) {\n    // 使用资源\n} catch (ExceptionType e) {\n    // 处理异常\n}\n```\n\n* **ResourceType**: 资源的类型，它必须实现 `AutoCloseable` 接口。\n\n* **resource**: 声明并初始化要使用的资源。\n\n* **try 块**: 在此块中使用资源，资源在此块结束时自动关闭。\n\n* **catch 块**: 用于处理可能出现的异常。\n\n","slug":"Java基础-面试题1-13","published":1,"updated":"2024-08-26T12:49:03.602Z","comments":1,"layout":"post","photos":[],"_id":"cm0azws7w0003z8u4hzupbkjp","content":"<h5 id=\"1-Java和C-的区别？\"><a href=\"#1-Java和C-的区别？\" class=\"headerlink\" title=\"1 Java和C++的区别？\"></a>1 Java和C++的区别？</h5><p>C++是编译型语言，Java是解释型语言。</p>\n<h5 id=\"2-如何理解面向过程和面向对象？\"><a href=\"#2-如何理解面向过程和面向对象？\" class=\"headerlink\" title=\"2 如何理解面向过程和面向对象？\"></a>2 如何理解面向过程和面向对象？</h5><p>2.1面向过程把问题分解成每一步骤，每一个步骤用函数实现，面向对象把步骤分解，步骤抽象，形成对象，通过对象的调用解决问题。</p>\n<p>2.2面向对象的三大特点</p>\n<ul>\n<li><p><strong>封装</strong>：抽象成一个具体的Java类</p>\n</li>\n<li><p><strong>继承</strong>：子类继承父类（基类）的方法，方便方法复用</p>\n</li>\n<li><p><strong>多态</strong>：<code>override</code>运行时多态 <code>overload</code>编译时多态</p>\n</li>\n</ul>\n<h5 id=\"3接口和抽象类的区别？\"><a href=\"#3接口和抽象类的区别？\" class=\"headerlink\" title=\"3接口和抽象类的区别？\"></a>3接口和抽象类的区别？</h5><ul>\n<li><p>抽象类可以有构造器，接口不能有构造器，抽象类和接口都不能被实例化。</p>\n</li>\n<li><p>接口可以被实现，抽象类可以被继承。</p>\n</li>\n<li><p>一个类可以实现多个接口，但是只能继承一个抽象类，接口支持多重继承。</p>\n</li>\n</ul>\n<p>抽象类示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnimalTwo</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抽象方法，子类必须实现</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeSound</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AnimalTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I am father&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 抽象类中的具体方法</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">breathe</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Breathing...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DogTwo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AnimalTwo</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">makeSound</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bark!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DogTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I am son&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        AnimalTwo animalTwo = new AnimalTwo(); 抽象类不能被实例化</span></span><br><span class=\"line\">        <span class=\"type\">DogTwo</span> <span class=\"variable\">dogTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DogTwo</span>();</span><br><span class=\"line\">        dogTwo.makeSound();  <span class=\"comment\">// 输出：Bark!</span></span><br><span class=\"line\">        dogTwo.breathe();    <span class=\"comment\">// 输出：Breathing...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Flyable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不能这样做：</span></span><br><span class=\"line\"><span class=\"comment\">// Flyable flyable = new Flyable(); // 编译错误，因为接口不能被实例化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样是可以的：</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bird</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Flyable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bird is flying&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterfaceExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Flyable</span> <span class=\"variable\">flyable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bird</span>(); <span class=\"comment\">// 使用实现了接口的类来实例化</span></span><br><span class=\"line\">        flyable.fly(); <span class=\"comment\">// 输出：Bird is flying</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-Java中已经有了基本数据类型，为什么还需要包装类？\"><a href=\"#4-Java中已经有了基本数据类型，为什么还需要包装类？\" class=\"headerlink\" title=\"4 Java中已经有了基本数据类型，为什么还需要包装类？\"></a>4 Java中已经有了基本数据类型，为什么还需要包装类？</h5><p>4.1区别：</p>\n<ul>\n<li>基本类型默认值为0，false或\\u0000等，包装类为null。</li>\n<li>基本直接使用，不需要new，包装需要new。</li>\n</ul>\n<p>4.2自动拆箱和装箱</p>\n<ul>\n<li>自动拆箱：包装类转成基本数据类型；自动装箱：基本数据类型转换成包装类。</li>\n</ul>\n<p>4.3自动拆箱和装箱应用场景：包装类型和基本类型比较大小，包装类型的运算等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AutoBoxingUnboxingExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        在 c == d 的比较中，c 和 d 是 Integer 对象，因此它们的引用地址不同，因为它们的值超过了 Java 的整数缓存范围（-128 到 127）。</span></span><br><span class=\"line\"><span class=\"comment\">        如果 c 和 d 在这个范围内，== 比较结果为 true，因为 Java 对这些值进行了缓存。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 基本类型</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 包装类型</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 比较基本类型和包装类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == b) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;a 和 b 相等 (自动拆箱)&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;a 和 b 不相等&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 比较两个包装类型</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == d) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;c 和 d 引用相同&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;c 和 d 引用不同&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用 equals() 方法比较两个包装类型的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.equals(d)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;c 和 d 的值相等&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;c 和 d 的值不相等&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 基本类型和包装类型的运算</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> a + b; <span class=\"comment\">// b 自动拆箱为 int 类型</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a + b = &quot;</span> + sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-为什么不能用float-double表示金额？\"><a href=\"#5-为什么不能用float-double表示金额？\" class=\"headerlink\" title=\"5 为什么不能用float,double表示金额？\"></a>5 为什么不能用float,double表示金额？</h5><p>避免造成精度丢失，<code>Java</code>提供了<code>BigDecimal</code>来进行精确计算。</p>\n<h5 id=\"6-为什么不能用BigDecimal中的equals方法来做值比较？\"><a href=\"#6-为什么不能用BigDecimal中的equals方法来做值比较？\" class=\"headerlink\" title=\"6 为什么不能用BigDecimal中的equals方法来做值比较？\"></a>6 为什么不能用BigDecimal中的equals方法来做值比较？</h5><p>因为使用<code>BigDecimal</code>中的<code>equals</code>方法会比较值和标度，如比较0.1和0.10，他们的值虽然是一样的，但是精度是不一样的。通常使用<code>compareTo</code>进行值的比较。</p>\n<h5 id=\"7-BigDecimal-double-和BigDecimal-String-有什么区别？\"><a href=\"#7-BigDecimal-double-和BigDecimal-String-有什么区别？\" class=\"headerlink\" title=\"7 BigDecimal(double)和BigDecimal(String)有什么区别？\"></a>7 BigDecimal(double)和BigDecimal(String)有什么区别？</h5><p><code>BigDecimal(double)</code>创建出的值并不是准确的数字，而是一个近似值，而使用<code>BigDecimal(String)</code>所创建出的值就等于其本身。</p>\n<p>如：<code>new BigDecimal(0.1)</code>所创建出的值并不等于0.1，而<code>BigDecimal(&quot;0.1&quot;)</code>创建出的值正好等于0.1。</p>\n<h5 id=\"8-String、StringBuilder、StringBuffer的区别？\"><a href=\"#8-String、StringBuilder、StringBuffer的区别？\" class=\"headerlink\" title=\"8 String、StringBuilder、StringBuffer的区别？\"></a>8 String、StringBuilder、StringBuffer的区别？</h5><p>8.1 <code>String</code>类被声明为<code>final</code>，<code>final</code>修饰的类是不能被继承的，所以<code>String</code>类中的方法无法被重写。</p>\n<p>8.2 <code> String</code>类没有提供用于修改字符串内容的方法，任何对字符串的修改，都会产生一个新的<code>String</code>对象。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcd&quot;</span></span><br><span class=\"line\">s = s.concat(<span class=\"string\">&quot;ef&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>虽然字符串内容看似已经成功修改，但是实际上s已经创建了一个新的对象了。</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/1693569145559-1464948e-b069-4234-8f03-40dba93f044b.jpeg\"></p>\n<p>所以当需要创建可变的字符串对象时，通常使用<code>StringBuilder</code>或<code>StringBuffer</code>。</p>\n<p>8.3 String的”+”是如何实现的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> s1 + <span class=\"string\">&quot;,&quot;</span> + s2 <span class=\"comment\">//等同于(new StringBuilder()).append(s1).append(&quot;,&quot;).append(s2).toString()</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>+</code>进行字符拼接，实际上是通过<code>StringBuilder</code>的<code>append</code>方法进行处理的。</p>\n<p>8.4 为什么不要再循环中频繁的使用字符串拼接，而是使用<code>StringBuffer</code>和<code>StringBuilder</code>进行替代</p>\n<p>因为每次循坏都会创建临时对象，造成性能下降和内存浪费，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    result += i;  <span class=\"comment\">//等同于(new StringBuilder()).append(result).append(i).toString()</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"9-String为什么设计成不可变的？\"><a href=\"#9-String为什么设计成不可变的？\" class=\"headerlink\" title=\"9 String为什么设计成不可变的？\"></a>9 String为什么设计成不可变的？</h5><p>可以从缓存，安全性，线程安全等角度进行解释。</p>\n<p>9.1 <strong>缓存</strong>：<code>Java</code>中会存在一个字符串常量池，当创建对象时，常量池会先检查是否已经存在改对象，如已经存在则指向同一对象，如不存在则创建新的对象，这种机制依赖于<code>String</code>的不可变性。</p>\n<p>9.2 <strong>安全性</strong>：在实际应用中，用户密钥，文件路径等敏感信息都是用<code>String</code>类来进行存储的，如果<code>String</code>类是可变的，在某些情况下内容会被恶意篡改，从而引发安全性问题。</p>\n<p>9.3 <strong>线程安全</strong>：不可变对象在多个线程之间共享，它们的线程是安全的，当某个线程更改了值，会在字符串常量池中创建一个新的字符串，而不是修改相同的值，因此，字符串对于多线程来说是安全的。</p>\n<h5 id=\"10-String-str-new-String-hollis-创建了几个对象？\"><a href=\"#10-String-str-new-String-hollis-创建了几个对象？\" class=\"headerlink\" title=\"10 String str&#x3D;new String(hollis)创建了几个对象？\"></a>10 String str&#x3D;new String(hollis)创建了几个对象？</h5><p>通常情况下，这行代码会创建两个对象，</p>\n<ol>\n<li><strong>字符串常量池中的对象</strong>：<ul>\n<li><code>hollis</code> 是一个字符串字面量。在代码执行时，Java 会检查字符串常量池中是否已经存在内容为 <code>hollis</code> 的字符串对象。如果不存在，Java 会在字符串常量池中创建一个新的 <code>hollis</code> 字符串对象。</li>\n<li>如果常量池中已经存在 <code>hollis</code>，则不会创建新的对象。</li>\n</ul>\n</li>\n<li><strong>堆中的 <code>String</code> 对象</strong>：<ul>\n<li><code>new String(hollis)</code> 明确表示创建一个新的 <code>String</code> 对象，即使 <code>hollis</code> 已经存在于字符串常量池中。这个新的 <code>String</code> 对象会存储在堆（heap）中，并且它的内容会是指向常量池中 <code>hollis</code> 的引用。</li>\n<li>这个 <code>String</code> 对象是通过 <code>new</code> 关键字创建的，因此在每次执行这行代码时都会生成一个新的对象。</li>\n</ul>\n</li>\n</ol>\n<p><strong>结论</strong>：</p>\n<ul>\n<li>如果 <code>hollis</code> 字符串字面量在常量池中不存在，那么 <code>String str = new String(hollis);</code> 这行代码会创建两个对象：一个在字符串常量池中，一个在堆中。</li>\n<li>如果 <code>hollis</code> 字符串字面量已经在常量池中存在，那么这行代码只会创建一个对象，即堆中的 <code>String</code> 对象。</li>\n</ul>\n<p>总结： <strong>通常情况下，这行代码会创建两个对象</strong>，一个在常量池中（如果字面量 <code>hollis</code> 还不存在），一个在堆中（无论如何都会创建）。</p>\n<h5 id=\"11-String-a-“ab”-String-b-“a”-“b”-a-b-吗？\"><a href=\"#11-String-a-“ab”-String-b-“a”-“b”-a-b-吗？\" class=\"headerlink\" title=\"11 String a &#x3D; “ab”; String b &#x3D; “a” + “b”; a &#x3D;&#x3D; b 吗？\"></a>11 String a &#x3D; “ab”; String b &#x3D; “a” + “b”; a &#x3D;&#x3D; b 吗？</h5><p>结果为<code>true</code>，因为&#x3D;&#x3D;比较的是对象的引用，因为a和b都是<strong>字面量</strong>组成的字符串，引用地址在编译的时候已经确定了，在编译时，会把字面量直接拼接在一起，所以二者都是引用同一个对象。</p>\n<p><strong>字面量</strong>：说简单点，字面量就是指有数字、字母等构成的字符串或数值，字面量只能以右值出现，即右值等于左边的值，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hollis&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"12-RPC接口返回中，使用基本类型还是包装类？\"><a href=\"#12-RPC接口返回中，使用基本类型还是包装类？\" class=\"headerlink\" title=\"12 RPC接口返回中，使用基本类型还是包装类？\"></a>12 RPC接口返回中，使用基本类型还是包装类？</h5><p>尽量使用包装类，因为基本数据类型在发生异常的时候可能会返回默认值，如<code>int</code> 默认返回0，而包装类则会返回<code>null</code>。</p>\n<h5 id=\"13-在开发过程中常见的语法糖？\"><a href=\"#13-在开发过程中常见的语法糖？\" class=\"headerlink\" title=\"13 在开发过程中常见的语法糖？\"></a>13 在开发过程中常见的语法糖？</h5><p>所谓语法糖就是方便开发人员使用，对语法进行简化；但在编译的时候会还原成最基础的语法，这个就是解语法糖。</p>\n<p>13.1 <strong><code>switch</code>支持使用<code>String</code>类</strong></p>\n<p><code>Java</code>中的<code>switch</code>原本就是支持基本类型，比如<code>int</code>、<code>char</code>等，对于<code>int</code>类型，会直接比较数值，对于<code>char</code>，则会比较ASCII码。对于编译器来说，</p>\n<p>任何类型的比较都要转成整型。如<code>short</code>、<code>char</code>（ASCII码是整型）、以及<code>int</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;hello&quot;</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;world&quot;</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际在编译器中的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span><span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\">String s;</span><br><span class=\"line\"><span class=\"keyword\">switch</span>((s=str).hashcode()) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">99162322</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s.equals(<span class=\"string\">&quot;hello”))</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tSystem.out.println(&quot;</span>hello<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">\t\tbreak;</span></span><br><span class=\"line\"><span class=\"string\">\tcase 113318802:</span></span><br><span class=\"line\"><span class=\"string\">\t\tif(s.equals(&quot;</span>world<span class=\"string\">&quot;))</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tSystem.out.println(&quot;</span>world<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">\t\tbreak;</span></span><br><span class=\"line\"><span class=\"string\">\tdefault:</span></span><br><span class=\"line\"><span class=\"string\">\t\tbreak;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串的<code>switch</code>是通过<code>equals()</code>和<code>hasdCode()</code>方法来实现的</p>\n<p>13.2 <strong>泛型</strong></p>\n<p>13.2.1 <strong>定义</strong>：泛型允许类、接口、和方法在定义的时候使用类型参数，这能使代码更加通用和类型安全。</p>\n<p><strong>类</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Box</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T item;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setItem</span><span class=\"params\">(T item)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.item = item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getItem</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，<code>Box</code> 类是一个泛型类，<code>T</code> 是一个类型参数，可以在创建 <code>Box</code> 对象时指定具体的类型。</p>\n<p><strong>接口</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceName</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在接口中使用类型参数T</span></span><br><span class=\"line\">    T <span class=\"title function_\">Method</span><span class=\"params\">(T param)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法</strong>：方法也可以是泛型的，即方法定义中可以有一个或多个类型参数。这使得方法能够处理不同类型的对象，而不需要定义多个重载方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(T[] array)</span> &#123; <span class=\"comment\">// 方法声明使用了泛型类型（如 T）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T element : array) &#123;</span><br><span class=\"line\">        System.out.println(element);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果去掉方法中的<code>&lt;T&gt;</code>，则编译器会报警：Cannot resolve symbol ‘T’，这意味着编译器不知道<code>T</code>是什么类型。</p>\n<p>13.2.2 <strong>泛型的边界</strong>：对泛型类型参数进行约束，比如要求类型参数必须是某个类的子类或实现某个接口。这可以通过使用 <code>extends</code> 关键字来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span>&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">printNumber</span><span class=\"params\">(T number)</span> &#123;</span><br><span class=\"line\">    System.out.println(number);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中，<code>T</code> 必须是 <code>Number</code> 的子类或 <code>Number</code> 本身。这样就限制了 <code>printNumber</code> 方法只能接受数字类型的参数</p>\n<p>13.2.3 <strong>通配符</strong>：</p>\n<p>在泛型中，通配符用于表示未知类型。常见的通配符有两种：</p>\n<ul>\n<li><strong>无界通配符（?）</strong>：可以接受任何类型。</li>\n<li><strong>有界通配符</strong>：<ul>\n<li>**<code>? extends T</code>**：表示可以接受 <code>T</code> 类型及其子类型。</li>\n<li>**<code>? super T</code>**：表示可以接受 <code>T</code> 类型及其父类型。</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processElements</span><span class=\"params\">(List&lt;? extends Number&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Number number : list) &#123;</span><br><span class=\"line\">        System.out.println(number);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中，<code>List&lt;? extends Number&gt;</code> 表示可以接受一个 <code>Number</code> 或 <code>Number</code> 的子类的列表。</p>\n<p>13.2.4 <strong>类型擦除</strong></p>\n<p>泛型在编译时被擦除，实际上运行时并不保留类型信息。例如，<code>List&lt;String&gt;</code> 在运行时就是 <code>List</code>。</p>\n<p>13.3 <strong>自动拆箱与装箱</strong></p>\n<p><strong>自动装箱</strong>：原始类型转换成对应的对象，如int变量转换成Integer对象。</p>\n<p><strong>自动拆箱</strong>：对应的对象转成成原始类型，Integer对象转换成int类型值。</p>\n<p>原始类型byte,short,char,int,long,float,double,boolean 对应的封装类为Byte,Short,Character,Integer,Long,Float,Double,Boolean。装箱过程是通过调用包装器的<code>valueOf</code>方法实现的，而拆箱过程则是调用包装器的<code>xxxValue</code>方法实现的，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;  <span class=\"comment\">// 自动装箱</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> i;       <span class=\"comment\">// 自动拆箱</span></span><br><span class=\"line\"><span class=\"comment\">//等效于</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> Integer.valueOf(<span class=\"number\">10</span>);  <span class=\"comment\">// 自动装箱</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> i.intValue();             <span class=\"comment\">// 自动拆箱</span></span><br></pre></td></tr></table></figure>\n\n<p>13.4 <strong>枚举</strong></p>\n<p>枚举是一种特殊的数据类型，用于表示有限的一组常量。当我们使用<code>enum</code>来定义一个枚举类型的时候，编译器会自动帮我们创建一个<code>final</code>类型的类继承<code>enum</code>类，所以枚举类型不能被继承。</p>\n<p>13.5 <strong>for-each</strong></p>\n<p>for-each的实现原理其实就是使用了普通的for循环和迭代器，迭代器示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 ArrayList 并添加一些元素</span></span><br><span class=\"line\">    ArrayList&lt;String&gt; fruits = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    fruits.add(<span class=\"string\">&quot;Apple&quot;</span>);</span><br><span class=\"line\">    fruits.add(<span class=\"string\">&quot;Banana&quot;</span>);</span><br><span class=\"line\">    fruits.add(<span class=\"string\">&quot;Cherry&quot;</span>);</span><br><span class=\"line\">    fruits.add(<span class=\"string\">&quot;Date&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取该 ArrayList 的迭代器</span></span><br><span class=\"line\">    Iterator&lt;String&gt; iterator = fruits.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用迭代器遍历集合</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (iterator.hasNext()) <span class=\"comment\">//检查集合是否存在下一元素</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fruit</span> <span class=\"operator\">=</span> iterator.next();<span class=\"comment\">//获取当前元素</span></span><br><span class=\"line\">        System.out.println(fruit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>迭代器的特点</strong></p>\n<ul>\n<li><strong>顺序访问</strong>：<code>Iterator</code> 提供了一种顺序访问集合元素的方式。</li>\n<li><strong>移除元素</strong>：<code>Iterator</code> 还提供了 <code>remove()</code> 方法，可以在遍历时移除当前元素，但需要注意，它只能在调用 <code>next()</code> 之后调用，且只能移除当前遍历的元素</li>\n</ul>\n<p>13.6 <strong>try-with-resource</strong></p>\n<p>基本语法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">ResourceType</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResourceType</span>()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用资源</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>ResourceType</strong>: 资源的类型，它必须实现 <code>AutoCloseable</code> 接口。</p>\n</li>\n<li><p><strong>resource</strong>: 声明并初始化要使用的资源。</p>\n</li>\n<li><p><strong>try 块</strong>: 在此块中使用资源，资源在此块结束时自动关闭。</p>\n</li>\n<li><p><strong>catch 块</strong>: 用于处理可能出现的异常。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h5 id=\"1-Java和C-的区别？\"><a href=\"#1-Java和C-的区别？\" class=\"headerlink\" title=\"1 Java和C++的区别？\"></a>1 Java和C++的区别？</h5><p>C++是编译型语言，Java是解释型语言。</p>\n<h5 id=\"2-如何理解面向过程和面向对象？\"><a href=\"#2-如何理解面向过程和面向对象？\" class=\"headerlink\" title=\"2 如何理解面向过程和面向对象？\"></a>2 如何理解面向过程和面向对象？</h5><p>2.1面向过程把问题分解成每一步骤，每一个步骤用函数实现，面向对象把步骤分解，步骤抽象，形成对象，通过对象的调用解决问题。</p>\n<p>2.2面向对象的三大特点</p>\n<ul>\n<li><p><strong>封装</strong>：抽象成一个具体的Java类</p>\n</li>\n<li><p><strong>继承</strong>：子类继承父类（基类）的方法，方便方法复用</p>\n</li>\n<li><p><strong>多态</strong>：<code>override</code>运行时多态 <code>overload</code>编译时多态</p>\n</li>\n</ul>\n<h5 id=\"3接口和抽象类的区别？\"><a href=\"#3接口和抽象类的区别？\" class=\"headerlink\" title=\"3接口和抽象类的区别？\"></a>3接口和抽象类的区别？</h5><ul>\n<li><p>抽象类可以有构造器，接口不能有构造器，抽象类和接口都不能被实例化。</p>\n</li>\n<li><p>接口可以被实现，抽象类可以被继承。</p>\n</li>\n<li><p>一个类可以实现多个接口，但是只能继承一个抽象类，接口支持多重继承。</p>\n</li>\n</ul>\n<p>抽象类示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnimalTwo</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抽象方法，子类必须实现</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeSound</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AnimalTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I am father&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 抽象类中的具体方法</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">breathe</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Breathing...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DogTwo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AnimalTwo</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">makeSound</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bark!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DogTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I am son&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        AnimalTwo animalTwo = new AnimalTwo(); 抽象类不能被实例化</span></span><br><span class=\"line\">        <span class=\"type\">DogTwo</span> <span class=\"variable\">dogTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DogTwo</span>();</span><br><span class=\"line\">        dogTwo.makeSound();  <span class=\"comment\">// 输出：Bark!</span></span><br><span class=\"line\">        dogTwo.breathe();    <span class=\"comment\">// 输出：Breathing...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Flyable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不能这样做：</span></span><br><span class=\"line\"><span class=\"comment\">// Flyable flyable = new Flyable(); // 编译错误，因为接口不能被实例化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样是可以的：</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bird</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Flyable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bird is flying&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterfaceExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Flyable</span> <span class=\"variable\">flyable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bird</span>(); <span class=\"comment\">// 使用实现了接口的类来实例化</span></span><br><span class=\"line\">        flyable.fly(); <span class=\"comment\">// 输出：Bird is flying</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-Java中已经有了基本数据类型，为什么还需要包装类？\"><a href=\"#4-Java中已经有了基本数据类型，为什么还需要包装类？\" class=\"headerlink\" title=\"4 Java中已经有了基本数据类型，为什么还需要包装类？\"></a>4 Java中已经有了基本数据类型，为什么还需要包装类？</h5><p>4.1区别：</p>\n<ul>\n<li>基本类型默认值为0，false或\\u0000等，包装类为null。</li>\n<li>基本直接使用，不需要new，包装需要new。</li>\n</ul>\n<p>4.2自动拆箱和装箱</p>\n<ul>\n<li>自动拆箱：包装类转成基本数据类型；自动装箱：基本数据类型转换成包装类。</li>\n</ul>\n<p>4.3自动拆箱和装箱应用场景：包装类型和基本类型比较大小，包装类型的运算等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AutoBoxingUnboxingExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        在 c == d 的比较中，c 和 d 是 Integer 对象，因此它们的引用地址不同，因为它们的值超过了 Java 的整数缓存范围（-128 到 127）。</span></span><br><span class=\"line\"><span class=\"comment\">        如果 c 和 d 在这个范围内，== 比较结果为 true，因为 Java 对这些值进行了缓存。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 基本类型</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 包装类型</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 比较基本类型和包装类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == b) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;a 和 b 相等 (自动拆箱)&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;a 和 b 不相等&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 比较两个包装类型</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == d) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;c 和 d 引用相同&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;c 和 d 引用不同&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用 equals() 方法比较两个包装类型的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.equals(d)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;c 和 d 的值相等&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;c 和 d 的值不相等&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 基本类型和包装类型的运算</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> a + b; <span class=\"comment\">// b 自动拆箱为 int 类型</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a + b = &quot;</span> + sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-为什么不能用float-double表示金额？\"><a href=\"#5-为什么不能用float-double表示金额？\" class=\"headerlink\" title=\"5 为什么不能用float,double表示金额？\"></a>5 为什么不能用float,double表示金额？</h5><p>避免造成精度丢失，<code>Java</code>提供了<code>BigDecimal</code>来进行精确计算。</p>\n<h5 id=\"6-为什么不能用BigDecimal中的equals方法来做值比较？\"><a href=\"#6-为什么不能用BigDecimal中的equals方法来做值比较？\" class=\"headerlink\" title=\"6 为什么不能用BigDecimal中的equals方法来做值比较？\"></a>6 为什么不能用BigDecimal中的equals方法来做值比较？</h5><p>因为使用<code>BigDecimal</code>中的<code>equals</code>方法会比较值和标度，如比较0.1和0.10，他们的值虽然是一样的，但是精度是不一样的。通常使用<code>compareTo</code>进行值的比较。</p>\n<h5 id=\"7-BigDecimal-double-和BigDecimal-String-有什么区别？\"><a href=\"#7-BigDecimal-double-和BigDecimal-String-有什么区别？\" class=\"headerlink\" title=\"7 BigDecimal(double)和BigDecimal(String)有什么区别？\"></a>7 BigDecimal(double)和BigDecimal(String)有什么区别？</h5><p><code>BigDecimal(double)</code>创建出的值并不是准确的数字，而是一个近似值，而使用<code>BigDecimal(String)</code>所创建出的值就等于其本身。</p>\n<p>如：<code>new BigDecimal(0.1)</code>所创建出的值并不等于0.1，而<code>BigDecimal(&quot;0.1&quot;)</code>创建出的值正好等于0.1。</p>\n<h5 id=\"8-String、StringBuilder、StringBuffer的区别？\"><a href=\"#8-String、StringBuilder、StringBuffer的区别？\" class=\"headerlink\" title=\"8 String、StringBuilder、StringBuffer的区别？\"></a>8 String、StringBuilder、StringBuffer的区别？</h5><p>8.1 <code>String</code>类被声明为<code>final</code>，<code>final</code>修饰的类是不能被继承的，所以<code>String</code>类中的方法无法被重写。</p>\n<p>8.2 <code> String</code>类没有提供用于修改字符串内容的方法，任何对字符串的修改，都会产生一个新的<code>String</code>对象。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcd&quot;</span></span><br><span class=\"line\">s = s.concat(<span class=\"string\">&quot;ef&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>虽然字符串内容看似已经成功修改，但是实际上s已经创建了一个新的对象了。</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/1693569145559-1464948e-b069-4234-8f03-40dba93f044b.jpeg\"></p>\n<p>所以当需要创建可变的字符串对象时，通常使用<code>StringBuilder</code>或<code>StringBuffer</code>。</p>\n<p>8.3 String的”+”是如何实现的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> s1 + <span class=\"string\">&quot;,&quot;</span> + s2 <span class=\"comment\">//等同于(new StringBuilder()).append(s1).append(&quot;,&quot;).append(s2).toString()</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>+</code>进行字符拼接，实际上是通过<code>StringBuilder</code>的<code>append</code>方法进行处理的。</p>\n<p>8.4 为什么不要再循环中频繁的使用字符串拼接，而是使用<code>StringBuffer</code>和<code>StringBuilder</code>进行替代</p>\n<p>因为每次循坏都会创建临时对象，造成性能下降和内存浪费，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    result += i;  <span class=\"comment\">//等同于(new StringBuilder()).append(result).append(i).toString()</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"9-String为什么设计成不可变的？\"><a href=\"#9-String为什么设计成不可变的？\" class=\"headerlink\" title=\"9 String为什么设计成不可变的？\"></a>9 String为什么设计成不可变的？</h5><p>可以从缓存，安全性，线程安全等角度进行解释。</p>\n<p>9.1 <strong>缓存</strong>：<code>Java</code>中会存在一个字符串常量池，当创建对象时，常量池会先检查是否已经存在改对象，如已经存在则指向同一对象，如不存在则创建新的对象，这种机制依赖于<code>String</code>的不可变性。</p>\n<p>9.2 <strong>安全性</strong>：在实际应用中，用户密钥，文件路径等敏感信息都是用<code>String</code>类来进行存储的，如果<code>String</code>类是可变的，在某些情况下内容会被恶意篡改，从而引发安全性问题。</p>\n<p>9.3 <strong>线程安全</strong>：不可变对象在多个线程之间共享，它们的线程是安全的，当某个线程更改了值，会在字符串常量池中创建一个新的字符串，而不是修改相同的值，因此，字符串对于多线程来说是安全的。</p>\n<h5 id=\"10-String-str-new-String-hollis-创建了几个对象？\"><a href=\"#10-String-str-new-String-hollis-创建了几个对象？\" class=\"headerlink\" title=\"10 String str&#x3D;new String(hollis)创建了几个对象？\"></a>10 String str&#x3D;new String(hollis)创建了几个对象？</h5><p>通常情况下，这行代码会创建两个对象，</p>\n<ol>\n<li><strong>字符串常量池中的对象</strong>：<ul>\n<li><code>hollis</code> 是一个字符串字面量。在代码执行时，Java 会检查字符串常量池中是否已经存在内容为 <code>hollis</code> 的字符串对象。如果不存在，Java 会在字符串常量池中创建一个新的 <code>hollis</code> 字符串对象。</li>\n<li>如果常量池中已经存在 <code>hollis</code>，则不会创建新的对象。</li>\n</ul>\n</li>\n<li><strong>堆中的 <code>String</code> 对象</strong>：<ul>\n<li><code>new String(hollis)</code> 明确表示创建一个新的 <code>String</code> 对象，即使 <code>hollis</code> 已经存在于字符串常量池中。这个新的 <code>String</code> 对象会存储在堆（heap）中，并且它的内容会是指向常量池中 <code>hollis</code> 的引用。</li>\n<li>这个 <code>String</code> 对象是通过 <code>new</code> 关键字创建的，因此在每次执行这行代码时都会生成一个新的对象。</li>\n</ul>\n</li>\n</ol>\n<p><strong>结论</strong>：</p>\n<ul>\n<li>如果 <code>hollis</code> 字符串字面量在常量池中不存在，那么 <code>String str = new String(hollis);</code> 这行代码会创建两个对象：一个在字符串常量池中，一个在堆中。</li>\n<li>如果 <code>hollis</code> 字符串字面量已经在常量池中存在，那么这行代码只会创建一个对象，即堆中的 <code>String</code> 对象。</li>\n</ul>\n<p>总结： <strong>通常情况下，这行代码会创建两个对象</strong>，一个在常量池中（如果字面量 <code>hollis</code> 还不存在），一个在堆中（无论如何都会创建）。</p>\n<h5 id=\"11-String-a-“ab”-String-b-“a”-“b”-a-b-吗？\"><a href=\"#11-String-a-“ab”-String-b-“a”-“b”-a-b-吗？\" class=\"headerlink\" title=\"11 String a &#x3D; “ab”; String b &#x3D; “a” + “b”; a &#x3D;&#x3D; b 吗？\"></a>11 String a &#x3D; “ab”; String b &#x3D; “a” + “b”; a &#x3D;&#x3D; b 吗？</h5><p>结果为<code>true</code>，因为&#x3D;&#x3D;比较的是对象的引用，因为a和b都是<strong>字面量</strong>组成的字符串，引用地址在编译的时候已经确定了，在编译时，会把字面量直接拼接在一起，所以二者都是引用同一个对象。</p>\n<p><strong>字面量</strong>：说简单点，字面量就是指有数字、字母等构成的字符串或数值，字面量只能以右值出现，即右值等于左边的值，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hollis&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"12-RPC接口返回中，使用基本类型还是包装类？\"><a href=\"#12-RPC接口返回中，使用基本类型还是包装类？\" class=\"headerlink\" title=\"12 RPC接口返回中，使用基本类型还是包装类？\"></a>12 RPC接口返回中，使用基本类型还是包装类？</h5><p>尽量使用包装类，因为基本数据类型在发生异常的时候可能会返回默认值，如<code>int</code> 默认返回0，而包装类则会返回<code>null</code>。</p>\n<h5 id=\"13-在开发过程中常见的语法糖？\"><a href=\"#13-在开发过程中常见的语法糖？\" class=\"headerlink\" title=\"13 在开发过程中常见的语法糖？\"></a>13 在开发过程中常见的语法糖？</h5><p>所谓语法糖就是方便开发人员使用，对语法进行简化；但在编译的时候会还原成最基础的语法，这个就是解语法糖。</p>\n<p>13.1 <strong><code>switch</code>支持使用<code>String</code>类</strong></p>\n<p><code>Java</code>中的<code>switch</code>原本就是支持基本类型，比如<code>int</code>、<code>char</code>等，对于<code>int</code>类型，会直接比较数值，对于<code>char</code>，则会比较ASCII码。对于编译器来说，</p>\n<p>任何类型的比较都要转成整型。如<code>short</code>、<code>char</code>（ASCII码是整型）、以及<code>int</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;hello&quot;</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;world&quot;</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际在编译器中的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span><span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\">String s;</span><br><span class=\"line\"><span class=\"keyword\">switch</span>((s=str).hashcode()) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">99162322</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s.equals(<span class=\"string\">&quot;hello”))</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tSystem.out.println(&quot;</span>hello<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">\t\tbreak;</span></span><br><span class=\"line\"><span class=\"string\">\tcase 113318802:</span></span><br><span class=\"line\"><span class=\"string\">\t\tif(s.equals(&quot;</span>world<span class=\"string\">&quot;))</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tSystem.out.println(&quot;</span>world<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">\t\tbreak;</span></span><br><span class=\"line\"><span class=\"string\">\tdefault:</span></span><br><span class=\"line\"><span class=\"string\">\t\tbreak;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串的<code>switch</code>是通过<code>equals()</code>和<code>hasdCode()</code>方法来实现的</p>\n<p>13.2 <strong>泛型</strong></p>\n<p>13.2.1 <strong>定义</strong>：泛型允许类、接口、和方法在定义的时候使用类型参数，这能使代码更加通用和类型安全。</p>\n<p><strong>类</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Box</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T item;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setItem</span><span class=\"params\">(T item)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.item = item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getItem</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，<code>Box</code> 类是一个泛型类，<code>T</code> 是一个类型参数，可以在创建 <code>Box</code> 对象时指定具体的类型。</p>\n<p><strong>接口</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceName</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在接口中使用类型参数T</span></span><br><span class=\"line\">    T <span class=\"title function_\">Method</span><span class=\"params\">(T param)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法</strong>：方法也可以是泛型的，即方法定义中可以有一个或多个类型参数。这使得方法能够处理不同类型的对象，而不需要定义多个重载方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(T[] array)</span> &#123; <span class=\"comment\">// 方法声明使用了泛型类型（如 T）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T element : array) &#123;</span><br><span class=\"line\">        System.out.println(element);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果去掉方法中的<code>&lt;T&gt;</code>，则编译器会报警：Cannot resolve symbol ‘T’，这意味着编译器不知道<code>T</code>是什么类型。</p>\n<p>13.2.2 <strong>泛型的边界</strong>：对泛型类型参数进行约束，比如要求类型参数必须是某个类的子类或实现某个接口。这可以通过使用 <code>extends</code> 关键字来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span>&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">printNumber</span><span class=\"params\">(T number)</span> &#123;</span><br><span class=\"line\">    System.out.println(number);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中，<code>T</code> 必须是 <code>Number</code> 的子类或 <code>Number</code> 本身。这样就限制了 <code>printNumber</code> 方法只能接受数字类型的参数</p>\n<p>13.2.3 <strong>通配符</strong>：</p>\n<p>在泛型中，通配符用于表示未知类型。常见的通配符有两种：</p>\n<ul>\n<li><strong>无界通配符（?）</strong>：可以接受任何类型。</li>\n<li><strong>有界通配符</strong>：<ul>\n<li>**<code>? extends T</code>**：表示可以接受 <code>T</code> 类型及其子类型。</li>\n<li>**<code>? super T</code>**：表示可以接受 <code>T</code> 类型及其父类型。</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processElements</span><span class=\"params\">(List&lt;? extends Number&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Number number : list) &#123;</span><br><span class=\"line\">        System.out.println(number);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中，<code>List&lt;? extends Number&gt;</code> 表示可以接受一个 <code>Number</code> 或 <code>Number</code> 的子类的列表。</p>\n<p>13.2.4 <strong>类型擦除</strong></p>\n<p>泛型在编译时被擦除，实际上运行时并不保留类型信息。例如，<code>List&lt;String&gt;</code> 在运行时就是 <code>List</code>。</p>\n<p>13.3 <strong>自动拆箱与装箱</strong></p>\n<p><strong>自动装箱</strong>：原始类型转换成对应的对象，如int变量转换成Integer对象。</p>\n<p><strong>自动拆箱</strong>：对应的对象转成成原始类型，Integer对象转换成int类型值。</p>\n<p>原始类型byte,short,char,int,long,float,double,boolean 对应的封装类为Byte,Short,Character,Integer,Long,Float,Double,Boolean。装箱过程是通过调用包装器的<code>valueOf</code>方法实现的，而拆箱过程则是调用包装器的<code>xxxValue</code>方法实现的，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;  <span class=\"comment\">// 自动装箱</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> i;       <span class=\"comment\">// 自动拆箱</span></span><br><span class=\"line\"><span class=\"comment\">//等效于</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> Integer.valueOf(<span class=\"number\">10</span>);  <span class=\"comment\">// 自动装箱</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> i.intValue();             <span class=\"comment\">// 自动拆箱</span></span><br></pre></td></tr></table></figure>\n\n<p>13.4 <strong>枚举</strong></p>\n<p>枚举是一种特殊的数据类型，用于表示有限的一组常量。当我们使用<code>enum</code>来定义一个枚举类型的时候，编译器会自动帮我们创建一个<code>final</code>类型的类继承<code>enum</code>类，所以枚举类型不能被继承。</p>\n<p>13.5 <strong>for-each</strong></p>\n<p>for-each的实现原理其实就是使用了普通的for循环和迭代器，迭代器示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 ArrayList 并添加一些元素</span></span><br><span class=\"line\">    ArrayList&lt;String&gt; fruits = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    fruits.add(<span class=\"string\">&quot;Apple&quot;</span>);</span><br><span class=\"line\">    fruits.add(<span class=\"string\">&quot;Banana&quot;</span>);</span><br><span class=\"line\">    fruits.add(<span class=\"string\">&quot;Cherry&quot;</span>);</span><br><span class=\"line\">    fruits.add(<span class=\"string\">&quot;Date&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取该 ArrayList 的迭代器</span></span><br><span class=\"line\">    Iterator&lt;String&gt; iterator = fruits.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用迭代器遍历集合</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (iterator.hasNext()) <span class=\"comment\">//检查集合是否存在下一元素</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fruit</span> <span class=\"operator\">=</span> iterator.next();<span class=\"comment\">//获取当前元素</span></span><br><span class=\"line\">        System.out.println(fruit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>迭代器的特点</strong></p>\n<ul>\n<li><strong>顺序访问</strong>：<code>Iterator</code> 提供了一种顺序访问集合元素的方式。</li>\n<li><strong>移除元素</strong>：<code>Iterator</code> 还提供了 <code>remove()</code> 方法，可以在遍历时移除当前元素，但需要注意，它只能在调用 <code>next()</code> 之后调用，且只能移除当前遍历的元素</li>\n</ul>\n<p>13.6 <strong>try-with-resource</strong></p>\n<p>基本语法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">ResourceType</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResourceType</span>()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用资源</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>ResourceType</strong>: 资源的类型，它必须实现 <code>AutoCloseable</code> 接口。</p>\n</li>\n<li><p><strong>resource</strong>: 声明并初始化要使用的资源。</p>\n</li>\n<li><p><strong>try 块</strong>: 在此块中使用资源，资源在此块结束时自动关闭。</p>\n</li>\n<li><p><strong>catch 块</strong>: 用于处理可能出现的异常。</p>\n</li>\n</ul>\n"},{"title":"四、Java基础-面试题40-46","date":"2024-08-27T14:32:50.000Z","_content":"**前言**：Java 中修饰符（访问控制符）\n\n| 修饰符          | 当前类 | 同包类 | 子类 | 其他包 |\n| --------------- | ------ | ------ | ---- | ------ |\n| `public`        | ✅      | ✅      | ✅    | ✅      |\n| `protected`     | ✅      | ✅      | ✅    | ❌      |\n| 无修饰符 (默认) | ✅      | ✅      | ❌    | ❌      |\n| `private`       | ✅      | ❌      | ❌    | ❌      |\n##### 40 为什么JDK 9中把String的char[]改成了byte[]？\n\n40.1 **内存占用减少**：`char[]` 数组中每个字符占用两个字节（16位），这是因为 `char` 类型在 Java 中是基于 UTF-16 编码的。而大多数字符串其实只需要一个字节（8位）就能表示一个字符（特别是英文、数字等）。通过将底层存储从 `char[]` 改为 `byte[]`，可以减少内存消耗。\n\n40.2 **提高性能**：通过减少内存占用，可以在一定程度上提高 CPU 缓存的利用率，从而提高字符串操作的性能。\n\n##### 41 Arrays.sort是使用什么排序算法实现的？\n\n快速排序\n\n##### 42 字符串常量是什么时候进入到字符串常量池的？\n\n**前言**：\n\n```\n+--------------------------------------+\n|              JVM                     |\n|  +--------------------------------+  |\n|  |       Method Area              |  |\n|  |  +--------------------------+  |  |\n|  |  |   Constant Pool          |  |  |\n|  |  +--------------------------+  |  |\n|  |                                |  |\n|  +--------------------------------+  |\n|                                      |\n|  +--------------------------------+  |\n|  |            Heap                |  |\n|  +--------------------------------+  |\n|                                      |\n|  +--------------------------------+  |\n|  |      Stack (per thread)        |  |\n|  |  +--------------------------+  |  |\n|  |  |     Stack Frames         |  |  |\n|  |  +--------------------------+  |  |\n|  +--------------------------------+  |\n+--------------------------------------+\n\n```\n\n**说明**：\n\n- **JVM (Java Virtual Machine)**: 整体虚拟机结构，包含以下各个区域。\n- **Method Area**: 存储已加载的类信息、常量、静态变量和JIT编译后的代码。\n- **Constant Pool (常量池)**: 是Method Area的一部分，存储编译期生成的各种字面量和符号引用。\n- **Heap (堆)**: 存储所有对象实例和数组，是被所有线程共享的一块内存区域。\n- **Stack (栈)**: 每个线程都有自己的栈，栈中包含多个栈帧（Stack Frames），每个栈帧对应一个方法的调用，保存方法的局部变量、操作数栈、方法返回地址等。\n\n**编译时示例**\n\n```java\nString s1 = \"hello\";\nString s2 = \"hello\";\n```\n\n在这个例子中，`\"hello\"` 字符串在**编译时**已经放入字符串常量池，`s1` 和 `s2` 变量都指向这个池中的同一个字符串对象。\n\n**运行时示例**\n\n```java\nString s1 = new String(\"hello\");\nString s2 = s1.intern();\nString s3 = \"hello\";\n\nSystem.out.println(s1 == s2); // false, 因为 s1 指向堆中的对象，而 s2 指向字符串池中的对象\nSystem.out.println(s2 == s3); // true, 因为 s2 和 s3 都指向字符串池中的 \"hello\"\n```\n\n`intern()` 方法的作用是：检查字符串常量池中是否已经包含了一个等于当前字符串的对象。在这个例子中，`s1` 是一个在堆中创建的字符串对象，`s2` 则是 `s1.intern()` 返回的引用，这个引用指向字符串常量池中的 `\"hello\"`。\n\n**总结**：\n\n- **编译时**：字符串字面量直接进入字符串常量池。\n- **运行时**：如果字符串池中已经存在一个等于该字符串的对象， `intern()` 方法会返回这个已存在的对象的引用，通过 `intern()` 方法可以将字符串加入字符串常量池（如果该字符串不在常量池中）。\n\n##### 43 Java中Timer实现定时调度的原理是什么？\n\n* `Timer` 的任务队列是优先队列，按照任务的执行时间优先级进行排序。\n\n* 后台线程会根据优先队列中任务的执行时间来决定何时执行任务，并在合适的时间点触发任务的执行。\n\n总结：`Timer` 的定时调度通过后台线程不断检查任务队列，并根据任务的执行时间安排任务的执行。可以使用 `Timer` 类来实现简单的定时调度任务，但要注意它的局限性（如单线程执行、异常处理等）。\n\n##### 44 final、finally、finalize有什么区别？\n\n**`final` 关键字**\n\n* **修饰类**：当一个类被声明为 `final`，它不能被继承。例如，`String` 类就是一个 `final` 类。\n\n* **修饰方法**：当一个方法被声明为 `final`，它不能被子类覆盖（override）。\n\n* **修饰变量**：当一个变量被声明为 `final`，它的值在初始化之后不能再被修改。对于基本数据类型，`final` 变量不可变；对于引用类型，`final` 使引用不可改变，但引用指向的对象内容是可以改变的。\n\n**`finally` 代码块**\n\n`finally` 是一个代码块，用于异常处理机制中。无论是否发生异常，`finally` 块中的代码都会被执行。它通常用于清理资源，如关闭文件、释放数据库连接等。\n\n**`finalize()` 方法**\n\n`finalize()`是一个方法，用于垃圾收集之前的清理操作，不推荐使用，并在Java 9 已被弃用。\n\n##### 44 为什么建议自定义一个无参构造函数？\n\n44.1 如果你定义了一个有参构造函数，那么Java编译器将不会自动创建无参构造函数，当你直接实例化该类，会造成编译错误，示例：\n\n```java\nclass MyClass {\n    private int value;\n\n    // 带参数的构造函数\n    public MyClass(int value) {\n        this.value = value;\n    }\n\n    // 如果没有显式定义无参构造函数\n    // MyClass obj = new MyClass(); // 这行代码会导致编译错误\n}\n```\n\n44.2 支持框架和库的使用(通常是用于反射或序列化)\n\n许多框架和库（例如 Hibernate、Spring）在反射或序列化过程中，需要通过无参构造函数来创建对象实例。如果类中没有无参构造函数，可能会导致这些框架或库的功能失效或抛出异常。\n\n**Hibernate**：通常需要无参构造函数来实例化实体类，因为它使用反射机制来创建对象。\n\n**Spring**：在使用依赖注入时，如果需要自动装配的类没有无参构造函数，可能会导致 Spring 无法实例化该类。\n\n##### 45 为什么不建议使用异常控制业务流程？\n\n1.**异常的语义** 2.**性能开销** 3.**代码可读性和维护性** 4. **业务逻辑的复杂性**\n\n##### 46 有了equals为啥需要hashCode方法？\n\n46.1 `equals()` 方法\n\n`equals()` 方法用于比较两个对象的内容是否相同。\n\n46.2 `hashCode()` 方法\n\n`hashCode()` 方法返回一个整数，称为对象的哈希码。\n\n46.3 `equals()` 和 `hashCode()` 的合同（约定）\n\nJava 中有一个非常重要的约定：**如果两个对象根据 `equals()` 方法比较是相等的，那么它们的 `hashCode()` 值必须相等**。但是，反过来不一定成立：如果两个对象的 `hashCode()` 值相等，它们并不一定根据 `equals()` 方法相等。\n\n示例代码：\n\n```java\npublic class HashCode {\n\n    public static void main(String[] args) {\n        HashSet<HashPerson> people = new HashSet<>();\n        people.add(new HashPerson(\"Alice\", 30));\n        people.add(new HashPerson(\"Alice\", 30)); // 应该与第一个对象相等\n\n        System.out.println(people.size()); // 如果没有重写 hashCode，可能会输出 2 而不是 1\n    }\n\n}\n\nclass HashPerson {\n    String name;\n    int age;\n\n    public HashPerson(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true; // 检查首先判断当前对象 this 和参数对象 o 是否是同一个对象（即引用相同）\n        if (o == null || getClass() != o.getClass()) return false; // 如果 o 为 null，或者 o 的类型与当前对象的类型不同（即它们不是同一个类的实例），则返回 false，表示它们不相等。\n        HashPerson person = (HashPerson) o; // 这里将对象 o 强制转换为 HashPerson 类型。因为前面的类型检查已经确保了 o 是 HashPerson 的实例，这种转换是安全的。\n        return age == person.age && Objects.equals(name, person.name);\n        // age == person.age 直接比较两个对象的 age 是否相等（基本类型 int 的比较）。\n        // Objects.equals(name, person.name) 比较两个 String 对象 name 是否相等，Objects.equals() 方法避免了 null 指针异常，如果 name 是 null，它会安全地返回 false。\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name, age); // Objects.hash() 是一个便捷方法，它接受可变数量的参数（这里是 name 和 age），并基于这些参数生成一个哈希码。\n    }\n}\n```\n\n","source":"_posts/Java基础-面试题40-46.md","raw":"---\ntitle: 四、Java基础-面试题40-46\ndate: 2024-08-27 22:32:50\ntags: Java\n---\n**前言**：Java 中修饰符（访问控制符）\n\n| 修饰符          | 当前类 | 同包类 | 子类 | 其他包 |\n| --------------- | ------ | ------ | ---- | ------ |\n| `public`        | ✅      | ✅      | ✅    | ✅      |\n| `protected`     | ✅      | ✅      | ✅    | ❌      |\n| 无修饰符 (默认) | ✅      | ✅      | ❌    | ❌      |\n| `private`       | ✅      | ❌      | ❌    | ❌      |\n##### 40 为什么JDK 9中把String的char[]改成了byte[]？\n\n40.1 **内存占用减少**：`char[]` 数组中每个字符占用两个字节（16位），这是因为 `char` 类型在 Java 中是基于 UTF-16 编码的。而大多数字符串其实只需要一个字节（8位）就能表示一个字符（特别是英文、数字等）。通过将底层存储从 `char[]` 改为 `byte[]`，可以减少内存消耗。\n\n40.2 **提高性能**：通过减少内存占用，可以在一定程度上提高 CPU 缓存的利用率，从而提高字符串操作的性能。\n\n##### 41 Arrays.sort是使用什么排序算法实现的？\n\n快速排序\n\n##### 42 字符串常量是什么时候进入到字符串常量池的？\n\n**前言**：\n\n```\n+--------------------------------------+\n|              JVM                     |\n|  +--------------------------------+  |\n|  |       Method Area              |  |\n|  |  +--------------------------+  |  |\n|  |  |   Constant Pool          |  |  |\n|  |  +--------------------------+  |  |\n|  |                                |  |\n|  +--------------------------------+  |\n|                                      |\n|  +--------------------------------+  |\n|  |            Heap                |  |\n|  +--------------------------------+  |\n|                                      |\n|  +--------------------------------+  |\n|  |      Stack (per thread)        |  |\n|  |  +--------------------------+  |  |\n|  |  |     Stack Frames         |  |  |\n|  |  +--------------------------+  |  |\n|  +--------------------------------+  |\n+--------------------------------------+\n\n```\n\n**说明**：\n\n- **JVM (Java Virtual Machine)**: 整体虚拟机结构，包含以下各个区域。\n- **Method Area**: 存储已加载的类信息、常量、静态变量和JIT编译后的代码。\n- **Constant Pool (常量池)**: 是Method Area的一部分，存储编译期生成的各种字面量和符号引用。\n- **Heap (堆)**: 存储所有对象实例和数组，是被所有线程共享的一块内存区域。\n- **Stack (栈)**: 每个线程都有自己的栈，栈中包含多个栈帧（Stack Frames），每个栈帧对应一个方法的调用，保存方法的局部变量、操作数栈、方法返回地址等。\n\n**编译时示例**\n\n```java\nString s1 = \"hello\";\nString s2 = \"hello\";\n```\n\n在这个例子中，`\"hello\"` 字符串在**编译时**已经放入字符串常量池，`s1` 和 `s2` 变量都指向这个池中的同一个字符串对象。\n\n**运行时示例**\n\n```java\nString s1 = new String(\"hello\");\nString s2 = s1.intern();\nString s3 = \"hello\";\n\nSystem.out.println(s1 == s2); // false, 因为 s1 指向堆中的对象，而 s2 指向字符串池中的对象\nSystem.out.println(s2 == s3); // true, 因为 s2 和 s3 都指向字符串池中的 \"hello\"\n```\n\n`intern()` 方法的作用是：检查字符串常量池中是否已经包含了一个等于当前字符串的对象。在这个例子中，`s1` 是一个在堆中创建的字符串对象，`s2` 则是 `s1.intern()` 返回的引用，这个引用指向字符串常量池中的 `\"hello\"`。\n\n**总结**：\n\n- **编译时**：字符串字面量直接进入字符串常量池。\n- **运行时**：如果字符串池中已经存在一个等于该字符串的对象， `intern()` 方法会返回这个已存在的对象的引用，通过 `intern()` 方法可以将字符串加入字符串常量池（如果该字符串不在常量池中）。\n\n##### 43 Java中Timer实现定时调度的原理是什么？\n\n* `Timer` 的任务队列是优先队列，按照任务的执行时间优先级进行排序。\n\n* 后台线程会根据优先队列中任务的执行时间来决定何时执行任务，并在合适的时间点触发任务的执行。\n\n总结：`Timer` 的定时调度通过后台线程不断检查任务队列，并根据任务的执行时间安排任务的执行。可以使用 `Timer` 类来实现简单的定时调度任务，但要注意它的局限性（如单线程执行、异常处理等）。\n\n##### 44 final、finally、finalize有什么区别？\n\n**`final` 关键字**\n\n* **修饰类**：当一个类被声明为 `final`，它不能被继承。例如，`String` 类就是一个 `final` 类。\n\n* **修饰方法**：当一个方法被声明为 `final`，它不能被子类覆盖（override）。\n\n* **修饰变量**：当一个变量被声明为 `final`，它的值在初始化之后不能再被修改。对于基本数据类型，`final` 变量不可变；对于引用类型，`final` 使引用不可改变，但引用指向的对象内容是可以改变的。\n\n**`finally` 代码块**\n\n`finally` 是一个代码块，用于异常处理机制中。无论是否发生异常，`finally` 块中的代码都会被执行。它通常用于清理资源，如关闭文件、释放数据库连接等。\n\n**`finalize()` 方法**\n\n`finalize()`是一个方法，用于垃圾收集之前的清理操作，不推荐使用，并在Java 9 已被弃用。\n\n##### 44 为什么建议自定义一个无参构造函数？\n\n44.1 如果你定义了一个有参构造函数，那么Java编译器将不会自动创建无参构造函数，当你直接实例化该类，会造成编译错误，示例：\n\n```java\nclass MyClass {\n    private int value;\n\n    // 带参数的构造函数\n    public MyClass(int value) {\n        this.value = value;\n    }\n\n    // 如果没有显式定义无参构造函数\n    // MyClass obj = new MyClass(); // 这行代码会导致编译错误\n}\n```\n\n44.2 支持框架和库的使用(通常是用于反射或序列化)\n\n许多框架和库（例如 Hibernate、Spring）在反射或序列化过程中，需要通过无参构造函数来创建对象实例。如果类中没有无参构造函数，可能会导致这些框架或库的功能失效或抛出异常。\n\n**Hibernate**：通常需要无参构造函数来实例化实体类，因为它使用反射机制来创建对象。\n\n**Spring**：在使用依赖注入时，如果需要自动装配的类没有无参构造函数，可能会导致 Spring 无法实例化该类。\n\n##### 45 为什么不建议使用异常控制业务流程？\n\n1.**异常的语义** 2.**性能开销** 3.**代码可读性和维护性** 4. **业务逻辑的复杂性**\n\n##### 46 有了equals为啥需要hashCode方法？\n\n46.1 `equals()` 方法\n\n`equals()` 方法用于比较两个对象的内容是否相同。\n\n46.2 `hashCode()` 方法\n\n`hashCode()` 方法返回一个整数，称为对象的哈希码。\n\n46.3 `equals()` 和 `hashCode()` 的合同（约定）\n\nJava 中有一个非常重要的约定：**如果两个对象根据 `equals()` 方法比较是相等的，那么它们的 `hashCode()` 值必须相等**。但是，反过来不一定成立：如果两个对象的 `hashCode()` 值相等，它们并不一定根据 `equals()` 方法相等。\n\n示例代码：\n\n```java\npublic class HashCode {\n\n    public static void main(String[] args) {\n        HashSet<HashPerson> people = new HashSet<>();\n        people.add(new HashPerson(\"Alice\", 30));\n        people.add(new HashPerson(\"Alice\", 30)); // 应该与第一个对象相等\n\n        System.out.println(people.size()); // 如果没有重写 hashCode，可能会输出 2 而不是 1\n    }\n\n}\n\nclass HashPerson {\n    String name;\n    int age;\n\n    public HashPerson(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true; // 检查首先判断当前对象 this 和参数对象 o 是否是同一个对象（即引用相同）\n        if (o == null || getClass() != o.getClass()) return false; // 如果 o 为 null，或者 o 的类型与当前对象的类型不同（即它们不是同一个类的实例），则返回 false，表示它们不相等。\n        HashPerson person = (HashPerson) o; // 这里将对象 o 强制转换为 HashPerson 类型。因为前面的类型检查已经确保了 o 是 HashPerson 的实例，这种转换是安全的。\n        return age == person.age && Objects.equals(name, person.name);\n        // age == person.age 直接比较两个对象的 age 是否相等（基本类型 int 的比较）。\n        // Objects.equals(name, person.name) 比较两个 String 对象 name 是否相等，Objects.equals() 方法避免了 null 指针异常，如果 name 是 null，它会安全地返回 false。\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name, age); // Objects.hash() 是一个便捷方法，它接受可变数量的参数（这里是 name 和 age），并基于这些参数生成一个哈希码。\n    }\n}\n```\n\n","slug":"Java基础-面试题40-46","published":1,"updated":"2024-08-26T12:51:59.216Z","_id":"cm0azws7w0004z8u45mekdsh7","comments":1,"layout":"post","photos":[],"content":"<p><strong>前言</strong>：Java 中修饰符（访问控制符）</p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>当前类</th>\n<th>同包类</th>\n<th>子类</th>\n<th>其他包</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>public</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>无修饰符 (默认)</td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>✅</td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody></table>\n<h5 id=\"40-为什么JDK-9中把String的char-改成了byte-？\"><a href=\"#40-为什么JDK-9中把String的char-改成了byte-？\" class=\"headerlink\" title=\"40 为什么JDK 9中把String的char[]改成了byte[]？\"></a>40 为什么JDK 9中把String的char[]改成了byte[]？</h5><p>40.1 <strong>内存占用减少</strong>：<code>char[]</code> 数组中每个字符占用两个字节（16位），这是因为 <code>char</code> 类型在 Java 中是基于 UTF-16 编码的。而大多数字符串其实只需要一个字节（8位）就能表示一个字符（特别是英文、数字等）。通过将底层存储从 <code>char[]</code> 改为 <code>byte[]</code>，可以减少内存消耗。</p>\n<p>40.2 <strong>提高性能</strong>：通过减少内存占用，可以在一定程度上提高 CPU 缓存的利用率，从而提高字符串操作的性能。</p>\n<h5 id=\"41-Arrays-sort是使用什么排序算法实现的？\"><a href=\"#41-Arrays-sort是使用什么排序算法实现的？\" class=\"headerlink\" title=\"41 Arrays.sort是使用什么排序算法实现的？\"></a>41 Arrays.sort是使用什么排序算法实现的？</h5><p>快速排序</p>\n<h5 id=\"42-字符串常量是什么时候进入到字符串常量池的？\"><a href=\"#42-字符串常量是什么时候进入到字符串常量池的？\" class=\"headerlink\" title=\"42 字符串常量是什么时候进入到字符串常量池的？\"></a>42 字符串常量是什么时候进入到字符串常量池的？</h5><p><strong>前言</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------------------------------------+</span><br><span class=\"line\">|              JVM                     |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">|  |       Method Area              |  |</span><br><span class=\"line\">|  |  +--------------------------+  |  |</span><br><span class=\"line\">|  |  |   Constant Pool          |  |  |</span><br><span class=\"line\">|  |  +--------------------------+  |  |</span><br><span class=\"line\">|  |                                |  |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">|                                      |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">|  |            Heap                |  |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">|                                      |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">|  |      Stack (per thread)        |  |</span><br><span class=\"line\">|  |  +--------------------------+  |  |</span><br><span class=\"line\">|  |  |     Stack Frames         |  |  |</span><br><span class=\"line\">|  |  +--------------------------+  |  |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">+--------------------------------------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong>：</p>\n<ul>\n<li><strong>JVM (Java Virtual Machine)</strong>: 整体虚拟机结构，包含以下各个区域。</li>\n<li><strong>Method Area</strong>: 存储已加载的类信息、常量、静态变量和JIT编译后的代码。</li>\n<li><strong>Constant Pool (常量池)</strong>: 是Method Area的一部分，存储编译期生成的各种字面量和符号引用。</li>\n<li><strong>Heap (堆)</strong>: 存储所有对象实例和数组，是被所有线程共享的一块内存区域。</li>\n<li><strong>Stack (栈)</strong>: 每个线程都有自己的栈，栈中包含多个栈帧（Stack Frames），每个栈帧对应一个方法的调用，保存方法的局部变量、操作数栈、方法返回地址等。</li>\n</ul>\n<p><strong>编译时示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>&quot;hello&quot;</code> 字符串在<strong>编译时</strong>已经放入字符串常量池，<code>s1</code> 和 <code>s2</code> 变量都指向这个池中的同一个字符串对象。</p>\n<p><strong>运行时示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> s1.intern();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(s1 == s2); <span class=\"comment\">// false, 因为 s1 指向堆中的对象，而 s2 指向字符串池中的对象</span></span><br><span class=\"line\">System.out.println(s2 == s3); <span class=\"comment\">// true, 因为 s2 和 s3 都指向字符串池中的 &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>intern()</code> 方法的作用是：检查字符串常量池中是否已经包含了一个等于当前字符串的对象。在这个例子中，<code>s1</code> 是一个在堆中创建的字符串对象，<code>s2</code> 则是 <code>s1.intern()</code> 返回的引用，这个引用指向字符串常量池中的 <code>&quot;hello&quot;</code>。</p>\n<p><strong>总结</strong>：</p>\n<ul>\n<li><strong>编译时</strong>：字符串字面量直接进入字符串常量池。</li>\n<li><strong>运行时</strong>：如果字符串池中已经存在一个等于该字符串的对象， <code>intern()</code> 方法会返回这个已存在的对象的引用，通过 <code>intern()</code> 方法可以将字符串加入字符串常量池（如果该字符串不在常量池中）。</li>\n</ul>\n<h5 id=\"43-Java中Timer实现定时调度的原理是什么？\"><a href=\"#43-Java中Timer实现定时调度的原理是什么？\" class=\"headerlink\" title=\"43 Java中Timer实现定时调度的原理是什么？\"></a>43 Java中Timer实现定时调度的原理是什么？</h5><ul>\n<li><p><code>Timer</code> 的任务队列是优先队列，按照任务的执行时间优先级进行排序。</p>\n</li>\n<li><p>后台线程会根据优先队列中任务的执行时间来决定何时执行任务，并在合适的时间点触发任务的执行。</p>\n</li>\n</ul>\n<p>总结：<code>Timer</code> 的定时调度通过后台线程不断检查任务队列，并根据任务的执行时间安排任务的执行。可以使用 <code>Timer</code> 类来实现简单的定时调度任务，但要注意它的局限性（如单线程执行、异常处理等）。</p>\n<h5 id=\"44-final、finally、finalize有什么区别？\"><a href=\"#44-final、finally、finalize有什么区别？\" class=\"headerlink\" title=\"44 final、finally、finalize有什么区别？\"></a>44 final、finally、finalize有什么区别？</h5><p><strong><code>final</code> 关键字</strong></p>\n<ul>\n<li><p><strong>修饰类</strong>：当一个类被声明为 <code>final</code>，它不能被继承。例如，<code>String</code> 类就是一个 <code>final</code> 类。</p>\n</li>\n<li><p><strong>修饰方法</strong>：当一个方法被声明为 <code>final</code>，它不能被子类覆盖（override）。</p>\n</li>\n<li><p><strong>修饰变量</strong>：当一个变量被声明为 <code>final</code>，它的值在初始化之后不能再被修改。对于基本数据类型，<code>final</code> 变量不可变；对于引用类型，<code>final</code> 使引用不可改变，但引用指向的对象内容是可以改变的。</p>\n</li>\n</ul>\n<p><strong><code>finally</code> 代码块</strong></p>\n<p><code>finally</code> 是一个代码块，用于异常处理机制中。无论是否发生异常，<code>finally</code> 块中的代码都会被执行。它通常用于清理资源，如关闭文件、释放数据库连接等。</p>\n<p><strong><code>finalize()</code> 方法</strong></p>\n<p><code>finalize()</code>是一个方法，用于垃圾收集之前的清理操作，不推荐使用，并在Java 9 已被弃用。</p>\n<h5 id=\"44-为什么建议自定义一个无参构造函数？\"><a href=\"#44-为什么建议自定义一个无参构造函数？\" class=\"headerlink\" title=\"44 为什么建议自定义一个无参构造函数？\"></a>44 为什么建议自定义一个无参构造函数？</h5><p>44.1 如果你定义了一个有参构造函数，那么Java编译器将不会自动创建无参构造函数，当你直接实例化该类，会造成编译错误，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 带参数的构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有显式定义无参构造函数</span></span><br><span class=\"line\">    <span class=\"comment\">// MyClass obj = new MyClass(); // 这行代码会导致编译错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>44.2 支持框架和库的使用(通常是用于反射或序列化)</p>\n<p>许多框架和库（例如 Hibernate、Spring）在反射或序列化过程中，需要通过无参构造函数来创建对象实例。如果类中没有无参构造函数，可能会导致这些框架或库的功能失效或抛出异常。</p>\n<p><strong>Hibernate</strong>：通常需要无参构造函数来实例化实体类，因为它使用反射机制来创建对象。</p>\n<p><strong>Spring</strong>：在使用依赖注入时，如果需要自动装配的类没有无参构造函数，可能会导致 Spring 无法实例化该类。</p>\n<h5 id=\"45-为什么不建议使用异常控制业务流程？\"><a href=\"#45-为什么不建议使用异常控制业务流程？\" class=\"headerlink\" title=\"45 为什么不建议使用异常控制业务流程？\"></a>45 为什么不建议使用异常控制业务流程？</h5><p>1.<strong>异常的语义</strong> 2.<strong>性能开销</strong> 3.<strong>代码可读性和维护性</strong> 4. <strong>业务逻辑的复杂性</strong></p>\n<h5 id=\"46-有了equals为啥需要hashCode方法？\"><a href=\"#46-有了equals为啥需要hashCode方法？\" class=\"headerlink\" title=\"46 有了equals为啥需要hashCode方法？\"></a>46 有了equals为啥需要hashCode方法？</h5><p>46.1 <code>equals()</code> 方法</p>\n<p><code>equals()</code> 方法用于比较两个对象的内容是否相同。</p>\n<p>46.2 <code>hashCode()</code> 方法</p>\n<p><code>hashCode()</code> 方法返回一个整数，称为对象的哈希码。</p>\n<p>46.3 <code>equals()</code> 和 <code>hashCode()</code> 的合同（约定）</p>\n<p>Java 中有一个非常重要的约定：<strong>如果两个对象根据 <code>equals()</code> 方法比较是相等的，那么它们的 <code>hashCode()</code> 值必须相等</strong>。但是，反过来不一定成立：如果两个对象的 <code>hashCode()</code> 值相等，它们并不一定根据 <code>equals()</code> 方法相等。</p>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HashCode</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HashSet&lt;HashPerson&gt; people = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        people.add(<span class=\"keyword\">new</span> <span class=\"title class_\">HashPerson</span>(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\">        people.add(<span class=\"keyword\">new</span> <span class=\"title class_\">HashPerson</span>(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"number\">30</span>)); <span class=\"comment\">// 应该与第一个对象相等</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(people.size()); <span class=\"comment\">// 如果没有重写 hashCode，可能会输出 2 而不是 1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HashPerson</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HashPerson</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == o) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 检查首先判断当前对象 this 和参数对象 o 是否是同一个对象（即引用相同）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"literal\">null</span> || getClass() != o.getClass()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 如果 o 为 null，或者 o 的类型与当前对象的类型不同（即它们不是同一个类的实例），则返回 false，表示它们不相等。</span></span><br><span class=\"line\">        <span class=\"type\">HashPerson</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> (HashPerson) o; <span class=\"comment\">// 这里将对象 o 强制转换为 HashPerson 类型。因为前面的类型检查已经确保了 o 是 HashPerson 的实例，这种转换是安全的。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);</span><br><span class=\"line\">        <span class=\"comment\">// age == person.age 直接比较两个对象的 age 是否相等（基本类型 int 的比较）。</span></span><br><span class=\"line\">        <span class=\"comment\">// Objects.equals(name, person.name) 比较两个 String 对象 name 是否相等，Objects.equals() 方法避免了 null 指针异常，如果 name 是 null，它会安全地返回 false。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.hash(name, age); <span class=\"comment\">// Objects.hash() 是一个便捷方法，它接受可变数量的参数（这里是 name 和 age），并基于这些参数生成一个哈希码。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>前言</strong>：Java 中修饰符（访问控制符）</p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>当前类</th>\n<th>同包类</th>\n<th>子类</th>\n<th>其他包</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>public</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>无修饰符 (默认)</td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>✅</td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody></table>\n<h5 id=\"40-为什么JDK-9中把String的char-改成了byte-？\"><a href=\"#40-为什么JDK-9中把String的char-改成了byte-？\" class=\"headerlink\" title=\"40 为什么JDK 9中把String的char[]改成了byte[]？\"></a>40 为什么JDK 9中把String的char[]改成了byte[]？</h5><p>40.1 <strong>内存占用减少</strong>：<code>char[]</code> 数组中每个字符占用两个字节（16位），这是因为 <code>char</code> 类型在 Java 中是基于 UTF-16 编码的。而大多数字符串其实只需要一个字节（8位）就能表示一个字符（特别是英文、数字等）。通过将底层存储从 <code>char[]</code> 改为 <code>byte[]</code>，可以减少内存消耗。</p>\n<p>40.2 <strong>提高性能</strong>：通过减少内存占用，可以在一定程度上提高 CPU 缓存的利用率，从而提高字符串操作的性能。</p>\n<h5 id=\"41-Arrays-sort是使用什么排序算法实现的？\"><a href=\"#41-Arrays-sort是使用什么排序算法实现的？\" class=\"headerlink\" title=\"41 Arrays.sort是使用什么排序算法实现的？\"></a>41 Arrays.sort是使用什么排序算法实现的？</h5><p>快速排序</p>\n<h5 id=\"42-字符串常量是什么时候进入到字符串常量池的？\"><a href=\"#42-字符串常量是什么时候进入到字符串常量池的？\" class=\"headerlink\" title=\"42 字符串常量是什么时候进入到字符串常量池的？\"></a>42 字符串常量是什么时候进入到字符串常量池的？</h5><p><strong>前言</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------------------------------------+</span><br><span class=\"line\">|              JVM                     |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">|  |       Method Area              |  |</span><br><span class=\"line\">|  |  +--------------------------+  |  |</span><br><span class=\"line\">|  |  |   Constant Pool          |  |  |</span><br><span class=\"line\">|  |  +--------------------------+  |  |</span><br><span class=\"line\">|  |                                |  |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">|                                      |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">|  |            Heap                |  |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">|                                      |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">|  |      Stack (per thread)        |  |</span><br><span class=\"line\">|  |  +--------------------------+  |  |</span><br><span class=\"line\">|  |  |     Stack Frames         |  |  |</span><br><span class=\"line\">|  |  +--------------------------+  |  |</span><br><span class=\"line\">|  +--------------------------------+  |</span><br><span class=\"line\">+--------------------------------------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong>：</p>\n<ul>\n<li><strong>JVM (Java Virtual Machine)</strong>: 整体虚拟机结构，包含以下各个区域。</li>\n<li><strong>Method Area</strong>: 存储已加载的类信息、常量、静态变量和JIT编译后的代码。</li>\n<li><strong>Constant Pool (常量池)</strong>: 是Method Area的一部分，存储编译期生成的各种字面量和符号引用。</li>\n<li><strong>Heap (堆)</strong>: 存储所有对象实例和数组，是被所有线程共享的一块内存区域。</li>\n<li><strong>Stack (栈)</strong>: 每个线程都有自己的栈，栈中包含多个栈帧（Stack Frames），每个栈帧对应一个方法的调用，保存方法的局部变量、操作数栈、方法返回地址等。</li>\n</ul>\n<p><strong>编译时示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>&quot;hello&quot;</code> 字符串在<strong>编译时</strong>已经放入字符串常量池，<code>s1</code> 和 <code>s2</code> 变量都指向这个池中的同一个字符串对象。</p>\n<p><strong>运行时示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> s1.intern();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(s1 == s2); <span class=\"comment\">// false, 因为 s1 指向堆中的对象，而 s2 指向字符串池中的对象</span></span><br><span class=\"line\">System.out.println(s2 == s3); <span class=\"comment\">// true, 因为 s2 和 s3 都指向字符串池中的 &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>intern()</code> 方法的作用是：检查字符串常量池中是否已经包含了一个等于当前字符串的对象。在这个例子中，<code>s1</code> 是一个在堆中创建的字符串对象，<code>s2</code> 则是 <code>s1.intern()</code> 返回的引用，这个引用指向字符串常量池中的 <code>&quot;hello&quot;</code>。</p>\n<p><strong>总结</strong>：</p>\n<ul>\n<li><strong>编译时</strong>：字符串字面量直接进入字符串常量池。</li>\n<li><strong>运行时</strong>：如果字符串池中已经存在一个等于该字符串的对象， <code>intern()</code> 方法会返回这个已存在的对象的引用，通过 <code>intern()</code> 方法可以将字符串加入字符串常量池（如果该字符串不在常量池中）。</li>\n</ul>\n<h5 id=\"43-Java中Timer实现定时调度的原理是什么？\"><a href=\"#43-Java中Timer实现定时调度的原理是什么？\" class=\"headerlink\" title=\"43 Java中Timer实现定时调度的原理是什么？\"></a>43 Java中Timer实现定时调度的原理是什么？</h5><ul>\n<li><p><code>Timer</code> 的任务队列是优先队列，按照任务的执行时间优先级进行排序。</p>\n</li>\n<li><p>后台线程会根据优先队列中任务的执行时间来决定何时执行任务，并在合适的时间点触发任务的执行。</p>\n</li>\n</ul>\n<p>总结：<code>Timer</code> 的定时调度通过后台线程不断检查任务队列，并根据任务的执行时间安排任务的执行。可以使用 <code>Timer</code> 类来实现简单的定时调度任务，但要注意它的局限性（如单线程执行、异常处理等）。</p>\n<h5 id=\"44-final、finally、finalize有什么区别？\"><a href=\"#44-final、finally、finalize有什么区别？\" class=\"headerlink\" title=\"44 final、finally、finalize有什么区别？\"></a>44 final、finally、finalize有什么区别？</h5><p><strong><code>final</code> 关键字</strong></p>\n<ul>\n<li><p><strong>修饰类</strong>：当一个类被声明为 <code>final</code>，它不能被继承。例如，<code>String</code> 类就是一个 <code>final</code> 类。</p>\n</li>\n<li><p><strong>修饰方法</strong>：当一个方法被声明为 <code>final</code>，它不能被子类覆盖（override）。</p>\n</li>\n<li><p><strong>修饰变量</strong>：当一个变量被声明为 <code>final</code>，它的值在初始化之后不能再被修改。对于基本数据类型，<code>final</code> 变量不可变；对于引用类型，<code>final</code> 使引用不可改变，但引用指向的对象内容是可以改变的。</p>\n</li>\n</ul>\n<p><strong><code>finally</code> 代码块</strong></p>\n<p><code>finally</code> 是一个代码块，用于异常处理机制中。无论是否发生异常，<code>finally</code> 块中的代码都会被执行。它通常用于清理资源，如关闭文件、释放数据库连接等。</p>\n<p><strong><code>finalize()</code> 方法</strong></p>\n<p><code>finalize()</code>是一个方法，用于垃圾收集之前的清理操作，不推荐使用，并在Java 9 已被弃用。</p>\n<h5 id=\"44-为什么建议自定义一个无参构造函数？\"><a href=\"#44-为什么建议自定义一个无参构造函数？\" class=\"headerlink\" title=\"44 为什么建议自定义一个无参构造函数？\"></a>44 为什么建议自定义一个无参构造函数？</h5><p>44.1 如果你定义了一个有参构造函数，那么Java编译器将不会自动创建无参构造函数，当你直接实例化该类，会造成编译错误，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 带参数的构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有显式定义无参构造函数</span></span><br><span class=\"line\">    <span class=\"comment\">// MyClass obj = new MyClass(); // 这行代码会导致编译错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>44.2 支持框架和库的使用(通常是用于反射或序列化)</p>\n<p>许多框架和库（例如 Hibernate、Spring）在反射或序列化过程中，需要通过无参构造函数来创建对象实例。如果类中没有无参构造函数，可能会导致这些框架或库的功能失效或抛出异常。</p>\n<p><strong>Hibernate</strong>：通常需要无参构造函数来实例化实体类，因为它使用反射机制来创建对象。</p>\n<p><strong>Spring</strong>：在使用依赖注入时，如果需要自动装配的类没有无参构造函数，可能会导致 Spring 无法实例化该类。</p>\n<h5 id=\"45-为什么不建议使用异常控制业务流程？\"><a href=\"#45-为什么不建议使用异常控制业务流程？\" class=\"headerlink\" title=\"45 为什么不建议使用异常控制业务流程？\"></a>45 为什么不建议使用异常控制业务流程？</h5><p>1.<strong>异常的语义</strong> 2.<strong>性能开销</strong> 3.<strong>代码可读性和维护性</strong> 4. <strong>业务逻辑的复杂性</strong></p>\n<h5 id=\"46-有了equals为啥需要hashCode方法？\"><a href=\"#46-有了equals为啥需要hashCode方法？\" class=\"headerlink\" title=\"46 有了equals为啥需要hashCode方法？\"></a>46 有了equals为啥需要hashCode方法？</h5><p>46.1 <code>equals()</code> 方法</p>\n<p><code>equals()</code> 方法用于比较两个对象的内容是否相同。</p>\n<p>46.2 <code>hashCode()</code> 方法</p>\n<p><code>hashCode()</code> 方法返回一个整数，称为对象的哈希码。</p>\n<p>46.3 <code>equals()</code> 和 <code>hashCode()</code> 的合同（约定）</p>\n<p>Java 中有一个非常重要的约定：<strong>如果两个对象根据 <code>equals()</code> 方法比较是相等的，那么它们的 <code>hashCode()</code> 值必须相等</strong>。但是，反过来不一定成立：如果两个对象的 <code>hashCode()</code> 值相等，它们并不一定根据 <code>equals()</code> 方法相等。</p>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HashCode</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HashSet&lt;HashPerson&gt; people = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        people.add(<span class=\"keyword\">new</span> <span class=\"title class_\">HashPerson</span>(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\">        people.add(<span class=\"keyword\">new</span> <span class=\"title class_\">HashPerson</span>(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"number\">30</span>)); <span class=\"comment\">// 应该与第一个对象相等</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(people.size()); <span class=\"comment\">// 如果没有重写 hashCode，可能会输出 2 而不是 1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HashPerson</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HashPerson</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == o) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 检查首先判断当前对象 this 和参数对象 o 是否是同一个对象（即引用相同）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"literal\">null</span> || getClass() != o.getClass()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 如果 o 为 null，或者 o 的类型与当前对象的类型不同（即它们不是同一个类的实例），则返回 false，表示它们不相等。</span></span><br><span class=\"line\">        <span class=\"type\">HashPerson</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> (HashPerson) o; <span class=\"comment\">// 这里将对象 o 强制转换为 HashPerson 类型。因为前面的类型检查已经确保了 o 是 HashPerson 的实例，这种转换是安全的。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);</span><br><span class=\"line\">        <span class=\"comment\">// age == person.age 直接比较两个对象的 age 是否相等（基本类型 int 的比较）。</span></span><br><span class=\"line\">        <span class=\"comment\">// Objects.equals(name, person.name) 比较两个 String 对象 name 是否相等，Objects.equals() 方法避免了 null 指针异常，如果 name 是 null，它会安全地返回 false。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.hash(name, age); <span class=\"comment\">// Objects.hash() 是一个便捷方法，它接受可变数量的参数（这里是 name 和 age），并基于这些参数生成一个哈希码。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clx19s52m0003iotl9q5408l6","tag_id":"clyfsybl30000pcu451umb1fv","_id":"clyfsybl80002pcu48zvbaszw"},{"post_id":"clrm844iy000010tl9xu0c4a6","tag_id":"clyfsybl30000pcu451umb1fv","_id":"clyfsybl80003pcu41zzva2ws"},{"post_id":"clx19s52l0002iotlbaoi3yec","tag_id":"clyfsybl30000pcu451umb1fv","_id":"clyfsybl90005pcu4fobl3fvi"},{"post_id":"clx19s52i0001iotlgejk5hwk","tag_id":"clyfsybl30000pcu451umb1fv","_id":"clyfsybla0006pcu42e0mckgo"},{"post_id":"clx19s5280000iotlazeca229","tag_id":"clyfsybl30000pcu451umb1fv","_id":"clyfsybla0008pcu40afddm38"},{"post_id":"clx19s52n0004iotl8bnafz91","tag_id":"clyfsybla0007pcu4ftk9f552","_id":"clyfsyblb000apcu4bq1d5leh"},{"post_id":"clrm844j1000110tlfro33mdo","tag_id":"clyfsybla0007pcu4ftk9f552","_id":"clyfsyblc000bpcu44hgt89je"},{"post_id":"clx19s52o0005iotl1t143b39","tag_id":"clyfsybla0007pcu4ftk9f552","_id":"clyfsyblc000dpcu44zf0djln"},{"post_id":"clxbmxg740001lotlh18s04yp","tag_id":"clyfsyblb0009pcu4bzlf0nx2","_id":"clyfsyblc000epcu4ej8udpjr"},{"post_id":"clxbmxg700000lotl5k8e5oah","tag_id":"clyfsyblb0009pcu4bzlf0nx2","_id":"clyfsyblc000gpcu4bv98aa12"},{"post_id":"clxbmxg770002lotl81dffcfq","tag_id":"clyfsyblb0009pcu4bzlf0nx2","_id":"clyfsyblc000hpcu4hbihfhj5"},{"post_id":"clyfygjj70000jcu41n8h9ogi","tag_id":"clyfyk8l300007wu4bpgt0d9z","_id":"clyfyk8l600017wu428sdf7rc"},{"post_id":"clyg04c7j0000wku41bb26vei","tag_id":"clyfyk8l300007wu4bpgt0d9z","_id":"clyg04c7l0001wku48seu4dja"},{"post_id":"clz2vkaxk0000scu4ej9dgr1a","tag_id":"clz2vkaxm0002scu49j6rf76r","_id":"clz2vkaxq0005scu43r0304j0"},{"post_id":"clz2vkaxl0001scu43d00c2jl","tag_id":"clz2vkaxm0002scu49j6rf76r","_id":"clz2vkaxr0007scu4clez8o85"},{"post_id":"clz2vkaxn0003scu4djcd25vr","tag_id":"clz2vkaxm0002scu49j6rf76r","_id":"clz2vkaxs0008scu4ed4pbzsq"},{"post_id":"clz9yzmnp0002pwu47dn8e3um","tag_id":"clz2vkaxm0002scu49j6rf76r","_id":"clz9yzmns0004pwu43cf813b3"},{"post_id":"clz9yzmno0001pwu4441m9cwe","tag_id":"clz9yzmnq0003pwu47wi0g08t","_id":"clz9yzmnt0005pwu4fxwu04yc"},{"post_id":"clz9yzmnl0000pwu40g2296gs","tag_id":"clz2vkaxm0002scu49j6rf76r","_id":"clz9zdrk90000k8u46bm3besn"},{"post_id":"cm0azws7w0004z8u45mekdsh7","tag_id":"cm0azws7t0002z8u41yojahg5","_id":"cm0azws7y0006z8u44zncelqt"},{"post_id":"cm0azws7q0000z8u44xpy6sd6","tag_id":"cm0azws7t0002z8u41yojahg5","_id":"cm0azws7y0007z8u4g56p6lub"},{"post_id":"cm0azws7s0001z8u42a4n98x7","tag_id":"cm0azws7t0002z8u41yojahg5","_id":"cm0azws7y0009z8u41mklhknj"},{"post_id":"cm0azws7w0003z8u4hzupbkjp","tag_id":"cm0azws7t0002z8u41yojahg5","_id":"cm0azws7z000az8u48a9iddyg"}],"Tag":[{"name":"docker","_id":"clyfsybl30000pcu451umb1fv"},{"name":"nginx","_id":"clyfsybla0007pcu4ftk9f552"},{"name":"ubuntu","_id":"clyfsyblb0009pcu4bzlf0nx2"},{"name":"css","_id":"clyfyk8l300007wu4bpgt0d9z"},{"name":"mybatisplus","_id":"clz2vkaxm0002scu49j6rf76r"},{"name":"mysql","_id":"clz9yzmnq0003pwu47wi0g08t"},{"name":"Java","_id":"cm0azws7t0002z8u41yojahg5"}]}}