{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1704989750716},{"_id":"source/_posts/test.md","hash":"9aa02cd6d9dd67e113bedc99d2c41f25d281d7ee","modified":1704989750717},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1704989745821},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1704989745823},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"fa2af55d8c61c53a364f4ea5fee417f35a173957","modified":1704989745822},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"6897a617c9fa46519ee265c0e69cf0d203318a43","modified":1704989745822},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"630df8733137bdf4f897e2bfa723ee9fb6adf38a","modified":1704989745873},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1704989745823},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1704989745825},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1704989745826},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1704989745826},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1704989745827},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1704989745829},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1704989745828},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1704989745829},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1704989745831},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1704989745830},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"d22ec72d00567db3782661ab5ccdb2475469da4c","modified":1704989745831},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"7f09aa0520688e2de50cb5b6631998682f9200f5","modified":1704989745833},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1704989745832},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1704989745833},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1704989745834},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1704989745835},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1704989745835},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1704989745838},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"088c2507d8f221416f99cf72d73641ba476a0f00","modified":1704989745837},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1704989745836},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1704989745837},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1704989745839},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1704989745840},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1704989745840},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1704989745841},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1704989745842},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1704989745842},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1704989745843},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"e41d1e0e3a9e15c30b7142491bed39dc50371e96","modified":1704989745845},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"424f6e94ced575b51bb7dcebdc0f25d4f4c99fe2","modified":1704989745844},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1704989745866},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"113012153240fa62a2dffc85b1dd6a476609670a","modified":1704989745875},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1704989745867},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1704989745845},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1704989745867},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1704989745870},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"99ad49cb7ee932c62ab0ef3a4de71f7e7e8c6bed","modified":1704989745868},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"ee1ac7ba2b46b7e59d46b20a42f0b590efd50359","modified":1704989745847},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1704989745871},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1704989745872},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1704989745848},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e1854416d49a56048a81ee9c08db69fb07698916","modified":1704989745849},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"403e107162a13bd8db2fc97f2f85df5b235f9308","modified":1704989745850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"d3f1ba491f5dc75f5fd657392293d52f8438ea1e","modified":1704989745849},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"165008f72ed77f0da879d132563d763369d26472","modified":1704989745851},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"57db292850074c1cfc779c6e9ebbc16a5eb6ab5a","modified":1704989745853},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"9fc18f1fd5bec16f8a3d30b0ce38458485c398b3","modified":1704989745852},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"892a5b524a508f395f6d72cb6721f0a3db14d4d7","modified":1704989745853},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1704989745855},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1704989745861},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1704989745862},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1704989745862},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1704989745877},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"98c85af1103af18b02c4f5f207fdfc48e207d794","modified":1704989745863},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"a4b3530798b0a7a23d31fb0b86b530fcc2fce87a","modified":1704989745891},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1704989745865},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1704989745863},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"15535c222f5a689c255c77722d2334bb1ac97a7e","modified":1704989745897},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"0b5bd5ce6783a733607a62c5273486d8893571c6","modified":1704989745902},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1704989745898},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1704989745856},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1704989745858},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"e78bda05fcf57b0e5e3a20cf3505d37fd69aaf46","modified":1704989745856},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1704989745857},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"fd5d3187f4e3d45f8af08f93b263fca7ed666c75","modified":1704989745860},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"ae76862ec15f0bc6e52ddce986305991ebff5b18","modified":1704989745879},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1704989745878},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1704989745880},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1704989745859},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1704989745881},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"04838b4b2ca4788700c48449e5fb6790d18c0f2e","modified":1704989745883},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"403c39c7bb1caa1f3b142207b59aa0567f898a31","modified":1704989745882},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1704989745889},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1704989745883},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1704989745885},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1704989745890},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1704989745888},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1704989745887},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"edf8a6a066f201b1ffad32c585bd79c9982d4433","modified":1704989745901},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1704989745899},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1704989745895},{"_id":"public/2024/01/12/hello-world/index.html","hash":"5c81ccca889a40f2eb982a092bc8628a640e4c17","modified":1720613666792},{"_id":"public/2024/01/11/test/index.html","hash":"09eb2783fa654456ec2d21fbd3af117ad891a538","modified":1720613666792},{"_id":"public/archives/index.html","hash":"24e334d379eb9f72d5d1eaeb915e5ec616f293ce","modified":1720613666792},{"_id":"public/archives/2024/index.html","hash":"55b35a7e65b1793e5c2d864ca58f649c59124078","modified":1720613666792},{"_id":"public/archives/2024/01/index.html","hash":"074e2807135f983b51c9a0079b79cd7d18e8f89d","modified":1720613666792},{"_id":"public/index.html","hash":"d7e6a5bab66aae54c4a706c55e39804fce8ed07b","modified":1720613666792},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1704991328191},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1704991328191},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1704991328191},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1704991328191},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1704991328191},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1704991328191},{"_id":"source/2024_1/Docker.md","hash":"d0fd047ad02bb302d2f54705c8c3ffbca6006deb","modified":1705680019820},{"_id":"source/2024_1/Nginx.md","hash":"64854b2d893322068a3aafdc5540ef646bd70997","modified":1705672961965},{"_id":"public/2024_1/Docker.html","hash":"e44c0f9f878721c5ab260dcd4729c50edbb33966","modified":1705764311671},{"_id":"public/2024_1/Nginx.html","hash":"c11d66ac83f13ed0afd61ac74b0c25c563618bb8","modified":1705764311671},{"_id":"source/_posts/Docker.md","hash":"c63c7afd81cf72b880be5bd9cfccbdf2f410799f","modified":1720613551688},{"_id":"source/_posts/Nginx.md","hash":"74f929f547cfd9f0054e531d21961a4e9247bc31","modified":1720613586049},{"_id":"public/2024/01/20/Nginx/index.html","hash":"06fec7f6fdea0e8acfb239e35b8d3f8d70bf4e1d","modified":1720613666792},{"_id":"public/2024/01/20/Docker/index.html","hash":"5b9655dbd35ad6b7c6bfde15bdd70cab46f12163","modified":1720613666792},{"_id":"source/_posts/Java 应用（jar 包）打包成 Docker 镜像.md","hash":"5c2b45e9c2498acde086d95f405cba8ee2e1a70b","modified":1720613587250},{"_id":"source/_posts/Docker操作命令.md","hash":"9c508979a1e1f928c7b4c0db15bb89a27911d3a8","modified":1720613550176},{"_id":"source/_posts/为qinyunjian.cloud安装SSL证书.md","hash":"c5fd10db61bdc0cde1397f82ec5d1e088ccc38ce","modified":1720613507585},{"_id":"source/_posts/Docker安装Redis.md","hash":"7ad12972c9ded10f36a56bc686968470cd294603","modified":1720613547430},{"_id":"source/_posts/为qinyunjian.cloud配置二级域名.md","hash":"76b77d0aa2ca15aae2762a89880d306cbbbac9ea","modified":1720613508644},{"_id":"source/_posts/Docker安装MySQL.md","hash":"7746e9f408f7c6b452acb1687d8d6c13f754ba65","modified":1720613550913},{"_id":"public/2024/06/05/Docker安装MySQL/index.html","hash":"2ab9ac43679dbecf7887f041394bc6d4c46592a0","modified":1717558157577},{"_id":"public/2024/06/05/为qinyunjian.cloud安装SSL证书/index.html","hash":"d517003eeda4707539b8468ea0530fe0633b2f91","modified":1717558157577},{"_id":"public/2024/06/05/Java 应用（jar 包）打包成 Docker 镜像/index.html","hash":"38d01007bcac0f78436879a792e76f206747ab49","modified":1717558157577},{"_id":"public/2024/06/05/Docker操作命令/index.html","hash":"c4bf246d0072b7ec420f91a7e3c28bc271b3fffe","modified":1717558157577},{"_id":"public/2024/06/05/Docker安装Redis/index.html","hash":"6f0d4dfce4602c7871f6f1c12c5a32c157584d9c","modified":1717558157577},{"_id":"public/archives/2024/06/index.html","hash":"e54e06bddc0f11c640bdcf3c37c1921b1ca0c39c","modified":1720613666792},{"_id":"public/2024/06/05/为qinyunjian.cloud配置二级域名/index.html","hash":"26b99b98d0b5df9d203a078ef8316b79c503df4d","modified":1717558157577},{"_id":"public/2024/06/04/Docker安装Redis/index.html","hash":"51084af9e6fa655c8ad256fbf4531d7c247f1392","modified":1720613666792},{"_id":"public/2024/06/04/Docker安装MySQL/index.html","hash":"957896bf266966d36cb44dc490ae030fc511fc4a","modified":1720613666792},{"_id":"public/2024/06/04/Java 应用（jar 包）打包成 Docker 镜像/index.html","hash":"63f014d03541b45c389311404f5338e3d4a0b93b","modified":1720613666792},{"_id":"public/2024/06/04/Docker操作命令/index.html","hash":"5abfce946eacb80ff01a440466cc0333589e24bf","modified":1720613666792},{"_id":"public/2024/06/04/为qinyunjian.cloud安装SSL证书/index.html","hash":"a511b71156b671f7a22bf846ce030d80314c486e","modified":1720613666792},{"_id":"public/2024/06/04/为qinyunjian.cloud配置二级域名/index.html","hash":"29d06d755b1ddaf62ac1188f04795a5fedb66e49","modified":1720613666792},{"_id":"source/_posts/ubuntu-Docker安装minio.md","hash":"57266ad0a7b964f6d0377ae1ba6b77c814a09b9a","modified":1720613619855},{"_id":"source/_posts/ubuntu-安装docker.md","hash":"7d6c0a7585cb5a841b245ab7a0ffb32075833c9b","modified":1720613618191},{"_id":"source/_posts/ubuntu-Nginx和Certbot安装和minio的域名映射.md","hash":"68ab7bb3fadcc6fb3f968ba1ec207ad3b4724188","modified":1720613621444},{"_id":"public/2024/06/12/ubuntu-Nginx和Certbot安装和minio的域名映射/index.html","hash":"1ee804d0d372be19d2e1d7054099f500a7a175e8","modified":1720613666792},{"_id":"public/2024/06/12/ubuntu-安装docker/index.html","hash":"6af9ec967b33e85f8ac25efb82b830029982b315","modified":1720613666792},{"_id":"public/2024/06/12/ubuntu-Docker安装minio/index.html","hash":"fd0f360d2b457f5edaebe282f6a68a52ed3edf63","modified":1720613666792},{"_id":"public/archives/page/2/index.html","hash":"1eea1b7d2f876bf7e2991e95ea00805acd8af186","modified":1720613666792},{"_id":"public/archives/2024/page/2/index.html","hash":"f86e1af1164780f87f6e36ab05c537007e0ddfd1","modified":1720613666792},{"_id":"public/page/2/index.html","hash":"16b6490b5fa85f0318597c066f149f11f2f0095b","modified":1720613666792},{"_id":"public/tags/docker/index.html","hash":"c13d73a301f9201c37e3e4b08e3e044552cbd9cb","modified":1720613666792},{"_id":"public/tags/nginx/index.html","hash":"d0ccebbdff7932fec8451beb7e9c22d21d3de9e0","modified":1720613666792},{"_id":"public/tags/ubuntu/index.html","hash":"30d6da8b68793585b5440d667a9819ddf38e845c","modified":1720613666792}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-01-11T16:15:50.716Z","updated":"2024-01-11T16:15:50.716Z","comments":1,"layout":"post","photos":[],"_id":"clr9ftd2t00003ctl83y49rpu","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"test","date":"2024-01-11T14:37:50.000Z","_content":"\n### 页面信息初始化\nhexo学习记录\n\nhexo new \"test\" 生成新的文档\n\nhexo g 重新编译代码\n\nhexo s 运行项目\n\nhexo d 部署到git仓库\n\n\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2024-01-11 22:37:50\ntags:\n---\n\n### 页面信息初始化\nhexo学习记录\n\nhexo new \"test\" 生成新的文档\n\nhexo g 重新编译代码\n\nhexo s 运行项目\n\nhexo d 部署到git仓库\n\n\n","slug":"test","published":1,"updated":"2024-01-11T16:15:50.717Z","comments":1,"layout":"post","photos":[],"_id":"clr9ftd2z00013ctl6xdt5wfh","content":"<h3 id=\"页面信息初始化\"><a href=\"#页面信息初始化\" class=\"headerlink\" title=\"页面信息初始化\"></a>页面信息初始化</h3><p>hexo学习记录</p>\n<p>hexo new “test” 生成新的文档</p>\n<p>hexo g 重新编译代码</p>\n<p>hexo s 运行项目</p>\n<p>hexo d 部署到git仓库</p>\n","excerpt":"","more":"<h3 id=\"页面信息初始化\"><a href=\"#页面信息初始化\" class=\"headerlink\" title=\"页面信息初始化\"></a>页面信息初始化</h3><p>hexo学习记录</p>\n<p>hexo new “test” 生成新的文档</p>\n<p>hexo g 重新编译代码</p>\n<p>hexo s 运行项目</p>\n<p>hexo d 部署到git仓库</p>\n"},{"title":"Docker安装","date":"2024-01-20T14:32:50.000Z","_content":"\n## 一、Docker学习记录\n\n对于刚开始学习 Docker 的初学者来说，以下是一系列推荐的步骤和概念，可以帮助您建立对 Docker 的基本理解并开始实践：\n\n### 1. 理解 Docker 的基本概念\n\n- **容器（Containers）**：轻量级、可执行的独立软件包，包含运行应用所需的一切：代码、运行时、库、环境变量和配置文件。\n- **镜像（Images）**：容器的蓝图，包含创建容器所需的指令。\n- **Dockerfile**：一种脚本，包含了一系列指令和步骤，用于创建 Docker 镜像。\n\n### 2. 运行您的第一个容器\n\n- 通过运行一个简单的容器来开始，例如 hello-world镜像：\n\n  ```shell\n  docker run hello-world\n  ```\n\n  这个命令会下载一个测试镜像并在容器中运行它。\n\n### 3. 学习 Docker 基本命令\n\n- 熟悉常用的 Docker 命令：\n  - `docker run`：运行一个容器。\n  - `docker ps`：列出运行中的容器。\n  - `docker images`：列出本地存储的镜像。\n  - `docker pull`：从 Docker Hub 下载一个镜像。\n  - `docker build`：根据 Dockerfile 构建一个新镜像。\n  - `docker rm`：删除一个或多个容器。\n  - `docker rmi`：删除一个或多个镜像。\n\n### 4. 实践构建自己的 Docker 镜像\n\n- 学习编写 Dockerfile 并构建自己的镜像：\n  - 创建一个简单的 Dockerfile，例如，设置基础镜像，复制文件，设置工作目录和启动命令。\n  - 使用 `docker build` 命令构建镜像。\n\n### 5. 学习容器的网络和存储\n\n- 了解如何使用 Docker 网络来连接容器。\n- 学习如何使用卷（Volumes）持久化容器数据。\n\n### 6. 使用 Docker Compose\n\n- Docker Compose 允许您使用 YAML 文件定义多容器应用。\n- 学习编写 `docker-compose.yml` 文件并使用 `docker-compose up` 和 `docker-compose down` 来管理应用。\n\n## 二、安装docker\n\n在 CentOS 7.8 上使用阿里云的 Docker 仓库来安装 Docker，您可以按照以下步骤进行：\n\n### 1：安装必要的依赖包\n\n首先，安装一些必要的软件包，这些软件包允许您通过 HTTPS 使用仓库：\n\n```sh\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n### 2：设置阿里云 Docker 仓库\n\n要使用阿里云的 Docker 仓库，您需要添加阿里云的 Docker 仓库地址。通常，您可以在阿里云的容器服务页面获取专属于您账户的 Docker 仓库地址。以下是一个示例命令，但请使用您的实际阿里云 Docker 仓库地址：\n\n```sh\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n### 3：安装 Docker Engine\n\n现在，从阿里云仓库安装 Docker：\n\n```sh\nsudo yum install docker-ce docker-ce-cli containerd.io\n```\n\n### 4：启动 Docker\n\n安装完成后，启动 Docker 服务：\n\n```sh\nsudo systemctl start docker\n```\n\n### 5：验证安装\n\n运行 hello-world 镜像来验证 Docker 是否正确安装，通常在这里是不会有信息响应，因为还需要拉取镜像：\n\n```sh\nsudo docker run hello-world\n```\n\n如果能看到欢迎信息，说明 Docker 已经正确安装和运行。\n\n### 6：使 Docker 开机自启\n\n为了确保 Docker 在启动时自动启动，请使用：\n\n```sh\nsudo systemctl enable docker\n```\n\n### 7：（可选）添加非 root 用户到 Docker 组\n\n为了避免每次运行 Docker 命令时都使用 `sudo`，您可以将您的用户添加到 `docker` 组：\n\n```sh\nsudo usermod -aG docker $USER\n```\n\n这里的 `-aG` 选项意味着将用户添加到 `docker` 组并保留其在其他组的成员资格。注销并重新登录后，您可以以非 root 用户身份运行 Docker 命令。\n\n","source":"_posts/Docker.md","raw":"---\ntitle: Docker安装\ndate: 2024-01-20 22:32:50\ntags: docker\n---\n\n## 一、Docker学习记录\n\n对于刚开始学习 Docker 的初学者来说，以下是一系列推荐的步骤和概念，可以帮助您建立对 Docker 的基本理解并开始实践：\n\n### 1. 理解 Docker 的基本概念\n\n- **容器（Containers）**：轻量级、可执行的独立软件包，包含运行应用所需的一切：代码、运行时、库、环境变量和配置文件。\n- **镜像（Images）**：容器的蓝图，包含创建容器所需的指令。\n- **Dockerfile**：一种脚本，包含了一系列指令和步骤，用于创建 Docker 镜像。\n\n### 2. 运行您的第一个容器\n\n- 通过运行一个简单的容器来开始，例如 hello-world镜像：\n\n  ```shell\n  docker run hello-world\n  ```\n\n  这个命令会下载一个测试镜像并在容器中运行它。\n\n### 3. 学习 Docker 基本命令\n\n- 熟悉常用的 Docker 命令：\n  - `docker run`：运行一个容器。\n  - `docker ps`：列出运行中的容器。\n  - `docker images`：列出本地存储的镜像。\n  - `docker pull`：从 Docker Hub 下载一个镜像。\n  - `docker build`：根据 Dockerfile 构建一个新镜像。\n  - `docker rm`：删除一个或多个容器。\n  - `docker rmi`：删除一个或多个镜像。\n\n### 4. 实践构建自己的 Docker 镜像\n\n- 学习编写 Dockerfile 并构建自己的镜像：\n  - 创建一个简单的 Dockerfile，例如，设置基础镜像，复制文件，设置工作目录和启动命令。\n  - 使用 `docker build` 命令构建镜像。\n\n### 5. 学习容器的网络和存储\n\n- 了解如何使用 Docker 网络来连接容器。\n- 学习如何使用卷（Volumes）持久化容器数据。\n\n### 6. 使用 Docker Compose\n\n- Docker Compose 允许您使用 YAML 文件定义多容器应用。\n- 学习编写 `docker-compose.yml` 文件并使用 `docker-compose up` 和 `docker-compose down` 来管理应用。\n\n## 二、安装docker\n\n在 CentOS 7.8 上使用阿里云的 Docker 仓库来安装 Docker，您可以按照以下步骤进行：\n\n### 1：安装必要的依赖包\n\n首先，安装一些必要的软件包，这些软件包允许您通过 HTTPS 使用仓库：\n\n```sh\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n### 2：设置阿里云 Docker 仓库\n\n要使用阿里云的 Docker 仓库，您需要添加阿里云的 Docker 仓库地址。通常，您可以在阿里云的容器服务页面获取专属于您账户的 Docker 仓库地址。以下是一个示例命令，但请使用您的实际阿里云 Docker 仓库地址：\n\n```sh\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n### 3：安装 Docker Engine\n\n现在，从阿里云仓库安装 Docker：\n\n```sh\nsudo yum install docker-ce docker-ce-cli containerd.io\n```\n\n### 4：启动 Docker\n\n安装完成后，启动 Docker 服务：\n\n```sh\nsudo systemctl start docker\n```\n\n### 5：验证安装\n\n运行 hello-world 镜像来验证 Docker 是否正确安装，通常在这里是不会有信息响应，因为还需要拉取镜像：\n\n```sh\nsudo docker run hello-world\n```\n\n如果能看到欢迎信息，说明 Docker 已经正确安装和运行。\n\n### 6：使 Docker 开机自启\n\n为了确保 Docker 在启动时自动启动，请使用：\n\n```sh\nsudo systemctl enable docker\n```\n\n### 7：（可选）添加非 root 用户到 Docker 组\n\n为了避免每次运行 Docker 命令时都使用 `sudo`，您可以将您的用户添加到 `docker` 组：\n\n```sh\nsudo usermod -aG docker $USER\n```\n\n这里的 `-aG` 选项意味着将用户添加到 `docker` 组并保留其在其他组的成员资格。注销并重新登录后，您可以以非 root 用户身份运行 Docker 命令。\n\n","slug":"Docker","published":1,"updated":"2024-07-10T12:12:31.688Z","_id":"clrm844iy000010tl9xu0c4a6","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"一、Docker学习记录\"><a href=\"#一、Docker学习记录\" class=\"headerlink\" title=\"一、Docker学习记录\"></a>一、Docker学习记录</h2><p>对于刚开始学习 Docker 的初学者来说，以下是一系列推荐的步骤和概念，可以帮助您建立对 Docker 的基本理解并开始实践：</p>\n<h3 id=\"1-理解-Docker-的基本概念\"><a href=\"#1-理解-Docker-的基本概念\" class=\"headerlink\" title=\"1. 理解 Docker 的基本概念\"></a>1. 理解 Docker 的基本概念</h3><ul>\n<li><strong>容器（Containers）</strong>：轻量级、可执行的独立软件包，包含运行应用所需的一切：代码、运行时、库、环境变量和配置文件。</li>\n<li><strong>镜像（Images）</strong>：容器的蓝图，包含创建容器所需的指令。</li>\n<li><strong>Dockerfile</strong>：一种脚本，包含了一系列指令和步骤，用于创建 Docker 镜像。</li>\n</ul>\n<h3 id=\"2-运行您的第一个容器\"><a href=\"#2-运行您的第一个容器\" class=\"headerlink\" title=\"2. 运行您的第一个容器\"></a>2. 运行您的第一个容器</h3><ul>\n<li><p>通过运行一个简单的容器来开始，例如 hello-world镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会下载一个测试镜像并在容器中运行它。</p>\n</li>\n</ul>\n<h3 id=\"3-学习-Docker-基本命令\"><a href=\"#3-学习-Docker-基本命令\" class=\"headerlink\" title=\"3. 学习 Docker 基本命令\"></a>3. 学习 Docker 基本命令</h3><ul>\n<li>熟悉常用的 Docker 命令：<ul>\n<li><code>docker run</code>：运行一个容器。</li>\n<li><code>docker ps</code>：列出运行中的容器。</li>\n<li><code>docker images</code>：列出本地存储的镜像。</li>\n<li><code>docker pull</code>：从 Docker Hub 下载一个镜像。</li>\n<li><code>docker build</code>：根据 Dockerfile 构建一个新镜像。</li>\n<li><code>docker rm</code>：删除一个或多个容器。</li>\n<li><code>docker rmi</code>：删除一个或多个镜像。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-实践构建自己的-Docker-镜像\"><a href=\"#4-实践构建自己的-Docker-镜像\" class=\"headerlink\" title=\"4. 实践构建自己的 Docker 镜像\"></a>4. 实践构建自己的 Docker 镜像</h3><ul>\n<li>学习编写 Dockerfile 并构建自己的镜像：<ul>\n<li>创建一个简单的 Dockerfile，例如，设置基础镜像，复制文件，设置工作目录和启动命令。</li>\n<li>使用 <code>docker build</code> 命令构建镜像。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-学习容器的网络和存储\"><a href=\"#5-学习容器的网络和存储\" class=\"headerlink\" title=\"5. 学习容器的网络和存储\"></a>5. 学习容器的网络和存储</h3><ul>\n<li>了解如何使用 Docker 网络来连接容器。</li>\n<li>学习如何使用卷（Volumes）持久化容器数据。</li>\n</ul>\n<h3 id=\"6-使用-Docker-Compose\"><a href=\"#6-使用-Docker-Compose\" class=\"headerlink\" title=\"6. 使用 Docker Compose\"></a>6. 使用 Docker Compose</h3><ul>\n<li>Docker Compose 允许您使用 YAML 文件定义多容器应用。</li>\n<li>学习编写 <code>docker-compose.yml</code> 文件并使用 <code>docker-compose up</code> 和 <code>docker-compose down</code> 来管理应用。</li>\n</ul>\n<h2 id=\"二、安装docker\"><a href=\"#二、安装docker\" class=\"headerlink\" title=\"二、安装docker\"></a>二、安装docker</h2><p>在 CentOS 7.8 上使用阿里云的 Docker 仓库来安装 Docker，您可以按照以下步骤进行：</p>\n<h3 id=\"1：安装必要的依赖包\"><a href=\"#1：安装必要的依赖包\" class=\"headerlink\" title=\"1：安装必要的依赖包\"></a>1：安装必要的依赖包</h3><p>首先，安装一些必要的软件包，这些软件包允许您通过 HTTPS 使用仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2：设置阿里云-Docker-仓库\"><a href=\"#2：设置阿里云-Docker-仓库\" class=\"headerlink\" title=\"2：设置阿里云 Docker 仓库\"></a>2：设置阿里云 Docker 仓库</h3><p>要使用阿里云的 Docker 仓库，您需要添加阿里云的 Docker 仓库地址。通常，您可以在阿里云的容器服务页面获取专属于您账户的 Docker 仓库地址。以下是一个示例命令，但请使用您的实际阿里云 Docker 仓库地址：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3：安装-Docker-Engine\"><a href=\"#3：安装-Docker-Engine\" class=\"headerlink\" title=\"3：安装 Docker Engine\"></a>3：安装 Docker Engine</h3><p>现在，从阿里云仓库安装 Docker：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4：启动-Docker\"><a href=\"#4：启动-Docker\" class=\"headerlink\" title=\"4：启动 Docker\"></a>4：启动 Docker</h3><p>安装完成后，启动 Docker 服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5：验证安装\"><a href=\"#5：验证安装\" class=\"headerlink\" title=\"5：验证安装\"></a>5：验证安装</h3><p>运行 hello-world 镜像来验证 Docker 是否正确安装，通常在这里是不会有信息响应，因为还需要拉取镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>如果能看到欢迎信息，说明 Docker 已经正确安装和运行。</p>\n<h3 id=\"6：使-Docker-开机自启\"><a href=\"#6：使-Docker-开机自启\" class=\"headerlink\" title=\"6：使 Docker 开机自启\"></a>6：使 Docker 开机自启</h3><p>为了确保 Docker 在启动时自动启动，请使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7：（可选）添加非-root-用户到-Docker-组\"><a href=\"#7：（可选）添加非-root-用户到-Docker-组\" class=\"headerlink\" title=\"7：（可选）添加非 root 用户到 Docker 组\"></a>7：（可选）添加非 root 用户到 Docker 组</h3><p>为了避免每次运行 Docker 命令时都使用 <code>sudo</code>，您可以将您的用户添加到 <code>docker</code> 组：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>-aG</code> 选项意味着将用户添加到 <code>docker</code> 组并保留其在其他组的成员资格。注销并重新登录后，您可以以非 root 用户身份运行 Docker 命令。</p>\n","excerpt":"","more":"<h2 id=\"一、Docker学习记录\"><a href=\"#一、Docker学习记录\" class=\"headerlink\" title=\"一、Docker学习记录\"></a>一、Docker学习记录</h2><p>对于刚开始学习 Docker 的初学者来说，以下是一系列推荐的步骤和概念，可以帮助您建立对 Docker 的基本理解并开始实践：</p>\n<h3 id=\"1-理解-Docker-的基本概念\"><a href=\"#1-理解-Docker-的基本概念\" class=\"headerlink\" title=\"1. 理解 Docker 的基本概念\"></a>1. 理解 Docker 的基本概念</h3><ul>\n<li><strong>容器（Containers）</strong>：轻量级、可执行的独立软件包，包含运行应用所需的一切：代码、运行时、库、环境变量和配置文件。</li>\n<li><strong>镜像（Images）</strong>：容器的蓝图，包含创建容器所需的指令。</li>\n<li><strong>Dockerfile</strong>：一种脚本，包含了一系列指令和步骤，用于创建 Docker 镜像。</li>\n</ul>\n<h3 id=\"2-运行您的第一个容器\"><a href=\"#2-运行您的第一个容器\" class=\"headerlink\" title=\"2. 运行您的第一个容器\"></a>2. 运行您的第一个容器</h3><ul>\n<li><p>通过运行一个简单的容器来开始，例如 hello-world镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会下载一个测试镜像并在容器中运行它。</p>\n</li>\n</ul>\n<h3 id=\"3-学习-Docker-基本命令\"><a href=\"#3-学习-Docker-基本命令\" class=\"headerlink\" title=\"3. 学习 Docker 基本命令\"></a>3. 学习 Docker 基本命令</h3><ul>\n<li>熟悉常用的 Docker 命令：<ul>\n<li><code>docker run</code>：运行一个容器。</li>\n<li><code>docker ps</code>：列出运行中的容器。</li>\n<li><code>docker images</code>：列出本地存储的镜像。</li>\n<li><code>docker pull</code>：从 Docker Hub 下载一个镜像。</li>\n<li><code>docker build</code>：根据 Dockerfile 构建一个新镜像。</li>\n<li><code>docker rm</code>：删除一个或多个容器。</li>\n<li><code>docker rmi</code>：删除一个或多个镜像。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-实践构建自己的-Docker-镜像\"><a href=\"#4-实践构建自己的-Docker-镜像\" class=\"headerlink\" title=\"4. 实践构建自己的 Docker 镜像\"></a>4. 实践构建自己的 Docker 镜像</h3><ul>\n<li>学习编写 Dockerfile 并构建自己的镜像：<ul>\n<li>创建一个简单的 Dockerfile，例如，设置基础镜像，复制文件，设置工作目录和启动命令。</li>\n<li>使用 <code>docker build</code> 命令构建镜像。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-学习容器的网络和存储\"><a href=\"#5-学习容器的网络和存储\" class=\"headerlink\" title=\"5. 学习容器的网络和存储\"></a>5. 学习容器的网络和存储</h3><ul>\n<li>了解如何使用 Docker 网络来连接容器。</li>\n<li>学习如何使用卷（Volumes）持久化容器数据。</li>\n</ul>\n<h3 id=\"6-使用-Docker-Compose\"><a href=\"#6-使用-Docker-Compose\" class=\"headerlink\" title=\"6. 使用 Docker Compose\"></a>6. 使用 Docker Compose</h3><ul>\n<li>Docker Compose 允许您使用 YAML 文件定义多容器应用。</li>\n<li>学习编写 <code>docker-compose.yml</code> 文件并使用 <code>docker-compose up</code> 和 <code>docker-compose down</code> 来管理应用。</li>\n</ul>\n<h2 id=\"二、安装docker\"><a href=\"#二、安装docker\" class=\"headerlink\" title=\"二、安装docker\"></a>二、安装docker</h2><p>在 CentOS 7.8 上使用阿里云的 Docker 仓库来安装 Docker，您可以按照以下步骤进行：</p>\n<h3 id=\"1：安装必要的依赖包\"><a href=\"#1：安装必要的依赖包\" class=\"headerlink\" title=\"1：安装必要的依赖包\"></a>1：安装必要的依赖包</h3><p>首先，安装一些必要的软件包，这些软件包允许您通过 HTTPS 使用仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2：设置阿里云-Docker-仓库\"><a href=\"#2：设置阿里云-Docker-仓库\" class=\"headerlink\" title=\"2：设置阿里云 Docker 仓库\"></a>2：设置阿里云 Docker 仓库</h3><p>要使用阿里云的 Docker 仓库，您需要添加阿里云的 Docker 仓库地址。通常，您可以在阿里云的容器服务页面获取专属于您账户的 Docker 仓库地址。以下是一个示例命令，但请使用您的实际阿里云 Docker 仓库地址：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3：安装-Docker-Engine\"><a href=\"#3：安装-Docker-Engine\" class=\"headerlink\" title=\"3：安装 Docker Engine\"></a>3：安装 Docker Engine</h3><p>现在，从阿里云仓库安装 Docker：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4：启动-Docker\"><a href=\"#4：启动-Docker\" class=\"headerlink\" title=\"4：启动 Docker\"></a>4：启动 Docker</h3><p>安装完成后，启动 Docker 服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5：验证安装\"><a href=\"#5：验证安装\" class=\"headerlink\" title=\"5：验证安装\"></a>5：验证安装</h3><p>运行 hello-world 镜像来验证 Docker 是否正确安装，通常在这里是不会有信息响应，因为还需要拉取镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>如果能看到欢迎信息，说明 Docker 已经正确安装和运行。</p>\n<h3 id=\"6：使-Docker-开机自启\"><a href=\"#6：使-Docker-开机自启\" class=\"headerlink\" title=\"6：使 Docker 开机自启\"></a>6：使 Docker 开机自启</h3><p>为了确保 Docker 在启动时自动启动，请使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7：（可选）添加非-root-用户到-Docker-组\"><a href=\"#7：（可选）添加非-root-用户到-Docker-组\" class=\"headerlink\" title=\"7：（可选）添加非 root 用户到 Docker 组\"></a>7：（可选）添加非 root 用户到 Docker 组</h3><p>为了避免每次运行 Docker 命令时都使用 <code>sudo</code>，您可以将您的用户添加到 <code>docker</code> 组：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>-aG</code> 选项意味着将用户添加到 <code>docker</code> 组并保留其在其他组的成员资格。注销并重新登录后，您可以以非 root 用户身份运行 Docker 命令。</p>\n"},{"title":"Nginx基础知识","date":"2024-01-20T14:31:50.000Z","_content":"\n## 一、Nginx安装\n\n在 CentOS 7.8 上安装 Nginx 通常分为几个步骤：\n\n### 1. 更新系统\n\n在开始之前，最好确保所有的系统软件都是最新的。打开终端并输入以下命令来更新您的系统：\n\n```sh\nsudo yum update\n```\n\n这个命令会更新系统中所有已安装的软件包到最新版本。\n\n### 2. 添加 EPEL 仓库\n\n由于 Nginx 不包含在 CentOS 的默认 YUM 仓库中，您需要添加 EPEL（Extra Packages for Enterprise Linux）仓库来获取 Nginx 的软件包。运行以下命令添加 EPEL 仓库：\n\n```sh\nsudo yum install epel-release\n```\n\n### 3. 安装 Nginx\n\n现在 EPEL 仓库已经添加，您可以安装 Nginx 了。使用以下命令安装：\n\n```sh\nsudo yum install nginx\n```\n\n### 4. 启动 Nginx 服务\n\n安装完成后，您需要启动 Nginx 服务。使用以下命令：\n\n```sh\nsudo systemctl start nginx\n```\n\n### 5. 自动启动 Nginx\n\n为了确保 Nginx 在每次系统启动时自动运行，使用以下命令：\n\n```sh\nsudo systemctl enable nginx\n```\n\n### 6. 调整防火墙设置\n\n如果您的服务器运行的是 firewalld（CentOS 7 的默认防火墙），您需要允许 HTTP 和 HTTPS 流量。运行以下命令来更新防火墙设置：\n\n```sh\nsudo firewall-cmd --permanent --zone=public --add-service=http\nsudo firewall-cmd --permanent --zone=public --add-service=https\nsudo firewall-cmd --reload\n```\n\n### 7. 验证 Nginx 安装\n\n在浏览器中输入您服务器的 IP 地址。如果 Nginx 安装成功，您应该会看到 Nginx 的默认欢迎页面。\n\n### 8. 配置 Nginx（可选）\n\nNginx 的主配置文件位于 `/etc/nginx/nginx.conf`。您可能需要根据您的需求来编辑此文件。网站的配置文件通常位于 `/etc/nginx/conf.d/` 目录中。\n\n\n\n## 二、Nginx的配置文件\n\n已经成功的安装了Nginx，以下是对配置文件的解释说明。\n","source":"_posts/Nginx.md","raw":"---\ntitle: Nginx基础知识\ndate: 2024-01-20 22:31:50\ntags: nginx\n---\n\n## 一、Nginx安装\n\n在 CentOS 7.8 上安装 Nginx 通常分为几个步骤：\n\n### 1. 更新系统\n\n在开始之前，最好确保所有的系统软件都是最新的。打开终端并输入以下命令来更新您的系统：\n\n```sh\nsudo yum update\n```\n\n这个命令会更新系统中所有已安装的软件包到最新版本。\n\n### 2. 添加 EPEL 仓库\n\n由于 Nginx 不包含在 CentOS 的默认 YUM 仓库中，您需要添加 EPEL（Extra Packages for Enterprise Linux）仓库来获取 Nginx 的软件包。运行以下命令添加 EPEL 仓库：\n\n```sh\nsudo yum install epel-release\n```\n\n### 3. 安装 Nginx\n\n现在 EPEL 仓库已经添加，您可以安装 Nginx 了。使用以下命令安装：\n\n```sh\nsudo yum install nginx\n```\n\n### 4. 启动 Nginx 服务\n\n安装完成后，您需要启动 Nginx 服务。使用以下命令：\n\n```sh\nsudo systemctl start nginx\n```\n\n### 5. 自动启动 Nginx\n\n为了确保 Nginx 在每次系统启动时自动运行，使用以下命令：\n\n```sh\nsudo systemctl enable nginx\n```\n\n### 6. 调整防火墙设置\n\n如果您的服务器运行的是 firewalld（CentOS 7 的默认防火墙），您需要允许 HTTP 和 HTTPS 流量。运行以下命令来更新防火墙设置：\n\n```sh\nsudo firewall-cmd --permanent --zone=public --add-service=http\nsudo firewall-cmd --permanent --zone=public --add-service=https\nsudo firewall-cmd --reload\n```\n\n### 7. 验证 Nginx 安装\n\n在浏览器中输入您服务器的 IP 地址。如果 Nginx 安装成功，您应该会看到 Nginx 的默认欢迎页面。\n\n### 8. 配置 Nginx（可选）\n\nNginx 的主配置文件位于 `/etc/nginx/nginx.conf`。您可能需要根据您的需求来编辑此文件。网站的配置文件通常位于 `/etc/nginx/conf.d/` 目录中。\n\n\n\n## 二、Nginx的配置文件\n\n已经成功的安装了Nginx，以下是对配置文件的解释说明。\n","slug":"Nginx","published":1,"updated":"2024-07-10T12:13:06.049Z","_id":"clrm844j1000110tlfro33mdo","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"一、Nginx安装\"><a href=\"#一、Nginx安装\" class=\"headerlink\" title=\"一、Nginx安装\"></a>一、Nginx安装</h2><p>在 CentOS 7.8 上安装 Nginx 通常分为几个步骤：</p>\n<h3 id=\"1-更新系统\"><a href=\"#1-更新系统\" class=\"headerlink\" title=\"1. 更新系统\"></a>1. 更新系统</h3><p>在开始之前，最好确保所有的系统软件都是最新的。打开终端并输入以下命令来更新您的系统：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum update</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会更新系统中所有已安装的软件包到最新版本。</p>\n<h3 id=\"2-添加-EPEL-仓库\"><a href=\"#2-添加-EPEL-仓库\" class=\"headerlink\" title=\"2. 添加 EPEL 仓库\"></a>2. 添加 EPEL 仓库</h3><p>由于 Nginx 不包含在 CentOS 的默认 YUM 仓库中，您需要添加 EPEL（Extra Packages for Enterprise Linux）仓库来获取 Nginx 的软件包。运行以下命令添加 EPEL 仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装-Nginx\"><a href=\"#3-安装-Nginx\" class=\"headerlink\" title=\"3. 安装 Nginx\"></a>3. 安装 Nginx</h3><p>现在 EPEL 仓库已经添加，您可以安装 Nginx 了。使用以下命令安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-启动-Nginx-服务\"><a href=\"#4-启动-Nginx-服务\" class=\"headerlink\" title=\"4. 启动 Nginx 服务\"></a>4. 启动 Nginx 服务</h3><p>安装完成后，您需要启动 Nginx 服务。使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-自动启动-Nginx\"><a href=\"#5-自动启动-Nginx\" class=\"headerlink\" title=\"5. 自动启动 Nginx\"></a>5. 自动启动 Nginx</h3><p>为了确保 Nginx 在每次系统启动时自动运行，使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-调整防火墙设置\"><a href=\"#6-调整防火墙设置\" class=\"headerlink\" title=\"6. 调整防火墙设置\"></a>6. 调整防火墙设置</h3><p>如果您的服务器运行的是 firewalld（CentOS 7 的默认防火墙），您需要允许 HTTP 和 HTTPS 流量。运行以下命令来更新防火墙设置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-验证-Nginx-安装\"><a href=\"#7-验证-Nginx-安装\" class=\"headerlink\" title=\"7. 验证 Nginx 安装\"></a>7. 验证 Nginx 安装</h3><p>在浏览器中输入您服务器的 IP 地址。如果 Nginx 安装成功，您应该会看到 Nginx 的默认欢迎页面。</p>\n<h3 id=\"8-配置-Nginx（可选）\"><a href=\"#8-配置-Nginx（可选）\" class=\"headerlink\" title=\"8. 配置 Nginx（可选）\"></a>8. 配置 Nginx（可选）</h3><p>Nginx 的主配置文件位于 <code>/etc/nginx/nginx.conf</code>。您可能需要根据您的需求来编辑此文件。网站的配置文件通常位于 <code>/etc/nginx/conf.d/</code> 目录中。</p>\n<h2 id=\"二、Nginx的配置文件\"><a href=\"#二、Nginx的配置文件\" class=\"headerlink\" title=\"二、Nginx的配置文件\"></a>二、Nginx的配置文件</h2><p>已经成功的安装了Nginx，以下是对配置文件的解释说明。</p>\n","excerpt":"","more":"<h2 id=\"一、Nginx安装\"><a href=\"#一、Nginx安装\" class=\"headerlink\" title=\"一、Nginx安装\"></a>一、Nginx安装</h2><p>在 CentOS 7.8 上安装 Nginx 通常分为几个步骤：</p>\n<h3 id=\"1-更新系统\"><a href=\"#1-更新系统\" class=\"headerlink\" title=\"1. 更新系统\"></a>1. 更新系统</h3><p>在开始之前，最好确保所有的系统软件都是最新的。打开终端并输入以下命令来更新您的系统：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum update</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会更新系统中所有已安装的软件包到最新版本。</p>\n<h3 id=\"2-添加-EPEL-仓库\"><a href=\"#2-添加-EPEL-仓库\" class=\"headerlink\" title=\"2. 添加 EPEL 仓库\"></a>2. 添加 EPEL 仓库</h3><p>由于 Nginx 不包含在 CentOS 的默认 YUM 仓库中，您需要添加 EPEL（Extra Packages for Enterprise Linux）仓库来获取 Nginx 的软件包。运行以下命令添加 EPEL 仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装-Nginx\"><a href=\"#3-安装-Nginx\" class=\"headerlink\" title=\"3. 安装 Nginx\"></a>3. 安装 Nginx</h3><p>现在 EPEL 仓库已经添加，您可以安装 Nginx 了。使用以下命令安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-启动-Nginx-服务\"><a href=\"#4-启动-Nginx-服务\" class=\"headerlink\" title=\"4. 启动 Nginx 服务\"></a>4. 启动 Nginx 服务</h3><p>安装完成后，您需要启动 Nginx 服务。使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-自动启动-Nginx\"><a href=\"#5-自动启动-Nginx\" class=\"headerlink\" title=\"5. 自动启动 Nginx\"></a>5. 自动启动 Nginx</h3><p>为了确保 Nginx 在每次系统启动时自动运行，使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-调整防火墙设置\"><a href=\"#6-调整防火墙设置\" class=\"headerlink\" title=\"6. 调整防火墙设置\"></a>6. 调整防火墙设置</h3><p>如果您的服务器运行的是 firewalld（CentOS 7 的默认防火墙），您需要允许 HTTP 和 HTTPS 流量。运行以下命令来更新防火墙设置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-验证-Nginx-安装\"><a href=\"#7-验证-Nginx-安装\" class=\"headerlink\" title=\"7. 验证 Nginx 安装\"></a>7. 验证 Nginx 安装</h3><p>在浏览器中输入您服务器的 IP 地址。如果 Nginx 安装成功，您应该会看到 Nginx 的默认欢迎页面。</p>\n<h3 id=\"8-配置-Nginx（可选）\"><a href=\"#8-配置-Nginx（可选）\" class=\"headerlink\" title=\"8. 配置 Nginx（可选）\"></a>8. 配置 Nginx（可选）</h3><p>Nginx 的主配置文件位于 <code>/etc/nginx/nginx.conf</code>。您可能需要根据您的需求来编辑此文件。网站的配置文件通常位于 <code>/etc/nginx/conf.d/</code> 目录中。</p>\n<h2 id=\"二、Nginx的配置文件\"><a href=\"#二、Nginx的配置文件\" class=\"headerlink\" title=\"二、Nginx的配置文件\"></a>二、Nginx的配置文件</h2><p>已经成功的安装了Nginx，以下是对配置文件的解释说明。</p>\n"},{"title":"Docker安装Redis","date":"2024-06-04T14:32:50.000Z","_content":"\n## docker安装Redis\n\n### 安装 Redis 使用 Docker 的步骤\n\n#### 步骤 1: 拉取 Redis 镜像\n\n首先，您需要从 Docker Hub 获取 Redis 的官方镜像。在您的终端或命令行界面中，运行以下命令：\n\n```\ndocker pull redis\n```\n\n这会下载 Redis 的最新官方镜像。如果您需要特定版本的 Redis，可以指定版本号，如 `redis:6.0`。\n\n#### 步骤 2: 运行 Redis 容器（含数据持久化）\n\n使用以下命令启动一个包含数据持久化的 Redis 容器实例：\n\n```sh\ndocker run --name my-redis -p 6379:6379 -d -v redis-data:/data redis\n```\n\n这里的命令参数解释如下：\n\n- `--name my-redis`：为容器指定一个名称，这里使用 `my-redis`。\n- `-p 6379:6379`：将容器的 6379 端口（Redis 的默认端口）映射到宿主机的同一端口。\n- `-d`：以“分离模式”运行容器，即容器在后台运行。\n- `-v redis-data:/data`：创建并挂载一个名为 `redis-data` 的 Docker 卷到容器的 `/data` 目录。Redis 会将其数据存储在 `/data` 目录中，从而实现数据的持久化。\n- `redis`：指定使用 Redis 的官方 Docker 镜像。\n\n#### 步骤 3: 验证 Redis 容器\n\n要确认 Redis 容器已经成功启动并运行，可以运行以下命令：\n\n```sh\ndocker ps\n```\n\n这将列出所有正在运行的容器。您应该能在列表中看到名为 `my-redis` 的容器。","source":"_posts/Docker安装Redis.md","raw":"---\ntitle: Docker安装Redis\ndate: 2024-06-04 22:32:50\ntags: docker\n---\n\n## docker安装Redis\n\n### 安装 Redis 使用 Docker 的步骤\n\n#### 步骤 1: 拉取 Redis 镜像\n\n首先，您需要从 Docker Hub 获取 Redis 的官方镜像。在您的终端或命令行界面中，运行以下命令：\n\n```\ndocker pull redis\n```\n\n这会下载 Redis 的最新官方镜像。如果您需要特定版本的 Redis，可以指定版本号，如 `redis:6.0`。\n\n#### 步骤 2: 运行 Redis 容器（含数据持久化）\n\n使用以下命令启动一个包含数据持久化的 Redis 容器实例：\n\n```sh\ndocker run --name my-redis -p 6379:6379 -d -v redis-data:/data redis\n```\n\n这里的命令参数解释如下：\n\n- `--name my-redis`：为容器指定一个名称，这里使用 `my-redis`。\n- `-p 6379:6379`：将容器的 6379 端口（Redis 的默认端口）映射到宿主机的同一端口。\n- `-d`：以“分离模式”运行容器，即容器在后台运行。\n- `-v redis-data:/data`：创建并挂载一个名为 `redis-data` 的 Docker 卷到容器的 `/data` 目录。Redis 会将其数据存储在 `/data` 目录中，从而实现数据的持久化。\n- `redis`：指定使用 Redis 的官方 Docker 镜像。\n\n#### 步骤 3: 验证 Redis 容器\n\n要确认 Redis 容器已经成功启动并运行，可以运行以下命令：\n\n```sh\ndocker ps\n```\n\n这将列出所有正在运行的容器。您应该能在列表中看到名为 `my-redis` 的容器。","slug":"Docker安装Redis","published":1,"updated":"2024-07-10T12:12:27.430Z","_id":"clx19s5280000iotlazeca229","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"docker安装Redis\"><a href=\"#docker安装Redis\" class=\"headerlink\" title=\"docker安装Redis\"></a>docker安装Redis</h2><h3 id=\"安装-Redis-使用-Docker-的步骤\"><a href=\"#安装-Redis-使用-Docker-的步骤\" class=\"headerlink\" title=\"安装 Redis 使用 Docker 的步骤\"></a>安装 Redis 使用 Docker 的步骤</h3><h4 id=\"步骤-1-拉取-Redis-镜像\"><a href=\"#步骤-1-拉取-Redis-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 Redis 镜像\"></a>步骤 1: 拉取 Redis 镜像</h4><p>首先，您需要从 Docker Hub 获取 Redis 的官方镜像。在您的终端或命令行界面中，运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis</span><br></pre></td></tr></table></figure>\n\n<p>这会下载 Redis 的最新官方镜像。如果您需要特定版本的 Redis，可以指定版本号，如 <code>redis:6.0</code>。</p>\n<h4 id=\"步骤-2-运行-Redis-容器（含数据持久化）\"><a href=\"#步骤-2-运行-Redis-容器（含数据持久化）\" class=\"headerlink\" title=\"步骤 2: 运行 Redis 容器（含数据持久化）\"></a>步骤 2: 运行 Redis 容器（含数据持久化）</h4><p>使用以下命令启动一个包含数据持久化的 Redis 容器实例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-redis -p 6379:6379 -d -v redis-data:/data redis</span><br></pre></td></tr></table></figure>\n\n<p>这里的命令参数解释如下：</p>\n<ul>\n<li><code>--name my-redis</code>：为容器指定一个名称，这里使用 <code>my-redis</code>。</li>\n<li><code>-p 6379:6379</code>：将容器的 6379 端口（Redis 的默认端口）映射到宿主机的同一端口。</li>\n<li><code>-d</code>：以“分离模式”运行容器，即容器在后台运行。</li>\n<li><code>-v redis-data:/data</code>：创建并挂载一个名为 <code>redis-data</code> 的 Docker 卷到容器的 <code>/data</code> 目录。Redis 会将其数据存储在 <code>/data</code> 目录中，从而实现数据的持久化。</li>\n<li><code>redis</code>：指定使用 Redis 的官方 Docker 镜像。</li>\n</ul>\n<h4 id=\"步骤-3-验证-Redis-容器\"><a href=\"#步骤-3-验证-Redis-容器\" class=\"headerlink\" title=\"步骤 3: 验证 Redis 容器\"></a>步骤 3: 验证 Redis 容器</h4><p>要确认 Redis 容器已经成功启动并运行，可以运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p>这将列出所有正在运行的容器。您应该能在列表中看到名为 <code>my-redis</code> 的容器。</p>\n","excerpt":"","more":"<h2 id=\"docker安装Redis\"><a href=\"#docker安装Redis\" class=\"headerlink\" title=\"docker安装Redis\"></a>docker安装Redis</h2><h3 id=\"安装-Redis-使用-Docker-的步骤\"><a href=\"#安装-Redis-使用-Docker-的步骤\" class=\"headerlink\" title=\"安装 Redis 使用 Docker 的步骤\"></a>安装 Redis 使用 Docker 的步骤</h3><h4 id=\"步骤-1-拉取-Redis-镜像\"><a href=\"#步骤-1-拉取-Redis-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 Redis 镜像\"></a>步骤 1: 拉取 Redis 镜像</h4><p>首先，您需要从 Docker Hub 获取 Redis 的官方镜像。在您的终端或命令行界面中，运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis</span><br></pre></td></tr></table></figure>\n\n<p>这会下载 Redis 的最新官方镜像。如果您需要特定版本的 Redis，可以指定版本号，如 <code>redis:6.0</code>。</p>\n<h4 id=\"步骤-2-运行-Redis-容器（含数据持久化）\"><a href=\"#步骤-2-运行-Redis-容器（含数据持久化）\" class=\"headerlink\" title=\"步骤 2: 运行 Redis 容器（含数据持久化）\"></a>步骤 2: 运行 Redis 容器（含数据持久化）</h4><p>使用以下命令启动一个包含数据持久化的 Redis 容器实例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-redis -p 6379:6379 -d -v redis-data:/data redis</span><br></pre></td></tr></table></figure>\n\n<p>这里的命令参数解释如下：</p>\n<ul>\n<li><code>--name my-redis</code>：为容器指定一个名称，这里使用 <code>my-redis</code>。</li>\n<li><code>-p 6379:6379</code>：将容器的 6379 端口（Redis 的默认端口）映射到宿主机的同一端口。</li>\n<li><code>-d</code>：以“分离模式”运行容器，即容器在后台运行。</li>\n<li><code>-v redis-data:/data</code>：创建并挂载一个名为 <code>redis-data</code> 的 Docker 卷到容器的 <code>/data</code> 目录。Redis 会将其数据存储在 <code>/data</code> 目录中，从而实现数据的持久化。</li>\n<li><code>redis</code>：指定使用 Redis 的官方 Docker 镜像。</li>\n</ul>\n<h4 id=\"步骤-3-验证-Redis-容器\"><a href=\"#步骤-3-验证-Redis-容器\" class=\"headerlink\" title=\"步骤 3: 验证 Redis 容器\"></a>步骤 3: 验证 Redis 容器</h4><p>要确认 Redis 容器已经成功启动并运行，可以运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p>这将列出所有正在运行的容器。您应该能在列表中看到名为 <code>my-redis</code> 的容器。</p>\n"},{"title":"Docker安装MySQL","date":"2024-06-04T14:32:50.000Z","_content":"\n## Docker安装MySQL\n\n### 安装 MySQL 5.7 到 Docker 的详细步骤\n\n#### 步骤 1: 拉取 MySQL 5.7 镜像\n\n**操作**：\n\n```shell\ndocker pull mysql:5.7\n```\n\n**解释**：\n\n- 这个命令会从 Docker Hub（Docker 的官方镜像仓库）拉取 MySQL 5.7 的镜像。\n- `docker pull` 是 Docker 获取镜像的命令。\n- `mysql:5.7` 指定了您想要拉取的镜像及其版本。这里是 MySQL 版本 5.7。\n\n#### 注：可以先使用`docker volume create --name mysql-data`\n\n#### 步骤 2: 创建并运行 MySQL 容器\n\n**操作**：\n\n```shell\ndocker run --name mysql-5.7 -e MYSQL_ROOT_PASSWORD=123456 -v mysql-data:/var/lib/mysql -p 3306:3306 -d mysql:5.7\n```\n\n**解释**：\n\n- **docker run**：\n  - 这是 Docker 用于启动新容器的基本命令。\n- **--name mysql-5.7**：\n  - `--name` 选项用于为容器指定一个名字，这里命名为 `mysql-5.7`。这个名字用于识别和引用容器。\n- **-e MYSQL_ROOT_PASSWORD=123456**：\n  - `-e` 选项用于设置环境变量。在这个例子中，它设置了 MySQL 的 root 用户的密码为 `123456`。这是 MySQL 容器启动所必需的。\n- **-v mysql-data:/var/lib/mysql**：\n  - `-v` 选项用于挂载卷（volume）。这里，它将名为 `mysql-data` 的 Docker 卷挂载到容器内的 `/var/lib/mysql` 目录。\n  - 这个操作的目的是数据持久化。即使容器被停止或删除，存储在 `/var/lib/mysql` 目录中的数据（即 MySQL 数据库文件）仍然会保留在 `mysql-data` 卷中。\n- **-p 3306:3306**：\n  - `-p` 选项用于端口映射。这里，它将容器内的 3306 端口（MySQL 默认端口）映射到宿主机的同一端口。\n  - 这样可以通过宿主机的 3306 端口访问 MySQL 容器。\n- **-d**：\n  - `-d` 选项告诉 Docker 以“分离模式”运行容器，即在后台运行。\n- **mysql:5.7**：\n  - 指定使用的 Docker 镜像和标签。在这个例子中，它使用的是 MySQL 5.7 版本的官方 Docker 镜像\n\n#### 步骤 3: 检查容器运行状态\n\n**操作**：\n\n```shell\ndocker ps\n```\n\n**解释**：\n\n- 使用 `docker ps` 可以查看当前正在运行的 Docker 容器的列表。\n- 如果 MySQL 容器已经启动并运行，它应该会出现在这个列表中。\n\n#### 步骤4：重新安装MySQL\n\n停止原先`mysql-5.7`容器\n\n```shell\ndocker stop mysql-5.7\n```\n\n删除原先`mysql-5.7`容器\n\n```shell\ndocker rm mysql-5.7\n```\n\n因为我删除了原先的数据库，但是保留了宿主机上的配置，我希望把保留的配置和数据卷重新映射到容器，以下是我重新安装mysql-5.7的命令。\n\n```shell\ndocker run -d \\\n  --name mysql-5.7 \\\n  -e MYSQL_ROOT_PASSWORD=123456 \\\n  -p 3306:3306 \\\n  -v mysql-data:/var/lib/mysql \\\n  -v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf \\\n  mysql:5.7\n```\n\n这条命令通过Docker在后台启动了一个MySQL 5.7版本的容器，并配置了一系列的参数来满足特定的需求：\n\n* **`-d`**: 表示容器在后台运行，让终端不会被当前容器的运行过程占用。\n\n* **`--name mysql-5.7`**: 为运行的容器指定一个名字`mysql-5.7`，这样可以更方便地对容器进行管理。\n\n* **`-e MYSQL_ROOT_PASSWORD=my-secret-pw`**: 设置环境变量`MYSQL_ROOT_PASSWORD`为`my-secret-pw`，这是为MySQL的root用户设置的密码，是MySQL容器启动时必需的配置项。\n\n* **`-p 3306:3306`**: 将容器内部使用的3306端口映射到宿主机的3306端口上，这样可以通过宿主机的端口来访问容器中的MySQL服务。\n\n* **`-v mysql-data:/var/lib/mysql`**: 将名为`mysql-data`的数据卷挂载到容器内的`/var/lib/mysql`目录。这是MySQL存储数据的默认位置，使用数据卷可以实现数据的持久化保存，确保数据不会因为容器的删除而丢失，并且可以在不同的容器间共享这部分数据。\n\n* **`-v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf`**: 将宿主机上的`/etc/my.cnf.d/mysql-clients.cnf`配置文件挂载到容器内的`/etc/mysql/conf.d/mysql-clients.cnf`位置。这样做是为了自定义MySQL服务器的配置，可以根据需要调整MySQL的行为和性能。\n\n* **`mysql:5.7`**: 指定使用`mysql:5.7`镜像创建容器，这个镜像是MySQL官方发布的，版本号为5.7，保证了MySQL服务的标准化和一致性。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/about.png)\n\n","source":"_posts/Docker安装MySQL.md","raw":"---\ntitle: Docker安装MySQL\ndate: 2024-06-04 22:32:50\ntags: docker\n---\n\n## Docker安装MySQL\n\n### 安装 MySQL 5.7 到 Docker 的详细步骤\n\n#### 步骤 1: 拉取 MySQL 5.7 镜像\n\n**操作**：\n\n```shell\ndocker pull mysql:5.7\n```\n\n**解释**：\n\n- 这个命令会从 Docker Hub（Docker 的官方镜像仓库）拉取 MySQL 5.7 的镜像。\n- `docker pull` 是 Docker 获取镜像的命令。\n- `mysql:5.7` 指定了您想要拉取的镜像及其版本。这里是 MySQL 版本 5.7。\n\n#### 注：可以先使用`docker volume create --name mysql-data`\n\n#### 步骤 2: 创建并运行 MySQL 容器\n\n**操作**：\n\n```shell\ndocker run --name mysql-5.7 -e MYSQL_ROOT_PASSWORD=123456 -v mysql-data:/var/lib/mysql -p 3306:3306 -d mysql:5.7\n```\n\n**解释**：\n\n- **docker run**：\n  - 这是 Docker 用于启动新容器的基本命令。\n- **--name mysql-5.7**：\n  - `--name` 选项用于为容器指定一个名字，这里命名为 `mysql-5.7`。这个名字用于识别和引用容器。\n- **-e MYSQL_ROOT_PASSWORD=123456**：\n  - `-e` 选项用于设置环境变量。在这个例子中，它设置了 MySQL 的 root 用户的密码为 `123456`。这是 MySQL 容器启动所必需的。\n- **-v mysql-data:/var/lib/mysql**：\n  - `-v` 选项用于挂载卷（volume）。这里，它将名为 `mysql-data` 的 Docker 卷挂载到容器内的 `/var/lib/mysql` 目录。\n  - 这个操作的目的是数据持久化。即使容器被停止或删除，存储在 `/var/lib/mysql` 目录中的数据（即 MySQL 数据库文件）仍然会保留在 `mysql-data` 卷中。\n- **-p 3306:3306**：\n  - `-p` 选项用于端口映射。这里，它将容器内的 3306 端口（MySQL 默认端口）映射到宿主机的同一端口。\n  - 这样可以通过宿主机的 3306 端口访问 MySQL 容器。\n- **-d**：\n  - `-d` 选项告诉 Docker 以“分离模式”运行容器，即在后台运行。\n- **mysql:5.7**：\n  - 指定使用的 Docker 镜像和标签。在这个例子中，它使用的是 MySQL 5.7 版本的官方 Docker 镜像\n\n#### 步骤 3: 检查容器运行状态\n\n**操作**：\n\n```shell\ndocker ps\n```\n\n**解释**：\n\n- 使用 `docker ps` 可以查看当前正在运行的 Docker 容器的列表。\n- 如果 MySQL 容器已经启动并运行，它应该会出现在这个列表中。\n\n#### 步骤4：重新安装MySQL\n\n停止原先`mysql-5.7`容器\n\n```shell\ndocker stop mysql-5.7\n```\n\n删除原先`mysql-5.7`容器\n\n```shell\ndocker rm mysql-5.7\n```\n\n因为我删除了原先的数据库，但是保留了宿主机上的配置，我希望把保留的配置和数据卷重新映射到容器，以下是我重新安装mysql-5.7的命令。\n\n```shell\ndocker run -d \\\n  --name mysql-5.7 \\\n  -e MYSQL_ROOT_PASSWORD=123456 \\\n  -p 3306:3306 \\\n  -v mysql-data:/var/lib/mysql \\\n  -v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf \\\n  mysql:5.7\n```\n\n这条命令通过Docker在后台启动了一个MySQL 5.7版本的容器，并配置了一系列的参数来满足特定的需求：\n\n* **`-d`**: 表示容器在后台运行，让终端不会被当前容器的运行过程占用。\n\n* **`--name mysql-5.7`**: 为运行的容器指定一个名字`mysql-5.7`，这样可以更方便地对容器进行管理。\n\n* **`-e MYSQL_ROOT_PASSWORD=my-secret-pw`**: 设置环境变量`MYSQL_ROOT_PASSWORD`为`my-secret-pw`，这是为MySQL的root用户设置的密码，是MySQL容器启动时必需的配置项。\n\n* **`-p 3306:3306`**: 将容器内部使用的3306端口映射到宿主机的3306端口上，这样可以通过宿主机的端口来访问容器中的MySQL服务。\n\n* **`-v mysql-data:/var/lib/mysql`**: 将名为`mysql-data`的数据卷挂载到容器内的`/var/lib/mysql`目录。这是MySQL存储数据的默认位置，使用数据卷可以实现数据的持久化保存，确保数据不会因为容器的删除而丢失，并且可以在不同的容器间共享这部分数据。\n\n* **`-v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf`**: 将宿主机上的`/etc/my.cnf.d/mysql-clients.cnf`配置文件挂载到容器内的`/etc/mysql/conf.d/mysql-clients.cnf`位置。这样做是为了自定义MySQL服务器的配置，可以根据需要调整MySQL的行为和性能。\n\n* **`mysql:5.7`**: 指定使用`mysql:5.7`镜像创建容器，这个镜像是MySQL官方发布的，版本号为5.7，保证了MySQL服务的标准化和一致性。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/about.png)\n\n","slug":"Docker安装MySQL","published":1,"updated":"2024-07-10T12:12:30.913Z","_id":"clx19s52i0001iotlgejk5hwk","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Docker安装MySQL\"><a href=\"#Docker安装MySQL\" class=\"headerlink\" title=\"Docker安装MySQL\"></a>Docker安装MySQL</h2><h3 id=\"安装-MySQL-5-7-到-Docker-的详细步骤\"><a href=\"#安装-MySQL-5-7-到-Docker-的详细步骤\" class=\"headerlink\" title=\"安装 MySQL 5.7 到 Docker 的详细步骤\"></a>安装 MySQL 5.7 到 Docker 的详细步骤</h3><h4 id=\"步骤-1-拉取-MySQL-5-7-镜像\"><a href=\"#步骤-1-拉取-MySQL-5-7-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 MySQL 5.7 镜像\"></a>步骤 1: 拉取 MySQL 5.7 镜像</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>这个命令会从 Docker Hub（Docker 的官方镜像仓库）拉取 MySQL 5.7 的镜像。</li>\n<li><code>docker pull</code> 是 Docker 获取镜像的命令。</li>\n<li><code>mysql:5.7</code> 指定了您想要拉取的镜像及其版本。这里是 MySQL 版本 5.7。</li>\n</ul>\n<h4 id=\"注：可以先使用docker-volume-create-name-mysql-data\"><a href=\"#注：可以先使用docker-volume-create-name-mysql-data\" class=\"headerlink\" title=\"注：可以先使用docker volume create --name mysql-data\"></a>注：可以先使用<code>docker volume create --name mysql-data</code></h4><h4 id=\"步骤-2-创建并运行-MySQL-容器\"><a href=\"#步骤-2-创建并运行-MySQL-容器\" class=\"headerlink\" title=\"步骤 2: 创建并运行 MySQL 容器\"></a>步骤 2: 创建并运行 MySQL 容器</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mysql-5.7 -e MYSQL_ROOT_PASSWORD=123456 -v mysql-data:/var/lib/mysql -p 3306:3306 -d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li><strong>docker run</strong>：<ul>\n<li>这是 Docker 用于启动新容器的基本命令。</li>\n</ul>\n</li>\n<li><strong>–name mysql-5.7</strong>：<ul>\n<li><code>--name</code> 选项用于为容器指定一个名字，这里命名为 <code>mysql-5.7</code>。这个名字用于识别和引用容器。</li>\n</ul>\n</li>\n<li><strong>-e MYSQL_ROOT_PASSWORD&#x3D;123456</strong>：<ul>\n<li><code>-e</code> 选项用于设置环境变量。在这个例子中，它设置了 MySQL 的 root 用户的密码为 <code>123456</code>。这是 MySQL 容器启动所必需的。</li>\n</ul>\n</li>\n<li><strong>-v mysql-data:&#x2F;var&#x2F;lib&#x2F;mysql</strong>：<ul>\n<li><code>-v</code> 选项用于挂载卷（volume）。这里，它将名为 <code>mysql-data</code> 的 Docker 卷挂载到容器内的 <code>/var/lib/mysql</code> 目录。</li>\n<li>这个操作的目的是数据持久化。即使容器被停止或删除，存储在 <code>/var/lib/mysql</code> 目录中的数据（即 MySQL 数据库文件）仍然会保留在 <code>mysql-data</code> 卷中。</li>\n</ul>\n</li>\n<li><strong>-p 3306:3306</strong>：<ul>\n<li><code>-p</code> 选项用于端口映射。这里，它将容器内的 3306 端口（MySQL 默认端口）映射到宿主机的同一端口。</li>\n<li>这样可以通过宿主机的 3306 端口访问 MySQL 容器。</li>\n</ul>\n</li>\n<li><strong>-d</strong>：<ul>\n<li><code>-d</code> 选项告诉 Docker 以“分离模式”运行容器，即在后台运行。</li>\n</ul>\n</li>\n<li><strong>mysql:5.7</strong>：<ul>\n<li>指定使用的 Docker 镜像和标签。在这个例子中，它使用的是 MySQL 5.7 版本的官方 Docker 镜像</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤-3-检查容器运行状态\"><a href=\"#步骤-3-检查容器运行状态\" class=\"headerlink\" title=\"步骤 3: 检查容器运行状态\"></a>步骤 3: 检查容器运行状态</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>使用 <code>docker ps</code> 可以查看当前正在运行的 Docker 容器的列表。</li>\n<li>如果 MySQL 容器已经启动并运行，它应该会出现在这个列表中。</li>\n</ul>\n<h4 id=\"步骤4：重新安装MySQL\"><a href=\"#步骤4：重新安装MySQL\" class=\"headerlink\" title=\"步骤4：重新安装MySQL\"></a>步骤4：重新安装MySQL</h4><p>停止原先<code>mysql-5.7</code>容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop mysql-5.7</span><br></pre></td></tr></table></figure>\n\n<p>删除原先<code>mysql-5.7</code>容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm mysql-5.7</span><br></pre></td></tr></table></figure>\n\n<p>因为我删除了原先的数据库，但是保留了宿主机上的配置，我希望把保留的配置和数据卷重新映射到容器，以下是我重新安装mysql-5.7的命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql-5.7 \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -v mysql-data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf \\</span><br><span class=\"line\">  mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>这条命令通过Docker在后台启动了一个MySQL 5.7版本的容器，并配置了一系列的参数来满足特定的需求：</p>\n<ul>\n<li><p><strong><code>-d</code></strong>: 表示容器在后台运行，让终端不会被当前容器的运行过程占用。</p>\n</li>\n<li><p><strong><code>--name mysql-5.7</code></strong>: 为运行的容器指定一个名字<code>mysql-5.7</code>，这样可以更方便地对容器进行管理。</p>\n</li>\n<li><p><strong><code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code></strong>: 设置环境变量<code>MYSQL_ROOT_PASSWORD</code>为<code>my-secret-pw</code>，这是为MySQL的root用户设置的密码，是MySQL容器启动时必需的配置项。</p>\n</li>\n<li><p><strong><code>-p 3306:3306</code></strong>: 将容器内部使用的3306端口映射到宿主机的3306端口上，这样可以通过宿主机的端口来访问容器中的MySQL服务。</p>\n</li>\n<li><p><strong><code>-v mysql-data:/var/lib/mysql</code></strong>: 将名为<code>mysql-data</code>的数据卷挂载到容器内的<code>/var/lib/mysql</code>目录。这是MySQL存储数据的默认位置，使用数据卷可以实现数据的持久化保存，确保数据不会因为容器的删除而丢失，并且可以在不同的容器间共享这部分数据。</p>\n</li>\n<li><p><strong><code>-v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf</code></strong>: 将宿主机上的<code>/etc/my.cnf.d/mysql-clients.cnf</code>配置文件挂载到容器内的<code>/etc/mysql/conf.d/mysql-clients.cnf</code>位置。这样做是为了自定义MySQL服务器的配置，可以根据需要调整MySQL的行为和性能。</p>\n</li>\n<li><p><strong><code>mysql:5.7</code></strong>: 指定使用<code>mysql:5.7</code>镜像创建容器，这个镜像是MySQL官方发布的，版本号为5.7，保证了MySQL服务的标准化和一致性。</p>\n</li>\n</ul>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/about.png\"></p>\n","excerpt":"","more":"<h2 id=\"Docker安装MySQL\"><a href=\"#Docker安装MySQL\" class=\"headerlink\" title=\"Docker安装MySQL\"></a>Docker安装MySQL</h2><h3 id=\"安装-MySQL-5-7-到-Docker-的详细步骤\"><a href=\"#安装-MySQL-5-7-到-Docker-的详细步骤\" class=\"headerlink\" title=\"安装 MySQL 5.7 到 Docker 的详细步骤\"></a>安装 MySQL 5.7 到 Docker 的详细步骤</h3><h4 id=\"步骤-1-拉取-MySQL-5-7-镜像\"><a href=\"#步骤-1-拉取-MySQL-5-7-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 MySQL 5.7 镜像\"></a>步骤 1: 拉取 MySQL 5.7 镜像</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>这个命令会从 Docker Hub（Docker 的官方镜像仓库）拉取 MySQL 5.7 的镜像。</li>\n<li><code>docker pull</code> 是 Docker 获取镜像的命令。</li>\n<li><code>mysql:5.7</code> 指定了您想要拉取的镜像及其版本。这里是 MySQL 版本 5.7。</li>\n</ul>\n<h4 id=\"注：可以先使用docker-volume-create-name-mysql-data\"><a href=\"#注：可以先使用docker-volume-create-name-mysql-data\" class=\"headerlink\" title=\"注：可以先使用docker volume create --name mysql-data\"></a>注：可以先使用<code>docker volume create --name mysql-data</code></h4><h4 id=\"步骤-2-创建并运行-MySQL-容器\"><a href=\"#步骤-2-创建并运行-MySQL-容器\" class=\"headerlink\" title=\"步骤 2: 创建并运行 MySQL 容器\"></a>步骤 2: 创建并运行 MySQL 容器</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mysql-5.7 -e MYSQL_ROOT_PASSWORD=123456 -v mysql-data:/var/lib/mysql -p 3306:3306 -d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li><strong>docker run</strong>：<ul>\n<li>这是 Docker 用于启动新容器的基本命令。</li>\n</ul>\n</li>\n<li><strong>–name mysql-5.7</strong>：<ul>\n<li><code>--name</code> 选项用于为容器指定一个名字，这里命名为 <code>mysql-5.7</code>。这个名字用于识别和引用容器。</li>\n</ul>\n</li>\n<li><strong>-e MYSQL_ROOT_PASSWORD&#x3D;123456</strong>：<ul>\n<li><code>-e</code> 选项用于设置环境变量。在这个例子中，它设置了 MySQL 的 root 用户的密码为 <code>123456</code>。这是 MySQL 容器启动所必需的。</li>\n</ul>\n</li>\n<li><strong>-v mysql-data:&#x2F;var&#x2F;lib&#x2F;mysql</strong>：<ul>\n<li><code>-v</code> 选项用于挂载卷（volume）。这里，它将名为 <code>mysql-data</code> 的 Docker 卷挂载到容器内的 <code>/var/lib/mysql</code> 目录。</li>\n<li>这个操作的目的是数据持久化。即使容器被停止或删除，存储在 <code>/var/lib/mysql</code> 目录中的数据（即 MySQL 数据库文件）仍然会保留在 <code>mysql-data</code> 卷中。</li>\n</ul>\n</li>\n<li><strong>-p 3306:3306</strong>：<ul>\n<li><code>-p</code> 选项用于端口映射。这里，它将容器内的 3306 端口（MySQL 默认端口）映射到宿主机的同一端口。</li>\n<li>这样可以通过宿主机的 3306 端口访问 MySQL 容器。</li>\n</ul>\n</li>\n<li><strong>-d</strong>：<ul>\n<li><code>-d</code> 选项告诉 Docker 以“分离模式”运行容器，即在后台运行。</li>\n</ul>\n</li>\n<li><strong>mysql:5.7</strong>：<ul>\n<li>指定使用的 Docker 镜像和标签。在这个例子中，它使用的是 MySQL 5.7 版本的官方 Docker 镜像</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"步骤-3-检查容器运行状态\"><a href=\"#步骤-3-检查容器运行状态\" class=\"headerlink\" title=\"步骤 3: 检查容器运行状态\"></a>步骤 3: 检查容器运行状态</h4><p><strong>操作</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<ul>\n<li>使用 <code>docker ps</code> 可以查看当前正在运行的 Docker 容器的列表。</li>\n<li>如果 MySQL 容器已经启动并运行，它应该会出现在这个列表中。</li>\n</ul>\n<h4 id=\"步骤4：重新安装MySQL\"><a href=\"#步骤4：重新安装MySQL\" class=\"headerlink\" title=\"步骤4：重新安装MySQL\"></a>步骤4：重新安装MySQL</h4><p>停止原先<code>mysql-5.7</code>容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop mysql-5.7</span><br></pre></td></tr></table></figure>\n\n<p>删除原先<code>mysql-5.7</code>容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm mysql-5.7</span><br></pre></td></tr></table></figure>\n\n<p>因为我删除了原先的数据库，但是保留了宿主机上的配置，我希望把保留的配置和数据卷重新映射到容器，以下是我重新安装mysql-5.7的命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql-5.7 \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -v mysql-data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf \\</span><br><span class=\"line\">  mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>这条命令通过Docker在后台启动了一个MySQL 5.7版本的容器，并配置了一系列的参数来满足特定的需求：</p>\n<ul>\n<li><p><strong><code>-d</code></strong>: 表示容器在后台运行，让终端不会被当前容器的运行过程占用。</p>\n</li>\n<li><p><strong><code>--name mysql-5.7</code></strong>: 为运行的容器指定一个名字<code>mysql-5.7</code>，这样可以更方便地对容器进行管理。</p>\n</li>\n<li><p><strong><code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code></strong>: 设置环境变量<code>MYSQL_ROOT_PASSWORD</code>为<code>my-secret-pw</code>，这是为MySQL的root用户设置的密码，是MySQL容器启动时必需的配置项。</p>\n</li>\n<li><p><strong><code>-p 3306:3306</code></strong>: 将容器内部使用的3306端口映射到宿主机的3306端口上，这样可以通过宿主机的端口来访问容器中的MySQL服务。</p>\n</li>\n<li><p><strong><code>-v mysql-data:/var/lib/mysql</code></strong>: 将名为<code>mysql-data</code>的数据卷挂载到容器内的<code>/var/lib/mysql</code>目录。这是MySQL存储数据的默认位置，使用数据卷可以实现数据的持久化保存，确保数据不会因为容器的删除而丢失，并且可以在不同的容器间共享这部分数据。</p>\n</li>\n<li><p><strong><code>-v /etc/my.cnf.d/mysql-clients.cnf:/etc/mysql/conf.d/mysql-clients.cnf</code></strong>: 将宿主机上的<code>/etc/my.cnf.d/mysql-clients.cnf</code>配置文件挂载到容器内的<code>/etc/mysql/conf.d/mysql-clients.cnf</code>位置。这样做是为了自定义MySQL服务器的配置，可以根据需要调整MySQL的行为和性能。</p>\n</li>\n<li><p><strong><code>mysql:5.7</code></strong>: 指定使用<code>mysql:5.7</code>镜像创建容器，这个镜像是MySQL官方发布的，版本号为5.7，保证了MySQL服务的标准化和一致性。</p>\n</li>\n</ul>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/about.png\"></p>\n"},{"title":"Java 应用（jar 包）打包成 Docker 镜像","date":"2024-06-04T14:32:50.000Z","_content":"### Java 应用（jar 包）打包成 Docker 镜像\n\n​\t要将一个 Java 应用（jar 包）打包成 Docker 镜像，你需要编写一个 `Dockerfile`，这是一个文本文件，包含了构建 Docker 镜像所需的指令。以下是一个简单的示例流程，展示如何将一个 Spring Boot 应用的 jar 包转换成 Docker 镜像。\n\n​\t1、使用Xftp，把jar上传到指定的目录下。2、创建Dockerfile文件。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226162321338.png)\n\n#### 步骤 1: 准备 Dockerfile\n\n1. **创建 Dockerfile**: 在你的 Java 项目根目录下创建一个名为 `Dockerfile` 的文件（无文件扩展名）。\n2. **编辑 Dockerfile**: 使用文本编辑器打开 `Dockerfile`，并添加以下内容：\n\n```dockerfile\n# 使用官方的Java运行环境作为基础镜像\nFROM openjdk:8-jdk-alpine\nRUN apk add --no-cache fontconfig ttf-dejavu\n\n# 设置时区（可选）\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# 将jar包添加到容器中，注意修改路径以匹配你的jar包位置\nADD jinzijing-hotel-2.0.0.jar app.jar\n\n# 暴露容器内部的端口号，与Spring Boot应用的端口一致\nEXPOSE 84\n\n# 在容器启动时运行jar包\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\n```\n\n#### 步骤 2: 构建 Docker 镜像\n\n在包含 `Dockerfile` 的目录下，打开终端或命令提示符，运行以下命令来构建 Docker 镜像：\n\n```dockerfile\ndocker build -t hotel-service .\n```\n\n- `-t hotel-service` 为新构建的镜像设置了一个名字 `hotel-service`。\n- `.` 指定了 Dockerfile 所在的目录（当前目录）。\n\n#### 步骤 3: 运行 Docker 容器\n\n使用以下命令运行你的应用：\n\n```dockerfile\ndocker run -d -p 84:84 myapplication\n```\n\n- `-d` 表示后台运行容器。\n- `-p 84:84` 将容器的 84 端口映射到宿主机的 84 端口，允许外部访问。\n\n确保你的应用配置为在 84 端口上监听，或者根据需要调整端口映射。\n\n#### 步骤4：测试SpringBoot服务\n\n使用以下命令测试你的应用是否能正常运行\n\n```shell\ncurl http://localhost:84\n```\n\n如果出现`WELCOME`则说明服务正常运行。\n\n","source":"_posts/Java 应用（jar 包）打包成 Docker 镜像.md","raw":"---\ntitle: Java 应用（jar 包）打包成 Docker 镜像\ndate: 2024-06-04 22:32:50\ntags: docker\n---\n### Java 应用（jar 包）打包成 Docker 镜像\n\n​\t要将一个 Java 应用（jar 包）打包成 Docker 镜像，你需要编写一个 `Dockerfile`，这是一个文本文件，包含了构建 Docker 镜像所需的指令。以下是一个简单的示例流程，展示如何将一个 Spring Boot 应用的 jar 包转换成 Docker 镜像。\n\n​\t1、使用Xftp，把jar上传到指定的目录下。2、创建Dockerfile文件。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226162321338.png)\n\n#### 步骤 1: 准备 Dockerfile\n\n1. **创建 Dockerfile**: 在你的 Java 项目根目录下创建一个名为 `Dockerfile` 的文件（无文件扩展名）。\n2. **编辑 Dockerfile**: 使用文本编辑器打开 `Dockerfile`，并添加以下内容：\n\n```dockerfile\n# 使用官方的Java运行环境作为基础镜像\nFROM openjdk:8-jdk-alpine\nRUN apk add --no-cache fontconfig ttf-dejavu\n\n# 设置时区（可选）\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# 将jar包添加到容器中，注意修改路径以匹配你的jar包位置\nADD jinzijing-hotel-2.0.0.jar app.jar\n\n# 暴露容器内部的端口号，与Spring Boot应用的端口一致\nEXPOSE 84\n\n# 在容器启动时运行jar包\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\n```\n\n#### 步骤 2: 构建 Docker 镜像\n\n在包含 `Dockerfile` 的目录下，打开终端或命令提示符，运行以下命令来构建 Docker 镜像：\n\n```dockerfile\ndocker build -t hotel-service .\n```\n\n- `-t hotel-service` 为新构建的镜像设置了一个名字 `hotel-service`。\n- `.` 指定了 Dockerfile 所在的目录（当前目录）。\n\n#### 步骤 3: 运行 Docker 容器\n\n使用以下命令运行你的应用：\n\n```dockerfile\ndocker run -d -p 84:84 myapplication\n```\n\n- `-d` 表示后台运行容器。\n- `-p 84:84` 将容器的 84 端口映射到宿主机的 84 端口，允许外部访问。\n\n确保你的应用配置为在 84 端口上监听，或者根据需要调整端口映射。\n\n#### 步骤4：测试SpringBoot服务\n\n使用以下命令测试你的应用是否能正常运行\n\n```shell\ncurl http://localhost:84\n```\n\n如果出现`WELCOME`则说明服务正常运行。\n\n","slug":"Java 应用（jar 包）打包成 Docker 镜像","published":1,"updated":"2024-07-10T12:13:07.250Z","_id":"clx19s52l0002iotlbaoi3yec","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"Java-应用（jar-包）打包成-Docker-镜像\"><a href=\"#Java-应用（jar-包）打包成-Docker-镜像\" class=\"headerlink\" title=\"Java 应用（jar 包）打包成 Docker 镜像\"></a>Java 应用（jar 包）打包成 Docker 镜像</h3><p>​\t要将一个 Java 应用（jar 包）打包成 Docker 镜像，你需要编写一个 <code>Dockerfile</code>，这是一个文本文件，包含了构建 Docker 镜像所需的指令。以下是一个简单的示例流程，展示如何将一个 Spring Boot 应用的 jar 包转换成 Docker 镜像。</p>\n<p>​\t1、使用Xftp，把jar上传到指定的目录下。2、创建Dockerfile文件。</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226162321338.png\"></p>\n<h4 id=\"步骤-1-准备-Dockerfile\"><a href=\"#步骤-1-准备-Dockerfile\" class=\"headerlink\" title=\"步骤 1: 准备 Dockerfile\"></a>步骤 1: 准备 Dockerfile</h4><ol>\n<li><strong>创建 Dockerfile</strong>: 在你的 Java 项目根目录下创建一个名为 <code>Dockerfile</code> 的文件（无文件扩展名）。</li>\n<li><strong>编辑 Dockerfile</strong>: 使用文本编辑器打开 <code>Dockerfile</code>，并添加以下内容：</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方的Java运行环境作为基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-alpine</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk add --no-cache fontconfig ttf-dejavu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置时区（可选）</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> TZ=Asia/Shanghai</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">ln</span> -snf /usr/share/zoneinfo/<span class=\"variable\">$TZ</span> /etc/localtime &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$TZ</span> &gt; /etc/timezone</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将jar包添加到容器中，注意修改路径以匹配你的jar包位置</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> jinzijing-hotel-2.0.0.jar app.jar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴露容器内部的端口号，与Spring Boot应用的端口一致</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">84</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在容器启动时运行jar包</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>, <span class=\"string\">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-2-构建-Docker-镜像\"><a href=\"#步骤-2-构建-Docker-镜像\" class=\"headerlink\" title=\"步骤 2: 构建 Docker 镜像\"></a>步骤 2: 构建 Docker 镜像</h4><p>在包含 <code>Dockerfile</code> 的目录下，打开终端或命令提示符，运行以下命令来构建 Docker 镜像：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t hotel-service .</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-t hotel-service</code> 为新构建的镜像设置了一个名字 <code>hotel-service</code>。</li>\n<li><code>.</code> 指定了 Dockerfile 所在的目录（当前目录）。</li>\n</ul>\n<h4 id=\"步骤-3-运行-Docker-容器\"><a href=\"#步骤-3-运行-Docker-容器\" class=\"headerlink\" title=\"步骤 3: 运行 Docker 容器\"></a>步骤 3: 运行 Docker 容器</h4><p>使用以下命令运行你的应用：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"language-bash\"> -d -p 84:84 myapplication</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-d</code> 表示后台运行容器。</li>\n<li><code>-p 84:84</code> 将容器的 84 端口映射到宿主机的 84 端口，允许外部访问。</li>\n</ul>\n<p>确保你的应用配置为在 84 端口上监听，或者根据需要调整端口映射。</p>\n<h4 id=\"步骤4：测试SpringBoot服务\"><a href=\"#步骤4：测试SpringBoot服务\" class=\"headerlink\" title=\"步骤4：测试SpringBoot服务\"></a>步骤4：测试SpringBoot服务</h4><p>使用以下命令测试你的应用是否能正常运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:84</span><br></pre></td></tr></table></figure>\n\n<p>如果出现<code>WELCOME</code>则说明服务正常运行。</p>\n","excerpt":"","more":"<h3 id=\"Java-应用（jar-包）打包成-Docker-镜像\"><a href=\"#Java-应用（jar-包）打包成-Docker-镜像\" class=\"headerlink\" title=\"Java 应用（jar 包）打包成 Docker 镜像\"></a>Java 应用（jar 包）打包成 Docker 镜像</h3><p>​\t要将一个 Java 应用（jar 包）打包成 Docker 镜像，你需要编写一个 <code>Dockerfile</code>，这是一个文本文件，包含了构建 Docker 镜像所需的指令。以下是一个简单的示例流程，展示如何将一个 Spring Boot 应用的 jar 包转换成 Docker 镜像。</p>\n<p>​\t1、使用Xftp，把jar上传到指定的目录下。2、创建Dockerfile文件。</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226162321338.png\"></p>\n<h4 id=\"步骤-1-准备-Dockerfile\"><a href=\"#步骤-1-准备-Dockerfile\" class=\"headerlink\" title=\"步骤 1: 准备 Dockerfile\"></a>步骤 1: 准备 Dockerfile</h4><ol>\n<li><strong>创建 Dockerfile</strong>: 在你的 Java 项目根目录下创建一个名为 <code>Dockerfile</code> 的文件（无文件扩展名）。</li>\n<li><strong>编辑 Dockerfile</strong>: 使用文本编辑器打开 <code>Dockerfile</code>，并添加以下内容：</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方的Java运行环境作为基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-alpine</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk add --no-cache fontconfig ttf-dejavu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置时区（可选）</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> TZ=Asia/Shanghai</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">ln</span> -snf /usr/share/zoneinfo/<span class=\"variable\">$TZ</span> /etc/localtime &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$TZ</span> &gt; /etc/timezone</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将jar包添加到容器中，注意修改路径以匹配你的jar包位置</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> jinzijing-hotel-2.0.0.jar app.jar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴露容器内部的端口号，与Spring Boot应用的端口一致</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">84</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在容器启动时运行jar包</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>, <span class=\"string\">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-2-构建-Docker-镜像\"><a href=\"#步骤-2-构建-Docker-镜像\" class=\"headerlink\" title=\"步骤 2: 构建 Docker 镜像\"></a>步骤 2: 构建 Docker 镜像</h4><p>在包含 <code>Dockerfile</code> 的目录下，打开终端或命令提示符，运行以下命令来构建 Docker 镜像：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t hotel-service .</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-t hotel-service</code> 为新构建的镜像设置了一个名字 <code>hotel-service</code>。</li>\n<li><code>.</code> 指定了 Dockerfile 所在的目录（当前目录）。</li>\n</ul>\n<h4 id=\"步骤-3-运行-Docker-容器\"><a href=\"#步骤-3-运行-Docker-容器\" class=\"headerlink\" title=\"步骤 3: 运行 Docker 容器\"></a>步骤 3: 运行 Docker 容器</h4><p>使用以下命令运行你的应用：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"language-bash\"> -d -p 84:84 myapplication</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-d</code> 表示后台运行容器。</li>\n<li><code>-p 84:84</code> 将容器的 84 端口映射到宿主机的 84 端口，允许外部访问。</li>\n</ul>\n<p>确保你的应用配置为在 84 端口上监听，或者根据需要调整端口映射。</p>\n<h4 id=\"步骤4：测试SpringBoot服务\"><a href=\"#步骤4：测试SpringBoot服务\" class=\"headerlink\" title=\"步骤4：测试SpringBoot服务\"></a>步骤4：测试SpringBoot服务</h4><p>使用以下命令测试你的应用是否能正常运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:84</span><br></pre></td></tr></table></figure>\n\n<p>如果出现<code>WELCOME</code>则说明服务正常运行。</p>\n"},{"title":"Docker操作命令练习","date":"2024-06-04T14:32:50.000Z","_content":"### Docker操作命令\n\n#### 一、简单的`hello-world`示例\n\n#### 步骤 1: 拉取 `hello-world` 镜像\n\n运行以下命令以拉取最新的 `hello-world` 镜像：\n\n```shell\ndocker pull hello-world\n```\n\n#### 步骤 2: 运行 `hello-world` 容器并命名\n\n运行以下命令启动一个 `hello-world` 容器，并给它命名为 `my-hello-world`：\n\n```shell\ndocker run --name my-hello-world hello-world\n```\n\n这个命令会启动一个 `hello-world` 容器，容器运行后会显示一条欢迎消息然后退出。因为 `hello-world` 容器是为了演示目的而设计，它会立即退出并不会长时间运行。\n\n#### 二、使用 `my-redis` 容器作为示例\n\n因为我已经拉取了`redis`的镜像，并且已经成功的运行了`redis`容器，命名为`my-redis`，以下使用 `my-redis` 容器作为示例，提供更多的 Docker 命令。\n\n#### 启动已停止的容器\n\n```shell\ndocker start my-redis\n```\n\n#### 停止容器\n\n```shell\ndocker stop my-redis\n```\n\n#### 重启容器\n\n```shell\ndocker restart my-redis\n```\n\n#### 查看容器日志\n\n```shell\ndocker logs my-redis\n```\n\n#### 查看容器的实时日志\n\n```shell\ndocker logs -f my-redis\n```\n\n#### 检查容器的详细信息\n\n```shell\ndocker inspect my-redis\n```\n\n#### 查看容器内部的进程\n\n```shell\ndocker top my-redis\n```\n\n#### 查看容器的资源使用情况（如 CPU、内存）\n\n```shell\ndocker stats my-redis\n```\n\n#### 进入容器内部的命令\n\n假设你想在 `my-redis` 容器内部：\n\n```shell\ndocker exec -it my-redis /bin/bash (/bin/sh)\n```\n\n执行 `Redis` 命令行界面：终端输入`redis-cli`，进入命令行界面。\n\n#### 复制文件到/从容器\n\n假设你想从你的主机复制一个名为 `dump.rdb` 的文件到 `my-redis` 容器的 `/data` 目录中：\n\n```shell\ndocker cp dump.rdb my-redis:/data/dump.rdb\n```\n\n反向操作，从容器复制文件到主机：\n\n```shell\ndocker cp my-redis:/data/dump.rdb ./dump.rdb\n```\n\n#### 三、使用`hotel-service`作为例子。\n\n#### 查看特定数量的尾部日志行并持续更新\n\n可以结合使用 `-n`（或 `--tail`）选项和 `-f` 选项。例如，查看最后50行日志并持续更新：\n\n```shell\ndocker logs --tail 50 -f hotel-service\n```\n\n#### 进入`hotel-service`容器\n\n```shell\ndocker exec -it my-redis /bin/sh\n```\n\n查看日志，我的日志目录和系统的目录是同级的，（根据实际情况来定，具体还是得看自己的日志目录配在什么地方）。\n\n```shell\ncd app-log/\n```\n\n查看错误日志，\n\n要在 Linux 中查看文件末尾的 100 行，您可以使用 `tail` 命令配合 `-n` 选项，如下所示：\n\n```shell\ntail -n 100 syslog\n```\n\n或者直接输入文件的路径。例如，如果您想查看名为 `/var/log/syslog` 的文件的末尾 100 行，命令将是：\n\n```shell\ntail -n 100 /var/log/syslog\n```\n\n","source":"_posts/Docker操作命令.md","raw":"---\ntitle: Docker操作命令练习\ndate: 2024-06-04 22:32:50\ntags: docker\n---\n### Docker操作命令\n\n#### 一、简单的`hello-world`示例\n\n#### 步骤 1: 拉取 `hello-world` 镜像\n\n运行以下命令以拉取最新的 `hello-world` 镜像：\n\n```shell\ndocker pull hello-world\n```\n\n#### 步骤 2: 运行 `hello-world` 容器并命名\n\n运行以下命令启动一个 `hello-world` 容器，并给它命名为 `my-hello-world`：\n\n```shell\ndocker run --name my-hello-world hello-world\n```\n\n这个命令会启动一个 `hello-world` 容器，容器运行后会显示一条欢迎消息然后退出。因为 `hello-world` 容器是为了演示目的而设计，它会立即退出并不会长时间运行。\n\n#### 二、使用 `my-redis` 容器作为示例\n\n因为我已经拉取了`redis`的镜像，并且已经成功的运行了`redis`容器，命名为`my-redis`，以下使用 `my-redis` 容器作为示例，提供更多的 Docker 命令。\n\n#### 启动已停止的容器\n\n```shell\ndocker start my-redis\n```\n\n#### 停止容器\n\n```shell\ndocker stop my-redis\n```\n\n#### 重启容器\n\n```shell\ndocker restart my-redis\n```\n\n#### 查看容器日志\n\n```shell\ndocker logs my-redis\n```\n\n#### 查看容器的实时日志\n\n```shell\ndocker logs -f my-redis\n```\n\n#### 检查容器的详细信息\n\n```shell\ndocker inspect my-redis\n```\n\n#### 查看容器内部的进程\n\n```shell\ndocker top my-redis\n```\n\n#### 查看容器的资源使用情况（如 CPU、内存）\n\n```shell\ndocker stats my-redis\n```\n\n#### 进入容器内部的命令\n\n假设你想在 `my-redis` 容器内部：\n\n```shell\ndocker exec -it my-redis /bin/bash (/bin/sh)\n```\n\n执行 `Redis` 命令行界面：终端输入`redis-cli`，进入命令行界面。\n\n#### 复制文件到/从容器\n\n假设你想从你的主机复制一个名为 `dump.rdb` 的文件到 `my-redis` 容器的 `/data` 目录中：\n\n```shell\ndocker cp dump.rdb my-redis:/data/dump.rdb\n```\n\n反向操作，从容器复制文件到主机：\n\n```shell\ndocker cp my-redis:/data/dump.rdb ./dump.rdb\n```\n\n#### 三、使用`hotel-service`作为例子。\n\n#### 查看特定数量的尾部日志行并持续更新\n\n可以结合使用 `-n`（或 `--tail`）选项和 `-f` 选项。例如，查看最后50行日志并持续更新：\n\n```shell\ndocker logs --tail 50 -f hotel-service\n```\n\n#### 进入`hotel-service`容器\n\n```shell\ndocker exec -it my-redis /bin/sh\n```\n\n查看日志，我的日志目录和系统的目录是同级的，（根据实际情况来定，具体还是得看自己的日志目录配在什么地方）。\n\n```shell\ncd app-log/\n```\n\n查看错误日志，\n\n要在 Linux 中查看文件末尾的 100 行，您可以使用 `tail` 命令配合 `-n` 选项，如下所示：\n\n```shell\ntail -n 100 syslog\n```\n\n或者直接输入文件的路径。例如，如果您想查看名为 `/var/log/syslog` 的文件的末尾 100 行，命令将是：\n\n```shell\ntail -n 100 /var/log/syslog\n```\n\n","slug":"Docker操作命令","published":1,"updated":"2024-07-10T12:12:30.176Z","_id":"clx19s52m0003iotl9q5408l6","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"Docker操作命令\"><a href=\"#Docker操作命令\" class=\"headerlink\" title=\"Docker操作命令\"></a>Docker操作命令</h3><h4 id=\"一、简单的hello-world示例\"><a href=\"#一、简单的hello-world示例\" class=\"headerlink\" title=\"一、简单的hello-world示例\"></a>一、简单的<code>hello-world</code>示例</h4><h4 id=\"步骤-1-拉取-hello-world-镜像\"><a href=\"#步骤-1-拉取-hello-world-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 hello-world 镜像\"></a>步骤 1: 拉取 <code>hello-world</code> 镜像</h4><p>运行以下命令以拉取最新的 <code>hello-world</code> 镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-2-运行-hello-world-容器并命名\"><a href=\"#步骤-2-运行-hello-world-容器并命名\" class=\"headerlink\" title=\"步骤 2: 运行 hello-world 容器并命名\"></a>步骤 2: 运行 <code>hello-world</code> 容器并命名</h4><p>运行以下命令启动一个 <code>hello-world</code> 容器，并给它命名为 <code>my-hello-world</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-hello-world hello-world</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会启动一个 <code>hello-world</code> 容器，容器运行后会显示一条欢迎消息然后退出。因为 <code>hello-world</code> 容器是为了演示目的而设计，它会立即退出并不会长时间运行。</p>\n<h4 id=\"二、使用-my-redis-容器作为示例\"><a href=\"#二、使用-my-redis-容器作为示例\" class=\"headerlink\" title=\"二、使用 my-redis 容器作为示例\"></a>二、使用 <code>my-redis</code> 容器作为示例</h4><p>因为我已经拉取了<code>redis</code>的镜像，并且已经成功的运行了<code>redis</code>容器，命名为<code>my-redis</code>，以下使用 <code>my-redis</code> 容器作为示例，提供更多的 Docker 命令。</p>\n<h4 id=\"启动已停止的容器\"><a href=\"#启动已停止的容器\" class=\"headerlink\" title=\"启动已停止的容器\"></a>启动已停止的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启容器\"><a href=\"#重启容器\" class=\"headerlink\" title=\"重启容器\"></a>重启容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器日志\"><a href=\"#查看容器日志\" class=\"headerlink\" title=\"查看容器日志\"></a>查看容器日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器的实时日志\"><a href=\"#查看容器的实时日志\" class=\"headerlink\" title=\"查看容器的实时日志\"></a>查看容器的实时日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查容器的详细信息\"><a href=\"#检查容器的详细信息\" class=\"headerlink\" title=\"检查容器的详细信息\"></a>检查容器的详细信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器内部的进程\"><a href=\"#查看容器内部的进程\" class=\"headerlink\" title=\"查看容器内部的进程\"></a>查看容器内部的进程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器的资源使用情况（如-CPU、内存）\"><a href=\"#查看容器的资源使用情况（如-CPU、内存）\" class=\"headerlink\" title=\"查看容器的资源使用情况（如 CPU、内存）\"></a>查看容器的资源使用情况（如 CPU、内存）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入容器内部的命令\"><a href=\"#进入容器内部的命令\" class=\"headerlink\" title=\"进入容器内部的命令\"></a>进入容器内部的命令</h4><p>假设你想在 <code>my-redis</code> 容器内部：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it my-redis /bin/bash (/bin/sh)</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>Redis</code> 命令行界面：终端输入<code>redis-cli</code>，进入命令行界面。</p>\n<h4 id=\"复制文件到-从容器\"><a href=\"#复制文件到-从容器\" class=\"headerlink\" title=\"复制文件到&#x2F;从容器\"></a>复制文件到&#x2F;从容器</h4><p>假设你想从你的主机复制一个名为 <code>dump.rdb</code> 的文件到 <code>my-redis</code> 容器的 <code>/data</code> 目录中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp dump.rdb my-redis:/data/dump.rdb</span><br></pre></td></tr></table></figure>\n\n<p>反向操作，从容器复制文件到主机：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp my-redis:/data/dump.rdb ./dump.rdb</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、使用hotel-service作为例子。\"><a href=\"#三、使用hotel-service作为例子。\" class=\"headerlink\" title=\"三、使用hotel-service作为例子。\"></a>三、使用<code>hotel-service</code>作为例子。</h4><h4 id=\"查看特定数量的尾部日志行并持续更新\"><a href=\"#查看特定数量的尾部日志行并持续更新\" class=\"headerlink\" title=\"查看特定数量的尾部日志行并持续更新\"></a>查看特定数量的尾部日志行并持续更新</h4><p>可以结合使用 <code>-n</code>（或 <code>--tail</code>）选项和 <code>-f</code> 选项。例如，查看最后50行日志并持续更新：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs --tail 50 -f hotel-service</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入hotel-service容器\"><a href=\"#进入hotel-service容器\" class=\"headerlink\" title=\"进入hotel-service容器\"></a>进入<code>hotel-service</code>容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it my-redis /bin/sh</span><br></pre></td></tr></table></figure>\n\n<p>查看日志，我的日志目录和系统的目录是同级的，（根据实际情况来定，具体还是得看自己的日志目录配在什么地方）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd app-log/</span><br></pre></td></tr></table></figure>\n\n<p>查看错误日志，</p>\n<p>要在 Linux 中查看文件末尾的 100 行，您可以使用 <code>tail</code> 命令配合 <code>-n</code> 选项，如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 100 syslog</span><br></pre></td></tr></table></figure>\n\n<p>或者直接输入文件的路径。例如，如果您想查看名为 <code>/var/log/syslog</code> 的文件的末尾 100 行，命令将是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 100 /var/log/syslog</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h3 id=\"Docker操作命令\"><a href=\"#Docker操作命令\" class=\"headerlink\" title=\"Docker操作命令\"></a>Docker操作命令</h3><h4 id=\"一、简单的hello-world示例\"><a href=\"#一、简单的hello-world示例\" class=\"headerlink\" title=\"一、简单的hello-world示例\"></a>一、简单的<code>hello-world</code>示例</h4><h4 id=\"步骤-1-拉取-hello-world-镜像\"><a href=\"#步骤-1-拉取-hello-world-镜像\" class=\"headerlink\" title=\"步骤 1: 拉取 hello-world 镜像\"></a>步骤 1: 拉取 <code>hello-world</code> 镜像</h4><p>运行以下命令以拉取最新的 <code>hello-world</code> 镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-2-运行-hello-world-容器并命名\"><a href=\"#步骤-2-运行-hello-world-容器并命名\" class=\"headerlink\" title=\"步骤 2: 运行 hello-world 容器并命名\"></a>步骤 2: 运行 <code>hello-world</code> 容器并命名</h4><p>运行以下命令启动一个 <code>hello-world</code> 容器，并给它命名为 <code>my-hello-world</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-hello-world hello-world</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会启动一个 <code>hello-world</code> 容器，容器运行后会显示一条欢迎消息然后退出。因为 <code>hello-world</code> 容器是为了演示目的而设计，它会立即退出并不会长时间运行。</p>\n<h4 id=\"二、使用-my-redis-容器作为示例\"><a href=\"#二、使用-my-redis-容器作为示例\" class=\"headerlink\" title=\"二、使用 my-redis 容器作为示例\"></a>二、使用 <code>my-redis</code> 容器作为示例</h4><p>因为我已经拉取了<code>redis</code>的镜像，并且已经成功的运行了<code>redis</code>容器，命名为<code>my-redis</code>，以下使用 <code>my-redis</code> 容器作为示例，提供更多的 Docker 命令。</p>\n<h4 id=\"启动已停止的容器\"><a href=\"#启动已停止的容器\" class=\"headerlink\" title=\"启动已停止的容器\"></a>启动已停止的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启容器\"><a href=\"#重启容器\" class=\"headerlink\" title=\"重启容器\"></a>重启容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器日志\"><a href=\"#查看容器日志\" class=\"headerlink\" title=\"查看容器日志\"></a>查看容器日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器的实时日志\"><a href=\"#查看容器的实时日志\" class=\"headerlink\" title=\"查看容器的实时日志\"></a>查看容器的实时日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查容器的详细信息\"><a href=\"#检查容器的详细信息\" class=\"headerlink\" title=\"检查容器的详细信息\"></a>检查容器的详细信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器内部的进程\"><a href=\"#查看容器内部的进程\" class=\"headerlink\" title=\"查看容器内部的进程\"></a>查看容器内部的进程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器的资源使用情况（如-CPU、内存）\"><a href=\"#查看容器的资源使用情况（如-CPU、内存）\" class=\"headerlink\" title=\"查看容器的资源使用情况（如 CPU、内存）\"></a>查看容器的资源使用情况（如 CPU、内存）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats my-redis</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入容器内部的命令\"><a href=\"#进入容器内部的命令\" class=\"headerlink\" title=\"进入容器内部的命令\"></a>进入容器内部的命令</h4><p>假设你想在 <code>my-redis</code> 容器内部：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it my-redis /bin/bash (/bin/sh)</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>Redis</code> 命令行界面：终端输入<code>redis-cli</code>，进入命令行界面。</p>\n<h4 id=\"复制文件到-从容器\"><a href=\"#复制文件到-从容器\" class=\"headerlink\" title=\"复制文件到&#x2F;从容器\"></a>复制文件到&#x2F;从容器</h4><p>假设你想从你的主机复制一个名为 <code>dump.rdb</code> 的文件到 <code>my-redis</code> 容器的 <code>/data</code> 目录中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp dump.rdb my-redis:/data/dump.rdb</span><br></pre></td></tr></table></figure>\n\n<p>反向操作，从容器复制文件到主机：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp my-redis:/data/dump.rdb ./dump.rdb</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、使用hotel-service作为例子。\"><a href=\"#三、使用hotel-service作为例子。\" class=\"headerlink\" title=\"三、使用hotel-service作为例子。\"></a>三、使用<code>hotel-service</code>作为例子。</h4><h4 id=\"查看特定数量的尾部日志行并持续更新\"><a href=\"#查看特定数量的尾部日志行并持续更新\" class=\"headerlink\" title=\"查看特定数量的尾部日志行并持续更新\"></a>查看特定数量的尾部日志行并持续更新</h4><p>可以结合使用 <code>-n</code>（或 <code>--tail</code>）选项和 <code>-f</code> 选项。例如，查看最后50行日志并持续更新：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs --tail 50 -f hotel-service</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入hotel-service容器\"><a href=\"#进入hotel-service容器\" class=\"headerlink\" title=\"进入hotel-service容器\"></a>进入<code>hotel-service</code>容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it my-redis /bin/sh</span><br></pre></td></tr></table></figure>\n\n<p>查看日志，我的日志目录和系统的目录是同级的，（根据实际情况来定，具体还是得看自己的日志目录配在什么地方）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd app-log/</span><br></pre></td></tr></table></figure>\n\n<p>查看错误日志，</p>\n<p>要在 Linux 中查看文件末尾的 100 行，您可以使用 <code>tail</code> 命令配合 <code>-n</code> 选项，如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 100 syslog</span><br></pre></td></tr></table></figure>\n\n<p>或者直接输入文件的路径。例如，如果您想查看名为 <code>/var/log/syslog</code> 的文件的末尾 100 行，命令将是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 100 /var/log/syslog</span><br></pre></td></tr></table></figure>\n\n"},{"title":"为qinyunjian.cloud安装SSL证书","date":"2024-06-04T14:32:50.000Z","_content":"### 安装SSL证书。\n\n​\t前置条件，我现在有一个域名（qinyunjian.cloud），默认使用的是http协议，现在我需要为这个域名安装证书，\n\n#### 步骤 1: 安装 Certbot\n\nCertbot 是 Let's Encrypt 的官方客户端，用于自动化安装和更新 SSL 证书。\n\n1. **启用 EPEL 仓库**：(在安装docker的时候已经安装EPEL 仓库，不必重复安装)\n\n   ```shell\n   sudo yum install epel-release\n   ```\n\n2. **安装 Certbot**：\n\n   对于Nginx：\n\n   ```shell\n   sudo yum -y install certbot-nginx\n   ```\n\n#### 步骤 2: 获取和安装证书\n\n使用 Certbot 为您的域名获取和安装证书：\n\n- Nginx\n\n  ```shell\n  sudo certbot --nginx -d qinyunjian.cloud -d www.qinyunjian.cloud\n  ```\n\n- 如果 Certbot 成功安装证书，它将自动修改您的 Nginx 配置文件以使用 SSL，如果说运行了这一步，但是`nginx.conf`文件没有能被正确的更改，则需要手动配置`nginx.conf`。\n\n#### 步骤 3: 自动续订证书\n\nLet's Encrypt 证书有效期为 90 天，可以通过 Certbot 自动续订：\n\n- 测试自动续订\n\n  ```shell\n  sudo certbot renew --dry-run\n  ```\n\n- 如果测试成功，Certbot 将自动设置定时任务来续订证书。\n\n#### 步骤 4: 确认 HTTPS 生效\n\n在完成上述步骤后，您可以通过访问 `https://qinyunjian.cloud` 来确认 SSL 证书是否成功安装。浏览器应该显示一个锁图标，表示连接是安全的。\n\n#### 手动配置`nginx.conf`\n\n​\t如果 Certbot 运行失败，没有自动修改 Nginx 的配置文件来启用 HTTPS 和配置 HTTP 到 HTTPS 的重定向，您可以手动编辑 Nginx 的配置文件来实现这些功能。以下是一个基本的示例，展示如何为您的域名 `qinyunjian.cloud` 配置 SSL 证书和重定向。\n\n#### 步骤 1: 打开您的 Nginx 配置文件\n\n对于大多数 Nginx 安装来说，配置文件通常位于 `/etc/nginx/nginx.conf` 或者 `/etc/nginx/sites-available/` 目录下的某个文件。如果您使用的是后者，那么您的配置可能位于一个特定的域名文件中，例如 `/etc/nginx/sites-available/qinyunjian.cloud.conf`。\n\n#### 步骤 2: 配置 SSL\n\n以下是一个配置 SSL 的示例。请确保您已经通过 Certbot 获取了证书，并知道证书和私钥文件的路径。\n\n```shell\nserver {\n    listen 80;\n    server_name qinyunjian.cloud www.qinyunjian.cloud;\n\n    # 重定向所有 HTTP 请求到 HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name qinyunjian.cloud www.qinyunjian.cloud;\n\n    # 指定 SSL 证书和密钥的路径\n    ssl_certificate /etc/letsencrypt/live/qinyunjian.cloud/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/qinyunjian.cloud/privkey.pem;\n\n    # 其他 SSL 设置...\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 5m;\n    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';\n    ssl_prefer_server_ciphers on;\n\n    # 配置网站根目录\n    root /var/www/qinyunjian.cloud/html;\n\n    # 其他配置...\n}\n```\n\n#### 步骤 3: 检查 Nginx 配置并重启服务\n\n在编辑配置文件之后，您应该检查配置是否正确：\n\n```shell\nsudo nginx -t\n```\n\n如果显示配置文件语法正确，那么您可以重启 Nginx 以应用更改：\n\n```shell\nsudo systemctl restart nginx\n```","source":"_posts/为qinyunjian.cloud安装SSL证书.md","raw":"---\ntitle: 为qinyunjian.cloud安装SSL证书\ndate: 2024-06-04 22:32:50\ntags: nginx\n---\n### 安装SSL证书。\n\n​\t前置条件，我现在有一个域名（qinyunjian.cloud），默认使用的是http协议，现在我需要为这个域名安装证书，\n\n#### 步骤 1: 安装 Certbot\n\nCertbot 是 Let's Encrypt 的官方客户端，用于自动化安装和更新 SSL 证书。\n\n1. **启用 EPEL 仓库**：(在安装docker的时候已经安装EPEL 仓库，不必重复安装)\n\n   ```shell\n   sudo yum install epel-release\n   ```\n\n2. **安装 Certbot**：\n\n   对于Nginx：\n\n   ```shell\n   sudo yum -y install certbot-nginx\n   ```\n\n#### 步骤 2: 获取和安装证书\n\n使用 Certbot 为您的域名获取和安装证书：\n\n- Nginx\n\n  ```shell\n  sudo certbot --nginx -d qinyunjian.cloud -d www.qinyunjian.cloud\n  ```\n\n- 如果 Certbot 成功安装证书，它将自动修改您的 Nginx 配置文件以使用 SSL，如果说运行了这一步，但是`nginx.conf`文件没有能被正确的更改，则需要手动配置`nginx.conf`。\n\n#### 步骤 3: 自动续订证书\n\nLet's Encrypt 证书有效期为 90 天，可以通过 Certbot 自动续订：\n\n- 测试自动续订\n\n  ```shell\n  sudo certbot renew --dry-run\n  ```\n\n- 如果测试成功，Certbot 将自动设置定时任务来续订证书。\n\n#### 步骤 4: 确认 HTTPS 生效\n\n在完成上述步骤后，您可以通过访问 `https://qinyunjian.cloud` 来确认 SSL 证书是否成功安装。浏览器应该显示一个锁图标，表示连接是安全的。\n\n#### 手动配置`nginx.conf`\n\n​\t如果 Certbot 运行失败，没有自动修改 Nginx 的配置文件来启用 HTTPS 和配置 HTTP 到 HTTPS 的重定向，您可以手动编辑 Nginx 的配置文件来实现这些功能。以下是一个基本的示例，展示如何为您的域名 `qinyunjian.cloud` 配置 SSL 证书和重定向。\n\n#### 步骤 1: 打开您的 Nginx 配置文件\n\n对于大多数 Nginx 安装来说，配置文件通常位于 `/etc/nginx/nginx.conf` 或者 `/etc/nginx/sites-available/` 目录下的某个文件。如果您使用的是后者，那么您的配置可能位于一个特定的域名文件中，例如 `/etc/nginx/sites-available/qinyunjian.cloud.conf`。\n\n#### 步骤 2: 配置 SSL\n\n以下是一个配置 SSL 的示例。请确保您已经通过 Certbot 获取了证书，并知道证书和私钥文件的路径。\n\n```shell\nserver {\n    listen 80;\n    server_name qinyunjian.cloud www.qinyunjian.cloud;\n\n    # 重定向所有 HTTP 请求到 HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name qinyunjian.cloud www.qinyunjian.cloud;\n\n    # 指定 SSL 证书和密钥的路径\n    ssl_certificate /etc/letsencrypt/live/qinyunjian.cloud/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/qinyunjian.cloud/privkey.pem;\n\n    # 其他 SSL 设置...\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 5m;\n    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';\n    ssl_prefer_server_ciphers on;\n\n    # 配置网站根目录\n    root /var/www/qinyunjian.cloud/html;\n\n    # 其他配置...\n}\n```\n\n#### 步骤 3: 检查 Nginx 配置并重启服务\n\n在编辑配置文件之后，您应该检查配置是否正确：\n\n```shell\nsudo nginx -t\n```\n\n如果显示配置文件语法正确，那么您可以重启 Nginx 以应用更改：\n\n```shell\nsudo systemctl restart nginx\n```","slug":"为qinyunjian.cloud安装SSL证书","published":1,"updated":"2024-07-10T12:11:47.585Z","_id":"clx19s52n0004iotl8bnafz91","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"安装SSL证书。\"><a href=\"#安装SSL证书。\" class=\"headerlink\" title=\"安装SSL证书。\"></a>安装SSL证书。</h3><p>​\t前置条件，我现在有一个域名（qinyunjian.cloud），默认使用的是http协议，现在我需要为这个域名安装证书，</p>\n<h4 id=\"步骤-1-安装-Certbot\"><a href=\"#步骤-1-安装-Certbot\" class=\"headerlink\" title=\"步骤 1: 安装 Certbot\"></a>步骤 1: 安装 Certbot</h4><p>Certbot 是 Let’s Encrypt 的官方客户端，用于自动化安装和更新 SSL 证书。</p>\n<ol>\n<li><p><strong>启用 EPEL 仓库</strong>：(在安装docker的时候已经安装EPEL 仓库，不必重复安装)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装 Certbot</strong>：</p>\n<p>对于Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install certbot-nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"步骤-2-获取和安装证书\"><a href=\"#步骤-2-获取和安装证书\" class=\"headerlink\" title=\"步骤 2: 获取和安装证书\"></a>步骤 2: 获取和安装证书</h4><p>使用 Certbot 为您的域名获取和安装证书：</p>\n<ul>\n<li><p>Nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d qinyunjian.cloud -d www.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 Certbot 成功安装证书，它将自动修改您的 Nginx 配置文件以使用 SSL，如果说运行了这一步，但是<code>nginx.conf</code>文件没有能被正确的更改，则需要手动配置<code>nginx.conf</code>。</p>\n</li>\n</ul>\n<h4 id=\"步骤-3-自动续订证书\"><a href=\"#步骤-3-自动续订证书\" class=\"headerlink\" title=\"步骤 3: 自动续订证书\"></a>步骤 3: 自动续订证书</h4><p>Let’s Encrypt 证书有效期为 90 天，可以通过 Certbot 自动续订：</p>\n<ul>\n<li><p>测试自动续订</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果测试成功，Certbot 将自动设置定时任务来续订证书。</p>\n</li>\n</ul>\n<h4 id=\"步骤-4-确认-HTTPS-生效\"><a href=\"#步骤-4-确认-HTTPS-生效\" class=\"headerlink\" title=\"步骤 4: 确认 HTTPS 生效\"></a>步骤 4: 确认 HTTPS 生效</h4><p>在完成上述步骤后，您可以通过访问 <code>https://qinyunjian.cloud</code> 来确认 SSL 证书是否成功安装。浏览器应该显示一个锁图标，表示连接是安全的。</p>\n<h4 id=\"手动配置nginx-conf\"><a href=\"#手动配置nginx-conf\" class=\"headerlink\" title=\"手动配置nginx.conf\"></a>手动配置<code>nginx.conf</code></h4><p>​\t如果 Certbot 运行失败，没有自动修改 Nginx 的配置文件来启用 HTTPS 和配置 HTTP 到 HTTPS 的重定向，您可以手动编辑 Nginx 的配置文件来实现这些功能。以下是一个基本的示例，展示如何为您的域名 <code>qinyunjian.cloud</code> 配置 SSL 证书和重定向。</p>\n<h4 id=\"步骤-1-打开您的-Nginx-配置文件\"><a href=\"#步骤-1-打开您的-Nginx-配置文件\" class=\"headerlink\" title=\"步骤 1: 打开您的 Nginx 配置文件\"></a>步骤 1: 打开您的 Nginx 配置文件</h4><p>对于大多数 Nginx 安装来说，配置文件通常位于 <code>/etc/nginx/nginx.conf</code> 或者 <code>/etc/nginx/sites-available/</code> 目录下的某个文件。如果您使用的是后者，那么您的配置可能位于一个特定的域名文件中，例如 <code>/etc/nginx/sites-available/qinyunjian.cloud.conf</code>。</p>\n<h4 id=\"步骤-2-配置-SSL\"><a href=\"#步骤-2-配置-SSL\" class=\"headerlink\" title=\"步骤 2: 配置 SSL\"></a>步骤 2: 配置 SSL</h4><p>以下是一个配置 SSL 的示例。请确保您已经通过 Certbot 获取了证书，并知道证书和私钥文件的路径。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name qinyunjian.cloud www.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 重定向所有 HTTP 请求到 HTTPS</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    server_name qinyunjian.cloud www.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 指定 SSL 证书和密钥的路径</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/qinyunjian.cloud/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/qinyunjian.cloud/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 其他 SSL 设置...</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers &#x27;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256&#x27;;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 配置网站根目录</span><br><span class=\"line\">    root /var/www/qinyunjian.cloud/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 其他配置...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-3-检查-Nginx-配置并重启服务\"><a href=\"#步骤-3-检查-Nginx-配置并重启服务\" class=\"headerlink\" title=\"步骤 3: 检查 Nginx 配置并重启服务\"></a>步骤 3: 检查 Nginx 配置并重启服务</h4><p>在编辑配置文件之后，您应该检查配置是否正确：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果显示配置文件语法正确，那么您可以重启 Nginx 以应用更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"安装SSL证书。\"><a href=\"#安装SSL证书。\" class=\"headerlink\" title=\"安装SSL证书。\"></a>安装SSL证书。</h3><p>​\t前置条件，我现在有一个域名（qinyunjian.cloud），默认使用的是http协议，现在我需要为这个域名安装证书，</p>\n<h4 id=\"步骤-1-安装-Certbot\"><a href=\"#步骤-1-安装-Certbot\" class=\"headerlink\" title=\"步骤 1: 安装 Certbot\"></a>步骤 1: 安装 Certbot</h4><p>Certbot 是 Let’s Encrypt 的官方客户端，用于自动化安装和更新 SSL 证书。</p>\n<ol>\n<li><p><strong>启用 EPEL 仓库</strong>：(在安装docker的时候已经安装EPEL 仓库，不必重复安装)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装 Certbot</strong>：</p>\n<p>对于Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install certbot-nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"步骤-2-获取和安装证书\"><a href=\"#步骤-2-获取和安装证书\" class=\"headerlink\" title=\"步骤 2: 获取和安装证书\"></a>步骤 2: 获取和安装证书</h4><p>使用 Certbot 为您的域名获取和安装证书：</p>\n<ul>\n<li><p>Nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d qinyunjian.cloud -d www.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 Certbot 成功安装证书，它将自动修改您的 Nginx 配置文件以使用 SSL，如果说运行了这一步，但是<code>nginx.conf</code>文件没有能被正确的更改，则需要手动配置<code>nginx.conf</code>。</p>\n</li>\n</ul>\n<h4 id=\"步骤-3-自动续订证书\"><a href=\"#步骤-3-自动续订证书\" class=\"headerlink\" title=\"步骤 3: 自动续订证书\"></a>步骤 3: 自动续订证书</h4><p>Let’s Encrypt 证书有效期为 90 天，可以通过 Certbot 自动续订：</p>\n<ul>\n<li><p>测试自动续订</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果测试成功，Certbot 将自动设置定时任务来续订证书。</p>\n</li>\n</ul>\n<h4 id=\"步骤-4-确认-HTTPS-生效\"><a href=\"#步骤-4-确认-HTTPS-生效\" class=\"headerlink\" title=\"步骤 4: 确认 HTTPS 生效\"></a>步骤 4: 确认 HTTPS 生效</h4><p>在完成上述步骤后，您可以通过访问 <code>https://qinyunjian.cloud</code> 来确认 SSL 证书是否成功安装。浏览器应该显示一个锁图标，表示连接是安全的。</p>\n<h4 id=\"手动配置nginx-conf\"><a href=\"#手动配置nginx-conf\" class=\"headerlink\" title=\"手动配置nginx.conf\"></a>手动配置<code>nginx.conf</code></h4><p>​\t如果 Certbot 运行失败，没有自动修改 Nginx 的配置文件来启用 HTTPS 和配置 HTTP 到 HTTPS 的重定向，您可以手动编辑 Nginx 的配置文件来实现这些功能。以下是一个基本的示例，展示如何为您的域名 <code>qinyunjian.cloud</code> 配置 SSL 证书和重定向。</p>\n<h4 id=\"步骤-1-打开您的-Nginx-配置文件\"><a href=\"#步骤-1-打开您的-Nginx-配置文件\" class=\"headerlink\" title=\"步骤 1: 打开您的 Nginx 配置文件\"></a>步骤 1: 打开您的 Nginx 配置文件</h4><p>对于大多数 Nginx 安装来说，配置文件通常位于 <code>/etc/nginx/nginx.conf</code> 或者 <code>/etc/nginx/sites-available/</code> 目录下的某个文件。如果您使用的是后者，那么您的配置可能位于一个特定的域名文件中，例如 <code>/etc/nginx/sites-available/qinyunjian.cloud.conf</code>。</p>\n<h4 id=\"步骤-2-配置-SSL\"><a href=\"#步骤-2-配置-SSL\" class=\"headerlink\" title=\"步骤 2: 配置 SSL\"></a>步骤 2: 配置 SSL</h4><p>以下是一个配置 SSL 的示例。请确保您已经通过 Certbot 获取了证书，并知道证书和私钥文件的路径。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name qinyunjian.cloud www.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 重定向所有 HTTP 请求到 HTTPS</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    server_name qinyunjian.cloud www.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 指定 SSL 证书和密钥的路径</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/qinyunjian.cloud/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/qinyunjian.cloud/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 其他 SSL 设置...</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers &#x27;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256&#x27;;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 配置网站根目录</span><br><span class=\"line\">    root /var/www/qinyunjian.cloud/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 其他配置...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤-3-检查-Nginx-配置并重启服务\"><a href=\"#步骤-3-检查-Nginx-配置并重启服务\" class=\"headerlink\" title=\"步骤 3: 检查 Nginx 配置并重启服务\"></a>步骤 3: 检查 Nginx 配置并重启服务</h4><p>在编辑配置文件之后，您应该检查配置是否正确：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果显示配置文件语法正确，那么您可以重启 Nginx 以应用更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>"},{"title":"为qinyunjian.cloud配置二级域名","date":"2024-06-04T14:32:50.000Z","_content":"### 为`qinyunjian.cloud`配置二级域名\n\n​\t前提，我现在购买了一个域名`qinyunjian.cloud`，现在我需要为这个域名添加二级域名`hotel.qinyunjian.cloud`，同时可以把前端Web应用和后端服务部署到这个域名。\n\n#### 步骤 1: 确保域名解析\n\n​\t首先，确保您的二级域名 `hotel.qinyunjian.cloud` 已经通过 DNS 正确解析到您的服务器的公网 IP 地址。我这里购买的是阿里云的域名，所以需要到阿里云解析中心，添加记录。\n\n​\t1、点击域名解析。2、点击你的域名。3、点击添加记录。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226093320058.png)\n\n#### 步骤 2: 使用 Certbot 获取证书\n\n​\t运行 Certbot 并选择 Nginx 插件来自动获取和配置 Let's Encrypt SSL 证书：\n\n```shell\nsudo certbot --nginx -d hotel.qinyunjian.cloud\n```\n\n这个命令会自动为您的二级域名 `hotel.qinyunjian.cloud` 获取 SSL 证书，并更新 Nginx 的配置文件来使用这个证书。\n\n#### 步骤3：配置`/etc/nginx/conf.d`文件\n\n​\t编辑您的 Nginx 配置文件（通常位于 `/etc/nginx/nginx.conf` 或 `/etc/nginx/sites-available/` 目录下的某个文件），添加一个新的 `server` 块，以便将 `hotel.qinyunjian.cloud` ，（以下文件是需要自己新建的）的请求代理到您的 SpringBoot 服务：\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/9132726f9a8ad29222730bed828cae8.png)\n\n​\t以下是配置文件详细说明。\n\n```\n# 重定向所有 HTTP 请求到 HTTPS\nserver {\n    listen 80; # 监听 80 端口\n    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置\n    return 301 https://$host$request_uri; # 将所有 HTTP 请求重定向到 HTTPS\n}\n\n# 处理 HTTPS 请求\nserver {\n    listen 443 ssl http2; # 监听 443 端口，启用 SSL 和 HTTP/2\n    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置\n\n    # SSL 证书配置\n    ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem; # 指定证书文件\n    ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem; # 指定证书密钥文件\n\n    # SSL 性能优化配置\n    ssl_session_cache shared:SSL:10m; # 启用 SSL 会话缓存，提高性能\n    ssl_session_timeout 10m; # 设置 SSL 会话的超时时间\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305'; # 指定加密套件\n    ssl_prefer_server_ciphers on; # 服务器优先选择加密算法\n\n    # Web 应用根目录\n    root /var/www/hotelweb; # 设置 Web 应用的根目录\n\n    # 前端应用路由处理\n    location / {\n        try_files $uri $uri/ /index.html; # 尝试返回请求的文件或目录，如果不存在则返回 index.html\n    }\n\n    # 代理 /service 路径到后端 Spring Boot 应用\n    location /service {\n        rewrite ^/service(.*) /$1 break; # 重写 URL，去除 /service 前缀\n        proxy_pass http://localhost:84; # 代理请求到本地的 84 端口\n        proxy_http_version 1.1; # 使用 HTTP/1.1 与代理服务器通信\n        proxy_set_header Upgrade $http_upgrade; # 传递升级头部，用于 WebSocket 支持\n        proxy_set_header Connection 'upgrade'; # 传递连接头部，同样用于 WebSocket\n        proxy_set_header Host $host; # 传递原始请求的 Host 头部\n        proxy_cache_bypass $http_upgrade; # 绕过缓存处理 WebSocket 请求\n    }\n}\n```\n\n#### 第一个 server 块\n\n1. `listen 80;`：这行配置指示 Nginx 监听 80 端口（HTTP）上的请求。\n2. `server_name hotel.qinyunjian.cloud;`：定义了此配置块处理请求的域名。\n3. `return 301 https://$host$request_uri;`：所有 http (80 端口) 的请求将被永久重定向到 https 版本的相同 URI。这是一种常见的做法，用于强制使用 HTTPS。\n\n#### 第二个 server 块\n\n1. `listen 443 ssl http2;`：这行配置指示 Nginx 监听 443 端口上的请求，并启用 SSL 和 HTTP/2 支持。443 端口是 HTTPS 默认使用的端口。\n2. `server_name hotel.qinyunjian.cloud;`：同样定义了此配置块处理请求的域名。\n3. `ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem;`：指定 SSL 证书的位置。这个证书用于 HTTPS 加密。\n4. `ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem;`：指定 SSL 证书的私钥位置。\n5. `ssl_session_cache shared:SSL:10m;`：启用 SSL 会话缓存，以提高后续请求的性能。\n6. `ssl_session_timeout 10m;`：设置 SSL 会话的超时时间为 10 分钟。\n7. `ssl_ciphers [...]`：指定加密套件的列表，这些加密套件用于 SSL/TLS 握手过程中。\n8. `ssl_prefer_server_ciphers on;`：指示服务器优先使用自己的加密套件偏好，而不是客户端提供的。\n9. `root /var/www/hotelweb;`：定义了服务器的根目录。这是 Nginx 用来查找文件的路径。\n10. `location / {`：这个块指定了对于根路径（`/`）的请求，如何处理。\n    - `try_files $uri $uri/ /index.html;`：尝试按顺序返回请求的文件、目录或 `/index.html`。这用于单页应用，确保路由可以由前端 JavaScript 框架处理。\n11. `location /service {`：指定了对于 `/service` 路径的请求，如何处理。\n    - `rewrite ^/service(.*) /$1 break;`：这行将请求中的 `/service` 重写为 `/`，并停止处理后续的 rewrite 规则。这允许将 API 请求代理到应用而不改变路径。\n    - `proxy_pass http://localhost:84;`：将请求代理到本地 84 端口的应用（通常是一个后端服务，如 Spring Boot 应用）。\n    - `proxy_http_version 1.1;`：使用 HTTP 1.1 协议与代理服务器通信。\n    - `proxy_set_header Upgrade $http_upgrade;`：设置 HTTP 升级头部，用于 WebSockets 支持。\n    - `proxy_set_header Connection 'upgrade';`：设置连接头部，同样是为了 WebSockets。\n    - `proxy_set_header Host $host;`：设置请求的 Host 头部为原始请求的 Host，确保后端服务能正确识别请求的域名。\n    - `proxy_cache_bypass $http_upgrade;`：如果有 HTTP 升级请求，绕过缓存处理。\n\n#### 步骤 4: 检查 Nginx 配置并重启服务\n\n​\t在编辑配置文件后，您需要检查 Nginx 配置文件的语法是否正确：\n\n```\nsudo nginx -t\n```\n\n​\t如果没有问题，重启 Nginx 服务以应用更改：\n\n```shell\nsystemctl restart nginx\n```\n\n​\t现在，当访问 `https://hotel.qinyunjian.cloud` 时，请求应该会被自动代理到运行在服务器 84 端口的 SpringBoot 服务。\n\n","source":"_posts/为qinyunjian.cloud配置二级域名.md","raw":"---\ntitle: 为qinyunjian.cloud配置二级域名\ndate: 2024-06-04 22:32:50\ntags: nginx\n---\n### 为`qinyunjian.cloud`配置二级域名\n\n​\t前提，我现在购买了一个域名`qinyunjian.cloud`，现在我需要为这个域名添加二级域名`hotel.qinyunjian.cloud`，同时可以把前端Web应用和后端服务部署到这个域名。\n\n#### 步骤 1: 确保域名解析\n\n​\t首先，确保您的二级域名 `hotel.qinyunjian.cloud` 已经通过 DNS 正确解析到您的服务器的公网 IP 地址。我这里购买的是阿里云的域名，所以需要到阿里云解析中心，添加记录。\n\n​\t1、点击域名解析。2、点击你的域名。3、点击添加记录。\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226093320058.png)\n\n#### 步骤 2: 使用 Certbot 获取证书\n\n​\t运行 Certbot 并选择 Nginx 插件来自动获取和配置 Let's Encrypt SSL 证书：\n\n```shell\nsudo certbot --nginx -d hotel.qinyunjian.cloud\n```\n\n这个命令会自动为您的二级域名 `hotel.qinyunjian.cloud` 获取 SSL 证书，并更新 Nginx 的配置文件来使用这个证书。\n\n#### 步骤3：配置`/etc/nginx/conf.d`文件\n\n​\t编辑您的 Nginx 配置文件（通常位于 `/etc/nginx/nginx.conf` 或 `/etc/nginx/sites-available/` 目录下的某个文件），添加一个新的 `server` 块，以便将 `hotel.qinyunjian.cloud` ，（以下文件是需要自己新建的）的请求代理到您的 SpringBoot 服务：\n\n![](https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/9132726f9a8ad29222730bed828cae8.png)\n\n​\t以下是配置文件详细说明。\n\n```\n# 重定向所有 HTTP 请求到 HTTPS\nserver {\n    listen 80; # 监听 80 端口\n    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置\n    return 301 https://$host$request_uri; # 将所有 HTTP 请求重定向到 HTTPS\n}\n\n# 处理 HTTPS 请求\nserver {\n    listen 443 ssl http2; # 监听 443 端口，启用 SSL 和 HTTP/2\n    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置\n\n    # SSL 证书配置\n    ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem; # 指定证书文件\n    ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem; # 指定证书密钥文件\n\n    # SSL 性能优化配置\n    ssl_session_cache shared:SSL:10m; # 启用 SSL 会话缓存，提高性能\n    ssl_session_timeout 10m; # 设置 SSL 会话的超时时间\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305'; # 指定加密套件\n    ssl_prefer_server_ciphers on; # 服务器优先选择加密算法\n\n    # Web 应用根目录\n    root /var/www/hotelweb; # 设置 Web 应用的根目录\n\n    # 前端应用路由处理\n    location / {\n        try_files $uri $uri/ /index.html; # 尝试返回请求的文件或目录，如果不存在则返回 index.html\n    }\n\n    # 代理 /service 路径到后端 Spring Boot 应用\n    location /service {\n        rewrite ^/service(.*) /$1 break; # 重写 URL，去除 /service 前缀\n        proxy_pass http://localhost:84; # 代理请求到本地的 84 端口\n        proxy_http_version 1.1; # 使用 HTTP/1.1 与代理服务器通信\n        proxy_set_header Upgrade $http_upgrade; # 传递升级头部，用于 WebSocket 支持\n        proxy_set_header Connection 'upgrade'; # 传递连接头部，同样用于 WebSocket\n        proxy_set_header Host $host; # 传递原始请求的 Host 头部\n        proxy_cache_bypass $http_upgrade; # 绕过缓存处理 WebSocket 请求\n    }\n}\n```\n\n#### 第一个 server 块\n\n1. `listen 80;`：这行配置指示 Nginx 监听 80 端口（HTTP）上的请求。\n2. `server_name hotel.qinyunjian.cloud;`：定义了此配置块处理请求的域名。\n3. `return 301 https://$host$request_uri;`：所有 http (80 端口) 的请求将被永久重定向到 https 版本的相同 URI。这是一种常见的做法，用于强制使用 HTTPS。\n\n#### 第二个 server 块\n\n1. `listen 443 ssl http2;`：这行配置指示 Nginx 监听 443 端口上的请求，并启用 SSL 和 HTTP/2 支持。443 端口是 HTTPS 默认使用的端口。\n2. `server_name hotel.qinyunjian.cloud;`：同样定义了此配置块处理请求的域名。\n3. `ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem;`：指定 SSL 证书的位置。这个证书用于 HTTPS 加密。\n4. `ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem;`：指定 SSL 证书的私钥位置。\n5. `ssl_session_cache shared:SSL:10m;`：启用 SSL 会话缓存，以提高后续请求的性能。\n6. `ssl_session_timeout 10m;`：设置 SSL 会话的超时时间为 10 分钟。\n7. `ssl_ciphers [...]`：指定加密套件的列表，这些加密套件用于 SSL/TLS 握手过程中。\n8. `ssl_prefer_server_ciphers on;`：指示服务器优先使用自己的加密套件偏好，而不是客户端提供的。\n9. `root /var/www/hotelweb;`：定义了服务器的根目录。这是 Nginx 用来查找文件的路径。\n10. `location / {`：这个块指定了对于根路径（`/`）的请求，如何处理。\n    - `try_files $uri $uri/ /index.html;`：尝试按顺序返回请求的文件、目录或 `/index.html`。这用于单页应用，确保路由可以由前端 JavaScript 框架处理。\n11. `location /service {`：指定了对于 `/service` 路径的请求，如何处理。\n    - `rewrite ^/service(.*) /$1 break;`：这行将请求中的 `/service` 重写为 `/`，并停止处理后续的 rewrite 规则。这允许将 API 请求代理到应用而不改变路径。\n    - `proxy_pass http://localhost:84;`：将请求代理到本地 84 端口的应用（通常是一个后端服务，如 Spring Boot 应用）。\n    - `proxy_http_version 1.1;`：使用 HTTP 1.1 协议与代理服务器通信。\n    - `proxy_set_header Upgrade $http_upgrade;`：设置 HTTP 升级头部，用于 WebSockets 支持。\n    - `proxy_set_header Connection 'upgrade';`：设置连接头部，同样是为了 WebSockets。\n    - `proxy_set_header Host $host;`：设置请求的 Host 头部为原始请求的 Host，确保后端服务能正确识别请求的域名。\n    - `proxy_cache_bypass $http_upgrade;`：如果有 HTTP 升级请求，绕过缓存处理。\n\n#### 步骤 4: 检查 Nginx 配置并重启服务\n\n​\t在编辑配置文件后，您需要检查 Nginx 配置文件的语法是否正确：\n\n```\nsudo nginx -t\n```\n\n​\t如果没有问题，重启 Nginx 服务以应用更改：\n\n```shell\nsystemctl restart nginx\n```\n\n​\t现在，当访问 `https://hotel.qinyunjian.cloud` 时，请求应该会被自动代理到运行在服务器 84 端口的 SpringBoot 服务。\n\n","slug":"为qinyunjian.cloud配置二级域名","published":1,"updated":"2024-07-10T12:11:48.644Z","_id":"clx19s52o0005iotl1t143b39","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"为qinyunjian-cloud配置二级域名\"><a href=\"#为qinyunjian-cloud配置二级域名\" class=\"headerlink\" title=\"为qinyunjian.cloud配置二级域名\"></a>为<code>qinyunjian.cloud</code>配置二级域名</h3><p>​\t前提，我现在购买了一个域名<code>qinyunjian.cloud</code>，现在我需要为这个域名添加二级域名<code>hotel.qinyunjian.cloud</code>，同时可以把前端Web应用和后端服务部署到这个域名。</p>\n<h4 id=\"步骤-1-确保域名解析\"><a href=\"#步骤-1-确保域名解析\" class=\"headerlink\" title=\"步骤 1: 确保域名解析\"></a>步骤 1: 确保域名解析</h4><p>​\t首先，确保您的二级域名 <code>hotel.qinyunjian.cloud</code> 已经通过 DNS 正确解析到您的服务器的公网 IP 地址。我这里购买的是阿里云的域名，所以需要到阿里云解析中心，添加记录。</p>\n<p>​\t1、点击域名解析。2、点击你的域名。3、点击添加记录。</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226093320058.png\"></p>\n<h4 id=\"步骤-2-使用-Certbot-获取证书\"><a href=\"#步骤-2-使用-Certbot-获取证书\" class=\"headerlink\" title=\"步骤 2: 使用 Certbot 获取证书\"></a>步骤 2: 使用 Certbot 获取证书</h4><p>​\t运行 Certbot 并选择 Nginx 插件来自动获取和配置 Let’s Encrypt SSL 证书：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d hotel.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会自动为您的二级域名 <code>hotel.qinyunjian.cloud</code> 获取 SSL 证书，并更新 Nginx 的配置文件来使用这个证书。</p>\n<h4 id=\"步骤3：配置-etc-nginx-conf-d文件\"><a href=\"#步骤3：配置-etc-nginx-conf-d文件\" class=\"headerlink\" title=\"步骤3：配置/etc/nginx/conf.d文件\"></a>步骤3：配置<code>/etc/nginx/conf.d</code>文件</h4><p>​\t编辑您的 Nginx 配置文件（通常位于 <code>/etc/nginx/nginx.conf</code> 或 <code>/etc/nginx/sites-available/</code> 目录下的某个文件），添加一个新的 <code>server</code> 块，以便将 <code>hotel.qinyunjian.cloud</code> ，（以下文件是需要自己新建的）的请求代理到您的 SpringBoot 服务：</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/9132726f9a8ad29222730bed828cae8.png\"></p>\n<p>​\t以下是配置文件详细说明。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重定向所有 HTTP 请求到 HTTPS</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80; # 监听 80 端口</span><br><span class=\"line\">    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置</span><br><span class=\"line\">    return 301 https://$host$request_uri; # 将所有 HTTP 请求重定向到 HTTPS</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 处理 HTTPS 请求</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2; # 监听 443 端口，启用 SSL 和 HTTP/2</span><br><span class=\"line\">    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL 证书配置</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem; # 指定证书文件</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem; # 指定证书密钥文件</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL 性能优化配置</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m; # 启用 SSL 会话缓存，提高性能</span><br><span class=\"line\">    ssl_session_timeout 10m; # 设置 SSL 会话的超时时间</span><br><span class=\"line\">    ssl_ciphers &#x27;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305&#x27;; # 指定加密套件</span><br><span class=\"line\">    ssl_prefer_server_ciphers on; # 服务器优先选择加密算法</span><br><span class=\"line\"></span><br><span class=\"line\">    # Web 应用根目录</span><br><span class=\"line\">    root /var/www/hotelweb; # 设置 Web 应用的根目录</span><br><span class=\"line\"></span><br><span class=\"line\">    # 前端应用路由处理</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 尝试返回请求的文件或目录，如果不存在则返回 index.html</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 代理 /service 路径到后端 Spring Boot 应用</span><br><span class=\"line\">    location /service &#123;</span><br><span class=\"line\">        rewrite ^/service(.*) /$1 break; # 重写 URL，去除 /service 前缀</span><br><span class=\"line\">        proxy_pass http://localhost:84; # 代理请求到本地的 84 端口</span><br><span class=\"line\">        proxy_http_version 1.1; # 使用 HTTP/1.1 与代理服务器通信</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade; # 传递升级头部，用于 WebSocket 支持</span><br><span class=\"line\">        proxy_set_header Connection &#x27;upgrade&#x27;; # 传递连接头部，同样用于 WebSocket</span><br><span class=\"line\">        proxy_set_header Host $host; # 传递原始请求的 Host 头部</span><br><span class=\"line\">        proxy_cache_bypass $http_upgrade; # 绕过缓存处理 WebSocket 请求</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第一个-server-块\"><a href=\"#第一个-server-块\" class=\"headerlink\" title=\"第一个 server 块\"></a>第一个 server 块</h4><ol>\n<li><code>listen 80;</code>：这行配置指示 Nginx 监听 80 端口（HTTP）上的请求。</li>\n<li><code>server_name hotel.qinyunjian.cloud;</code>：定义了此配置块处理请求的域名。</li>\n<li><code>return 301 https://$host$request_uri;</code>：所有 http (80 端口) 的请求将被永久重定向到 https 版本的相同 URI。这是一种常见的做法，用于强制使用 HTTPS。</li>\n</ol>\n<h4 id=\"第二个-server-块\"><a href=\"#第二个-server-块\" class=\"headerlink\" title=\"第二个 server 块\"></a>第二个 server 块</h4><ol>\n<li><code>listen 443 ssl http2;</code>：这行配置指示 Nginx 监听 443 端口上的请求，并启用 SSL 和 HTTP&#x2F;2 支持。443 端口是 HTTPS 默认使用的端口。</li>\n<li><code>server_name hotel.qinyunjian.cloud;</code>：同样定义了此配置块处理请求的域名。</li>\n<li><code>ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem;</code>：指定 SSL 证书的位置。这个证书用于 HTTPS 加密。</li>\n<li><code>ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem;</code>：指定 SSL 证书的私钥位置。</li>\n<li><code>ssl_session_cache shared:SSL:10m;</code>：启用 SSL 会话缓存，以提高后续请求的性能。</li>\n<li><code>ssl_session_timeout 10m;</code>：设置 SSL 会话的超时时间为 10 分钟。</li>\n<li><code>ssl_ciphers [...]</code>：指定加密套件的列表，这些加密套件用于 SSL&#x2F;TLS 握手过程中。</li>\n<li><code>ssl_prefer_server_ciphers on;</code>：指示服务器优先使用自己的加密套件偏好，而不是客户端提供的。</li>\n<li><code>root /var/www/hotelweb;</code>：定义了服务器的根目录。这是 Nginx 用来查找文件的路径。</li>\n<li><code>location / &#123;</code>：这个块指定了对于根路径（<code>/</code>）的请求，如何处理。<ul>\n<li><code>try_files $uri $uri/ /index.html;</code>：尝试按顺序返回请求的文件、目录或 <code>/index.html</code>。这用于单页应用，确保路由可以由前端 JavaScript 框架处理。</li>\n</ul>\n</li>\n<li><code>location /service &#123;</code>：指定了对于 <code>/service</code> 路径的请求，如何处理。<ul>\n<li><code>rewrite ^/service(.*) /$1 break;</code>：这行将请求中的 <code>/service</code> 重写为 <code>/</code>，并停止处理后续的 rewrite 规则。这允许将 API 请求代理到应用而不改变路径。</li>\n<li><code>proxy_pass http://localhost:84;</code>：将请求代理到本地 84 端口的应用（通常是一个后端服务，如 Spring Boot 应用）。</li>\n<li><code>proxy_http_version 1.1;</code>：使用 HTTP 1.1 协议与代理服务器通信。</li>\n<li><code>proxy_set_header Upgrade $http_upgrade;</code>：设置 HTTP 升级头部，用于 WebSockets 支持。</li>\n<li><code>proxy_set_header Connection &#39;upgrade&#39;;</code>：设置连接头部，同样是为了 WebSockets。</li>\n<li><code>proxy_set_header Host $host;</code>：设置请求的 Host 头部为原始请求的 Host，确保后端服务能正确识别请求的域名。</li>\n<li><code>proxy_cache_bypass $http_upgrade;</code>：如果有 HTTP 升级请求，绕过缓存处理。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"步骤-4-检查-Nginx-配置并重启服务\"><a href=\"#步骤-4-检查-Nginx-配置并重启服务\" class=\"headerlink\" title=\"步骤 4: 检查 Nginx 配置并重启服务\"></a>步骤 4: 检查 Nginx 配置并重启服务</h4><p>​\t在编辑配置文件后，您需要检查 Nginx 配置文件的语法是否正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>​\t如果没有问题，重启 Nginx 服务以应用更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<p>​\t现在，当访问 <code>https://hotel.qinyunjian.cloud</code> 时，请求应该会被自动代理到运行在服务器 84 端口的 SpringBoot 服务。</p>\n","excerpt":"","more":"<h3 id=\"为qinyunjian-cloud配置二级域名\"><a href=\"#为qinyunjian-cloud配置二级域名\" class=\"headerlink\" title=\"为qinyunjian.cloud配置二级域名\"></a>为<code>qinyunjian.cloud</code>配置二级域名</h3><p>​\t前提，我现在购买了一个域名<code>qinyunjian.cloud</code>，现在我需要为这个域名添加二级域名<code>hotel.qinyunjian.cloud</code>，同时可以把前端Web应用和后端服务部署到这个域名。</p>\n<h4 id=\"步骤-1-确保域名解析\"><a href=\"#步骤-1-确保域名解析\" class=\"headerlink\" title=\"步骤 1: 确保域名解析\"></a>步骤 1: 确保域名解析</h4><p>​\t首先，确保您的二级域名 <code>hotel.qinyunjian.cloud</code> 已经通过 DNS 正确解析到您的服务器的公网 IP 地址。我这里购买的是阿里云的域名，所以需要到阿里云解析中心，添加记录。</p>\n<p>​\t1、点击域名解析。2、点击你的域名。3、点击添加记录。</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/image-20240226093320058.png\"></p>\n<h4 id=\"步骤-2-使用-Certbot-获取证书\"><a href=\"#步骤-2-使用-Certbot-获取证书\" class=\"headerlink\" title=\"步骤 2: 使用 Certbot 获取证书\"></a>步骤 2: 使用 Certbot 获取证书</h4><p>​\t运行 Certbot 并选择 Nginx 插件来自动获取和配置 Let’s Encrypt SSL 证书：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d hotel.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会自动为您的二级域名 <code>hotel.qinyunjian.cloud</code> 获取 SSL 证书，并更新 Nginx 的配置文件来使用这个证书。</p>\n<h4 id=\"步骤3：配置-etc-nginx-conf-d文件\"><a href=\"#步骤3：配置-etc-nginx-conf-d文件\" class=\"headerlink\" title=\"步骤3：配置/etc/nginx/conf.d文件\"></a>步骤3：配置<code>/etc/nginx/conf.d</code>文件</h4><p>​\t编辑您的 Nginx 配置文件（通常位于 <code>/etc/nginx/nginx.conf</code> 或 <code>/etc/nginx/sites-available/</code> 目录下的某个文件），添加一个新的 <code>server</code> 块，以便将 <code>hotel.qinyunjian.cloud</code> ，（以下文件是需要自己新建的）的请求代理到您的 SpringBoot 服务：</p>\n<p><img src=\"https://qinyunjian-1316017204.cos.ap-guangzhou.myqcloud.com/images/typora/9132726f9a8ad29222730bed828cae8.png\"></p>\n<p>​\t以下是配置文件详细说明。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重定向所有 HTTP 请求到 HTTPS</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80; # 监听 80 端口</span><br><span class=\"line\">    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置</span><br><span class=\"line\">    return 301 https://$host$request_uri; # 将所有 HTTP 请求重定向到 HTTPS</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 处理 HTTPS 请求</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2; # 监听 443 端口，启用 SSL 和 HTTP/2</span><br><span class=\"line\">    server_name hotel.qinyunjian.cloud; # 为 hotel.qinyunjian.cloud 配置</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL 证书配置</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem; # 指定证书文件</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem; # 指定证书密钥文件</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL 性能优化配置</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m; # 启用 SSL 会话缓存，提高性能</span><br><span class=\"line\">    ssl_session_timeout 10m; # 设置 SSL 会话的超时时间</span><br><span class=\"line\">    ssl_ciphers &#x27;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305&#x27;; # 指定加密套件</span><br><span class=\"line\">    ssl_prefer_server_ciphers on; # 服务器优先选择加密算法</span><br><span class=\"line\"></span><br><span class=\"line\">    # Web 应用根目录</span><br><span class=\"line\">    root /var/www/hotelweb; # 设置 Web 应用的根目录</span><br><span class=\"line\"></span><br><span class=\"line\">    # 前端应用路由处理</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ /index.html; # 尝试返回请求的文件或目录，如果不存在则返回 index.html</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 代理 /service 路径到后端 Spring Boot 应用</span><br><span class=\"line\">    location /service &#123;</span><br><span class=\"line\">        rewrite ^/service(.*) /$1 break; # 重写 URL，去除 /service 前缀</span><br><span class=\"line\">        proxy_pass http://localhost:84; # 代理请求到本地的 84 端口</span><br><span class=\"line\">        proxy_http_version 1.1; # 使用 HTTP/1.1 与代理服务器通信</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade; # 传递升级头部，用于 WebSocket 支持</span><br><span class=\"line\">        proxy_set_header Connection &#x27;upgrade&#x27;; # 传递连接头部，同样用于 WebSocket</span><br><span class=\"line\">        proxy_set_header Host $host; # 传递原始请求的 Host 头部</span><br><span class=\"line\">        proxy_cache_bypass $http_upgrade; # 绕过缓存处理 WebSocket 请求</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第一个-server-块\"><a href=\"#第一个-server-块\" class=\"headerlink\" title=\"第一个 server 块\"></a>第一个 server 块</h4><ol>\n<li><code>listen 80;</code>：这行配置指示 Nginx 监听 80 端口（HTTP）上的请求。</li>\n<li><code>server_name hotel.qinyunjian.cloud;</code>：定义了此配置块处理请求的域名。</li>\n<li><code>return 301 https://$host$request_uri;</code>：所有 http (80 端口) 的请求将被永久重定向到 https 版本的相同 URI。这是一种常见的做法，用于强制使用 HTTPS。</li>\n</ol>\n<h4 id=\"第二个-server-块\"><a href=\"#第二个-server-块\" class=\"headerlink\" title=\"第二个 server 块\"></a>第二个 server 块</h4><ol>\n<li><code>listen 443 ssl http2;</code>：这行配置指示 Nginx 监听 443 端口上的请求，并启用 SSL 和 HTTP&#x2F;2 支持。443 端口是 HTTPS 默认使用的端口。</li>\n<li><code>server_name hotel.qinyunjian.cloud;</code>：同样定义了此配置块处理请求的域名。</li>\n<li><code>ssl_certificate /etc/letsencrypt/live/hotel.qinyunjian.cloud/fullchain.pem;</code>：指定 SSL 证书的位置。这个证书用于 HTTPS 加密。</li>\n<li><code>ssl_certificate_key /etc/letsencrypt/live/hotel.qinyunjian.cloud/privkey.pem;</code>：指定 SSL 证书的私钥位置。</li>\n<li><code>ssl_session_cache shared:SSL:10m;</code>：启用 SSL 会话缓存，以提高后续请求的性能。</li>\n<li><code>ssl_session_timeout 10m;</code>：设置 SSL 会话的超时时间为 10 分钟。</li>\n<li><code>ssl_ciphers [...]</code>：指定加密套件的列表，这些加密套件用于 SSL&#x2F;TLS 握手过程中。</li>\n<li><code>ssl_prefer_server_ciphers on;</code>：指示服务器优先使用自己的加密套件偏好，而不是客户端提供的。</li>\n<li><code>root /var/www/hotelweb;</code>：定义了服务器的根目录。这是 Nginx 用来查找文件的路径。</li>\n<li><code>location / &#123;</code>：这个块指定了对于根路径（<code>/</code>）的请求，如何处理。<ul>\n<li><code>try_files $uri $uri/ /index.html;</code>：尝试按顺序返回请求的文件、目录或 <code>/index.html</code>。这用于单页应用，确保路由可以由前端 JavaScript 框架处理。</li>\n</ul>\n</li>\n<li><code>location /service &#123;</code>：指定了对于 <code>/service</code> 路径的请求，如何处理。<ul>\n<li><code>rewrite ^/service(.*) /$1 break;</code>：这行将请求中的 <code>/service</code> 重写为 <code>/</code>，并停止处理后续的 rewrite 规则。这允许将 API 请求代理到应用而不改变路径。</li>\n<li><code>proxy_pass http://localhost:84;</code>：将请求代理到本地 84 端口的应用（通常是一个后端服务，如 Spring Boot 应用）。</li>\n<li><code>proxy_http_version 1.1;</code>：使用 HTTP 1.1 协议与代理服务器通信。</li>\n<li><code>proxy_set_header Upgrade $http_upgrade;</code>：设置 HTTP 升级头部，用于 WebSockets 支持。</li>\n<li><code>proxy_set_header Connection &#39;upgrade&#39;;</code>：设置连接头部，同样是为了 WebSockets。</li>\n<li><code>proxy_set_header Host $host;</code>：设置请求的 Host 头部为原始请求的 Host，确保后端服务能正确识别请求的域名。</li>\n<li><code>proxy_cache_bypass $http_upgrade;</code>：如果有 HTTP 升级请求，绕过缓存处理。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"步骤-4-检查-Nginx-配置并重启服务\"><a href=\"#步骤-4-检查-Nginx-配置并重启服务\" class=\"headerlink\" title=\"步骤 4: 检查 Nginx 配置并重启服务\"></a>步骤 4: 检查 Nginx 配置并重启服务</h4><p>​\t在编辑配置文件后，您需要检查 Nginx 配置文件的语法是否正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>​\t如果没有问题，重启 Nginx 服务以应用更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<p>​\t现在，当访问 <code>https://hotel.qinyunjian.cloud</code> 时，请求应该会被自动代理到运行在服务器 84 端口的 SpringBoot 服务。</p>\n"},{"title":"Docker安装minio","date":"2024-06-12T09:33:50.000Z","_content":"\nMinIO 是一个高性能的分布式对象存储服务，它可以用于存储大量非结构化数据，如照片、视频、日志文件等。通过 Docker 安装和运行 MinIO 是一种快速且方便的方法。下面是在 Docker 上安装和运行 MinIO 的步骤：\n\n## Docker安装minio\n\n### 1. 拉取 MinIO Docker 镜像\n\n首先，你需要从 Docker Hub 拉取最新的 MinIO 镜像。在你的终端中运行以下命令：\n\n```shell\ndocker pull minio/minio\n```\n\n### 2.启动minio容器\n\n```shell\ndocker run -d \\\n --name minio \\\n --cgroupns host \\\n --env MINIO_ROOT_USER=admin \\\n --env MINIO_ROOT_PASSWORD=******** \\\n -p 9000:9000/tcp \\\n -p 9090:9090/tcp \\\n --restart=always \\\n -v /mydata/minio/data:/data \\\n minio/minio server /data --console-address :9090 --address :9000 \n```\n\n Docker 运行 MinIO 服务，一个高性能的分布式对象存储服务，常用于存储大规模的非结构化数据。下面我将详细解释这个命令的各个部分：\n\n1. `docker run -d`：\n   - `docker run`：告诉 Docker 运行一个新的容器。\n   - `-d`：代表后台运行，让容器在后台执行。\n2. `--name minio`：\n   - `--name`：设置容器的名称，这里名称被设为 `minio`。\n3. `--cgroupns host`：\n   - `--cgroupns`：指定容器使用的 cgroup 命名空间类型。这里使用的是 `host`，意味着容器将使用宿主机的 cgroup 命名空间，而不是创建新的。\n4. `--env MINIO_ROOT_USER=admin` 和 `--env MINIO_ROOT_PASSWORD=********`：\n   - `--env`：设置环境变量。\n   - `MINIO_ROOT_USER` 和 `MINIO_ROOT_PASSWORD`：分别设置 MinIO 服务的根用户名称和密码。\n5. `-p 9000:9000/tcp` 和 `-p 9090:9090/tcp`：\n   - `-p`：端口映射，格式为 `宿主机端口:容器端口/tcp`。\n   - `9000:9000/tcp`：将容器的 9000 端口映射到宿主机的 9000 端口，MinIO 的主服务通常在此端口运行。\n   - `9090:9090/tcp`：将容器的 9090 端口映射到宿主机的 9090 端口，MinIO 的管理控制台通常在此端口运行。\n6. `--restart=always`：\n   - `--restart`：设置容器的重启策略。`always` 意味着无论容器的退出状态如何，只要 Docker 守护进程被重新启动，容器也将被重新启动。\n7. `-v /mydata/minio/data:/data`：\n   - `-v`：挂载卷，格式为 `宿主机路径:容器内路径`。\n   - `/mydata/minio/data:/data`：将宿主机的 `/mydata/minio/data` 目录挂载到容器内的 `/data` 目录，用于数据持久化。\n8. `minio/minio server /data`：\n   - `minio/minio`：Docker 镜像名称，表示使用 MinIO 的官方 Docker 镜像。\n   - `server /data`：MinIO 服务的启动命令，指定 `/data` 为数据存储位置。\n9. `--console-address :9090 --address :9000`：\n   - `--console-address :9090`：设置 MinIO 控制台的监听地址和端口。\n   - `--address :9000`：设置 MinIO 服务的监听地址和端口。\n\n整个命令的作用是在 Docker 中运行一个名为 `minio` 的容器，配置了环境变量、端口映射和卷挂载，并设定了服务及控制台的监听端口，用于提供一个持久化的分布式对象存储服务。\n\n## Docker安装MinIO Client (`mc`)\n\n### 1. 拉取 `mc` Docker 镜像\n\n```shell\ndocker pull minio/mc\n```\n\n这个命令从 Docker Hub 上拉取最新的 MinIO Client (`mc`) 镜像。这样可以确保你使用的是最新版的客户端。\n\n### 2. 通过 Docker 运行 `mc` 并进入其 Shell\n\n```shell\ndocker run -it --entrypoint=/bin/sh minio/mc\n```\n\n### 3. 配置 MinIO 客户端\n\n```shell\nmc config host add <ALIAS> <YOUR-S3-ENDPOINT> <YOUR-ACCESS-KEY> <YOUR-SECRET-KEY> [--api API-SIGNATURE]\n```\n\n这个命令用于配置 `mc`，使其可以连接到一个特定的 MinIO 服务或兼容 S3 的存储服务。\n\n- `<ALIAS>` 是你为这个存储服务定义的简称。\n- `<YOUR-S3-ENDPOINT>` 是服务的访问 URL。\n- `<YOUR-ACCESS-KEY>` 和 `<YOUR-SECRET-KEY>` 是你的访问密钥和密钥密码，用于身份验证。\n- `[--api API-SIGNATURE]` 是可选的，用于指定 API 签名类型，通常是 `S3v4`。\n\n### 4. 添加特定的 MinIO 服务配置\n\n```shell\nmc config host add minio http://47.113.216.154:9000 admin ********\n```\n\n这个命令添加一个名为 `minio` 的 MinIO 服务配置，使用的是 IP 地址 `117.72.14.166` 和端口 `9000`，以及提供的访问密钥和密钥密码。\n\n### 5. 列出存储桶创建名`qyj`的储存桶\n\n```shell\nmc ls minio\nmc mb minio/qyj\n```\n\n这个命令列出与别名 `minio` 相关联的存储服务中的所有存储桶。\n\n### 6. 启用匿名访问模式\n\n```shell\nmc anonymous\n```\n\n这个命令启动 `mc` 的匿名访问模式，允许用户在没有提供 API 密钥的情况下执行操作。\n\n### 7. 设置匿名下载权限\n\n```shell\nmc anonymous set download minio/qyj\n```","source":"_posts/ubuntu-Docker安装minio.md","raw":"---\ntitle: Docker安装minio\ndate: 2024-06-12 17:33:50\ntags: ubuntu\n---\n\nMinIO 是一个高性能的分布式对象存储服务，它可以用于存储大量非结构化数据，如照片、视频、日志文件等。通过 Docker 安装和运行 MinIO 是一种快速且方便的方法。下面是在 Docker 上安装和运行 MinIO 的步骤：\n\n## Docker安装minio\n\n### 1. 拉取 MinIO Docker 镜像\n\n首先，你需要从 Docker Hub 拉取最新的 MinIO 镜像。在你的终端中运行以下命令：\n\n```shell\ndocker pull minio/minio\n```\n\n### 2.启动minio容器\n\n```shell\ndocker run -d \\\n --name minio \\\n --cgroupns host \\\n --env MINIO_ROOT_USER=admin \\\n --env MINIO_ROOT_PASSWORD=******** \\\n -p 9000:9000/tcp \\\n -p 9090:9090/tcp \\\n --restart=always \\\n -v /mydata/minio/data:/data \\\n minio/minio server /data --console-address :9090 --address :9000 \n```\n\n Docker 运行 MinIO 服务，一个高性能的分布式对象存储服务，常用于存储大规模的非结构化数据。下面我将详细解释这个命令的各个部分：\n\n1. `docker run -d`：\n   - `docker run`：告诉 Docker 运行一个新的容器。\n   - `-d`：代表后台运行，让容器在后台执行。\n2. `--name minio`：\n   - `--name`：设置容器的名称，这里名称被设为 `minio`。\n3. `--cgroupns host`：\n   - `--cgroupns`：指定容器使用的 cgroup 命名空间类型。这里使用的是 `host`，意味着容器将使用宿主机的 cgroup 命名空间，而不是创建新的。\n4. `--env MINIO_ROOT_USER=admin` 和 `--env MINIO_ROOT_PASSWORD=********`：\n   - `--env`：设置环境变量。\n   - `MINIO_ROOT_USER` 和 `MINIO_ROOT_PASSWORD`：分别设置 MinIO 服务的根用户名称和密码。\n5. `-p 9000:9000/tcp` 和 `-p 9090:9090/tcp`：\n   - `-p`：端口映射，格式为 `宿主机端口:容器端口/tcp`。\n   - `9000:9000/tcp`：将容器的 9000 端口映射到宿主机的 9000 端口，MinIO 的主服务通常在此端口运行。\n   - `9090:9090/tcp`：将容器的 9090 端口映射到宿主机的 9090 端口，MinIO 的管理控制台通常在此端口运行。\n6. `--restart=always`：\n   - `--restart`：设置容器的重启策略。`always` 意味着无论容器的退出状态如何，只要 Docker 守护进程被重新启动，容器也将被重新启动。\n7. `-v /mydata/minio/data:/data`：\n   - `-v`：挂载卷，格式为 `宿主机路径:容器内路径`。\n   - `/mydata/minio/data:/data`：将宿主机的 `/mydata/minio/data` 目录挂载到容器内的 `/data` 目录，用于数据持久化。\n8. `minio/minio server /data`：\n   - `minio/minio`：Docker 镜像名称，表示使用 MinIO 的官方 Docker 镜像。\n   - `server /data`：MinIO 服务的启动命令，指定 `/data` 为数据存储位置。\n9. `--console-address :9090 --address :9000`：\n   - `--console-address :9090`：设置 MinIO 控制台的监听地址和端口。\n   - `--address :9000`：设置 MinIO 服务的监听地址和端口。\n\n整个命令的作用是在 Docker 中运行一个名为 `minio` 的容器，配置了环境变量、端口映射和卷挂载，并设定了服务及控制台的监听端口，用于提供一个持久化的分布式对象存储服务。\n\n## Docker安装MinIO Client (`mc`)\n\n### 1. 拉取 `mc` Docker 镜像\n\n```shell\ndocker pull minio/mc\n```\n\n这个命令从 Docker Hub 上拉取最新的 MinIO Client (`mc`) 镜像。这样可以确保你使用的是最新版的客户端。\n\n### 2. 通过 Docker 运行 `mc` 并进入其 Shell\n\n```shell\ndocker run -it --entrypoint=/bin/sh minio/mc\n```\n\n### 3. 配置 MinIO 客户端\n\n```shell\nmc config host add <ALIAS> <YOUR-S3-ENDPOINT> <YOUR-ACCESS-KEY> <YOUR-SECRET-KEY> [--api API-SIGNATURE]\n```\n\n这个命令用于配置 `mc`，使其可以连接到一个特定的 MinIO 服务或兼容 S3 的存储服务。\n\n- `<ALIAS>` 是你为这个存储服务定义的简称。\n- `<YOUR-S3-ENDPOINT>` 是服务的访问 URL。\n- `<YOUR-ACCESS-KEY>` 和 `<YOUR-SECRET-KEY>` 是你的访问密钥和密钥密码，用于身份验证。\n- `[--api API-SIGNATURE]` 是可选的，用于指定 API 签名类型，通常是 `S3v4`。\n\n### 4. 添加特定的 MinIO 服务配置\n\n```shell\nmc config host add minio http://47.113.216.154:9000 admin ********\n```\n\n这个命令添加一个名为 `minio` 的 MinIO 服务配置，使用的是 IP 地址 `117.72.14.166` 和端口 `9000`，以及提供的访问密钥和密钥密码。\n\n### 5. 列出存储桶创建名`qyj`的储存桶\n\n```shell\nmc ls minio\nmc mb minio/qyj\n```\n\n这个命令列出与别名 `minio` 相关联的存储服务中的所有存储桶。\n\n### 6. 启用匿名访问模式\n\n```shell\nmc anonymous\n```\n\n这个命令启动 `mc` 的匿名访问模式，允许用户在没有提供 API 密钥的情况下执行操作。\n\n### 7. 设置匿名下载权限\n\n```shell\nmc anonymous set download minio/qyj\n```","slug":"ubuntu-Docker安装minio","published":1,"updated":"2024-07-10T12:13:39.855Z","_id":"clxbmxg700000lotl5k8e5oah","comments":1,"layout":"post","photos":[],"content":"<p>MinIO 是一个高性能的分布式对象存储服务，它可以用于存储大量非结构化数据，如照片、视频、日志文件等。通过 Docker 安装和运行 MinIO 是一种快速且方便的方法。下面是在 Docker 上安装和运行 MinIO 的步骤：</p>\n<h2 id=\"Docker安装minio\"><a href=\"#Docker安装minio\" class=\"headerlink\" title=\"Docker安装minio\"></a>Docker安装minio</h2><h3 id=\"1-拉取-MinIO-Docker-镜像\"><a href=\"#1-拉取-MinIO-Docker-镜像\" class=\"headerlink\" title=\"1. 拉取 MinIO Docker 镜像\"></a>1. 拉取 MinIO Docker 镜像</h3><p>首先，你需要从 Docker Hub 拉取最新的 MinIO 镜像。在你的终端中运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull minio/minio</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-启动minio容器\"><a href=\"#2-启动minio容器\" class=\"headerlink\" title=\"2.启动minio容器\"></a>2.启动minio容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\"> --name minio \\</span><br><span class=\"line\"> --cgroupns host \\</span><br><span class=\"line\"> --env MINIO_ROOT_USER=admin \\</span><br><span class=\"line\"> --env MINIO_ROOT_PASSWORD=******** \\</span><br><span class=\"line\"> -p 9000:9000/tcp \\</span><br><span class=\"line\"> -p 9090:9090/tcp \\</span><br><span class=\"line\"> --restart=always \\</span><br><span class=\"line\"> -v /mydata/minio/data:/data \\</span><br><span class=\"line\"> minio/minio server /data --console-address :9090 --address :9000 </span><br></pre></td></tr></table></figure>\n\n<p> Docker 运行 MinIO 服务，一个高性能的分布式对象存储服务，常用于存储大规模的非结构化数据。下面我将详细解释这个命令的各个部分：</p>\n<ol>\n<li><code>docker run -d</code>：<ul>\n<li><code>docker run</code>：告诉 Docker 运行一个新的容器。</li>\n<li><code>-d</code>：代表后台运行，让容器在后台执行。</li>\n</ul>\n</li>\n<li><code>--name minio</code>：<ul>\n<li><code>--name</code>：设置容器的名称，这里名称被设为 <code>minio</code>。</li>\n</ul>\n</li>\n<li><code>--cgroupns host</code>：<ul>\n<li><code>--cgroupns</code>：指定容器使用的 cgroup 命名空间类型。这里使用的是 <code>host</code>，意味着容器将使用宿主机的 cgroup 命名空间，而不是创建新的。</li>\n</ul>\n</li>\n<li><code>--env MINIO_ROOT_USER=admin</code> 和 <code>--env MINIO_ROOT_PASSWORD=********</code>：<ul>\n<li><code>--env</code>：设置环境变量。</li>\n<li><code>MINIO_ROOT_USER</code> 和 <code>MINIO_ROOT_PASSWORD</code>：分别设置 MinIO 服务的根用户名称和密码。</li>\n</ul>\n</li>\n<li><code>-p 9000:9000/tcp</code> 和 <code>-p 9090:9090/tcp</code>：<ul>\n<li><code>-p</code>：端口映射，格式为 <code>宿主机端口:容器端口/tcp</code>。</li>\n<li><code>9000:9000/tcp</code>：将容器的 9000 端口映射到宿主机的 9000 端口，MinIO 的主服务通常在此端口运行。</li>\n<li><code>9090:9090/tcp</code>：将容器的 9090 端口映射到宿主机的 9090 端口，MinIO 的管理控制台通常在此端口运行。</li>\n</ul>\n</li>\n<li><code>--restart=always</code>：<ul>\n<li><code>--restart</code>：设置容器的重启策略。<code>always</code> 意味着无论容器的退出状态如何，只要 Docker 守护进程被重新启动，容器也将被重新启动。</li>\n</ul>\n</li>\n<li><code>-v /mydata/minio/data:/data</code>：<ul>\n<li><code>-v</code>：挂载卷，格式为 <code>宿主机路径:容器内路径</code>。</li>\n<li><code>/mydata/minio/data:/data</code>：将宿主机的 <code>/mydata/minio/data</code> 目录挂载到容器内的 <code>/data</code> 目录，用于数据持久化。</li>\n</ul>\n</li>\n<li><code>minio/minio server /data</code>：<ul>\n<li><code>minio/minio</code>：Docker 镜像名称，表示使用 MinIO 的官方 Docker 镜像。</li>\n<li><code>server /data</code>：MinIO 服务的启动命令，指定 <code>/data</code> 为数据存储位置。</li>\n</ul>\n</li>\n<li><code>--console-address :9090 --address :9000</code>：<ul>\n<li><code>--console-address :9090</code>：设置 MinIO 控制台的监听地址和端口。</li>\n<li><code>--address :9000</code>：设置 MinIO 服务的监听地址和端口。</li>\n</ul>\n</li>\n</ol>\n<p>整个命令的作用是在 Docker 中运行一个名为 <code>minio</code> 的容器，配置了环境变量、端口映射和卷挂载，并设定了服务及控制台的监听端口，用于提供一个持久化的分布式对象存储服务。</p>\n<h2 id=\"Docker安装MinIO-Client-mc\"><a href=\"#Docker安装MinIO-Client-mc\" class=\"headerlink\" title=\"Docker安装MinIO Client (mc)\"></a>Docker安装MinIO Client (<code>mc</code>)</h2><h3 id=\"1-拉取-mc-Docker-镜像\"><a href=\"#1-拉取-mc-Docker-镜像\" class=\"headerlink\" title=\"1. 拉取 mc Docker 镜像\"></a>1. 拉取 <code>mc</code> Docker 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull minio/mc</span><br></pre></td></tr></table></figure>\n\n<p>这个命令从 Docker Hub 上拉取最新的 MinIO Client (<code>mc</code>) 镜像。这样可以确保你使用的是最新版的客户端。</p>\n<h3 id=\"2-通过-Docker-运行-mc-并进入其-Shell\"><a href=\"#2-通过-Docker-运行-mc-并进入其-Shell\" class=\"headerlink\" title=\"2. 通过 Docker 运行 mc 并进入其 Shell\"></a>2. 通过 Docker 运行 <code>mc</code> 并进入其 Shell</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --entrypoint=/bin/sh minio/mc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-配置-MinIO-客户端\"><a href=\"#3-配置-MinIO-客户端\" class=\"headerlink\" title=\"3. 配置 MinIO 客户端\"></a>3. 配置 MinIO 客户端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc config host add &lt;ALIAS&gt; &lt;YOUR-S3-ENDPOINT&gt; &lt;YOUR-ACCESS-KEY&gt; &lt;YOUR-SECRET-KEY&gt; [--api API-SIGNATURE]</span><br></pre></td></tr></table></figure>\n\n<p>这个命令用于配置 <code>mc</code>，使其可以连接到一个特定的 MinIO 服务或兼容 S3 的存储服务。</p>\n<ul>\n<li><code>&lt;ALIAS&gt;</code> 是你为这个存储服务定义的简称。</li>\n<li><code>&lt;YOUR-S3-ENDPOINT&gt;</code> 是服务的访问 URL。</li>\n<li><code>&lt;YOUR-ACCESS-KEY&gt;</code> 和 <code>&lt;YOUR-SECRET-KEY&gt;</code> 是你的访问密钥和密钥密码，用于身份验证。</li>\n<li><code>[--api API-SIGNATURE]</code> 是可选的，用于指定 API 签名类型，通常是 <code>S3v4</code>。</li>\n</ul>\n<h3 id=\"4-添加特定的-MinIO-服务配置\"><a href=\"#4-添加特定的-MinIO-服务配置\" class=\"headerlink\" title=\"4. 添加特定的 MinIO 服务配置\"></a>4. 添加特定的 MinIO 服务配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc config host add minio http://47.113.216.154:9000 admin ********</span><br></pre></td></tr></table></figure>\n\n<p>这个命令添加一个名为 <code>minio</code> 的 MinIO 服务配置，使用的是 IP 地址 <code>117.72.14.166</code> 和端口 <code>9000</code>，以及提供的访问密钥和密钥密码。</p>\n<h3 id=\"5-列出存储桶创建名qyj的储存桶\"><a href=\"#5-列出存储桶创建名qyj的储存桶\" class=\"headerlink\" title=\"5. 列出存储桶创建名qyj的储存桶\"></a>5. 列出存储桶创建名<code>qyj</code>的储存桶</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc ls minio</span><br><span class=\"line\">mc mb minio/qyj</span><br></pre></td></tr></table></figure>\n\n<p>这个命令列出与别名 <code>minio</code> 相关联的存储服务中的所有存储桶。</p>\n<h3 id=\"6-启用匿名访问模式\"><a href=\"#6-启用匿名访问模式\" class=\"headerlink\" title=\"6. 启用匿名访问模式\"></a>6. 启用匿名访问模式</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc anonymous</span><br></pre></td></tr></table></figure>\n\n<p>这个命令启动 <code>mc</code> 的匿名访问模式，允许用户在没有提供 API 密钥的情况下执行操作。</p>\n<h3 id=\"7-设置匿名下载权限\"><a href=\"#7-设置匿名下载权限\" class=\"headerlink\" title=\"7. 设置匿名下载权限\"></a>7. 设置匿名下载权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc anonymous set download minio/qyj</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>MinIO 是一个高性能的分布式对象存储服务，它可以用于存储大量非结构化数据，如照片、视频、日志文件等。通过 Docker 安装和运行 MinIO 是一种快速且方便的方法。下面是在 Docker 上安装和运行 MinIO 的步骤：</p>\n<h2 id=\"Docker安装minio\"><a href=\"#Docker安装minio\" class=\"headerlink\" title=\"Docker安装minio\"></a>Docker安装minio</h2><h3 id=\"1-拉取-MinIO-Docker-镜像\"><a href=\"#1-拉取-MinIO-Docker-镜像\" class=\"headerlink\" title=\"1. 拉取 MinIO Docker 镜像\"></a>1. 拉取 MinIO Docker 镜像</h3><p>首先，你需要从 Docker Hub 拉取最新的 MinIO 镜像。在你的终端中运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull minio/minio</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-启动minio容器\"><a href=\"#2-启动minio容器\" class=\"headerlink\" title=\"2.启动minio容器\"></a>2.启动minio容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\"> --name minio \\</span><br><span class=\"line\"> --cgroupns host \\</span><br><span class=\"line\"> --env MINIO_ROOT_USER=admin \\</span><br><span class=\"line\"> --env MINIO_ROOT_PASSWORD=******** \\</span><br><span class=\"line\"> -p 9000:9000/tcp \\</span><br><span class=\"line\"> -p 9090:9090/tcp \\</span><br><span class=\"line\"> --restart=always \\</span><br><span class=\"line\"> -v /mydata/minio/data:/data \\</span><br><span class=\"line\"> minio/minio server /data --console-address :9090 --address :9000 </span><br></pre></td></tr></table></figure>\n\n<p> Docker 运行 MinIO 服务，一个高性能的分布式对象存储服务，常用于存储大规模的非结构化数据。下面我将详细解释这个命令的各个部分：</p>\n<ol>\n<li><code>docker run -d</code>：<ul>\n<li><code>docker run</code>：告诉 Docker 运行一个新的容器。</li>\n<li><code>-d</code>：代表后台运行，让容器在后台执行。</li>\n</ul>\n</li>\n<li><code>--name minio</code>：<ul>\n<li><code>--name</code>：设置容器的名称，这里名称被设为 <code>minio</code>。</li>\n</ul>\n</li>\n<li><code>--cgroupns host</code>：<ul>\n<li><code>--cgroupns</code>：指定容器使用的 cgroup 命名空间类型。这里使用的是 <code>host</code>，意味着容器将使用宿主机的 cgroup 命名空间，而不是创建新的。</li>\n</ul>\n</li>\n<li><code>--env MINIO_ROOT_USER=admin</code> 和 <code>--env MINIO_ROOT_PASSWORD=********</code>：<ul>\n<li><code>--env</code>：设置环境变量。</li>\n<li><code>MINIO_ROOT_USER</code> 和 <code>MINIO_ROOT_PASSWORD</code>：分别设置 MinIO 服务的根用户名称和密码。</li>\n</ul>\n</li>\n<li><code>-p 9000:9000/tcp</code> 和 <code>-p 9090:9090/tcp</code>：<ul>\n<li><code>-p</code>：端口映射，格式为 <code>宿主机端口:容器端口/tcp</code>。</li>\n<li><code>9000:9000/tcp</code>：将容器的 9000 端口映射到宿主机的 9000 端口，MinIO 的主服务通常在此端口运行。</li>\n<li><code>9090:9090/tcp</code>：将容器的 9090 端口映射到宿主机的 9090 端口，MinIO 的管理控制台通常在此端口运行。</li>\n</ul>\n</li>\n<li><code>--restart=always</code>：<ul>\n<li><code>--restart</code>：设置容器的重启策略。<code>always</code> 意味着无论容器的退出状态如何，只要 Docker 守护进程被重新启动，容器也将被重新启动。</li>\n</ul>\n</li>\n<li><code>-v /mydata/minio/data:/data</code>：<ul>\n<li><code>-v</code>：挂载卷，格式为 <code>宿主机路径:容器内路径</code>。</li>\n<li><code>/mydata/minio/data:/data</code>：将宿主机的 <code>/mydata/minio/data</code> 目录挂载到容器内的 <code>/data</code> 目录，用于数据持久化。</li>\n</ul>\n</li>\n<li><code>minio/minio server /data</code>：<ul>\n<li><code>minio/minio</code>：Docker 镜像名称，表示使用 MinIO 的官方 Docker 镜像。</li>\n<li><code>server /data</code>：MinIO 服务的启动命令，指定 <code>/data</code> 为数据存储位置。</li>\n</ul>\n</li>\n<li><code>--console-address :9090 --address :9000</code>：<ul>\n<li><code>--console-address :9090</code>：设置 MinIO 控制台的监听地址和端口。</li>\n<li><code>--address :9000</code>：设置 MinIO 服务的监听地址和端口。</li>\n</ul>\n</li>\n</ol>\n<p>整个命令的作用是在 Docker 中运行一个名为 <code>minio</code> 的容器，配置了环境变量、端口映射和卷挂载，并设定了服务及控制台的监听端口，用于提供一个持久化的分布式对象存储服务。</p>\n<h2 id=\"Docker安装MinIO-Client-mc\"><a href=\"#Docker安装MinIO-Client-mc\" class=\"headerlink\" title=\"Docker安装MinIO Client (mc)\"></a>Docker安装MinIO Client (<code>mc</code>)</h2><h3 id=\"1-拉取-mc-Docker-镜像\"><a href=\"#1-拉取-mc-Docker-镜像\" class=\"headerlink\" title=\"1. 拉取 mc Docker 镜像\"></a>1. 拉取 <code>mc</code> Docker 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull minio/mc</span><br></pre></td></tr></table></figure>\n\n<p>这个命令从 Docker Hub 上拉取最新的 MinIO Client (<code>mc</code>) 镜像。这样可以确保你使用的是最新版的客户端。</p>\n<h3 id=\"2-通过-Docker-运行-mc-并进入其-Shell\"><a href=\"#2-通过-Docker-运行-mc-并进入其-Shell\" class=\"headerlink\" title=\"2. 通过 Docker 运行 mc 并进入其 Shell\"></a>2. 通过 Docker 运行 <code>mc</code> 并进入其 Shell</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --entrypoint=/bin/sh minio/mc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-配置-MinIO-客户端\"><a href=\"#3-配置-MinIO-客户端\" class=\"headerlink\" title=\"3. 配置 MinIO 客户端\"></a>3. 配置 MinIO 客户端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc config host add &lt;ALIAS&gt; &lt;YOUR-S3-ENDPOINT&gt; &lt;YOUR-ACCESS-KEY&gt; &lt;YOUR-SECRET-KEY&gt; [--api API-SIGNATURE]</span><br></pre></td></tr></table></figure>\n\n<p>这个命令用于配置 <code>mc</code>，使其可以连接到一个特定的 MinIO 服务或兼容 S3 的存储服务。</p>\n<ul>\n<li><code>&lt;ALIAS&gt;</code> 是你为这个存储服务定义的简称。</li>\n<li><code>&lt;YOUR-S3-ENDPOINT&gt;</code> 是服务的访问 URL。</li>\n<li><code>&lt;YOUR-ACCESS-KEY&gt;</code> 和 <code>&lt;YOUR-SECRET-KEY&gt;</code> 是你的访问密钥和密钥密码，用于身份验证。</li>\n<li><code>[--api API-SIGNATURE]</code> 是可选的，用于指定 API 签名类型，通常是 <code>S3v4</code>。</li>\n</ul>\n<h3 id=\"4-添加特定的-MinIO-服务配置\"><a href=\"#4-添加特定的-MinIO-服务配置\" class=\"headerlink\" title=\"4. 添加特定的 MinIO 服务配置\"></a>4. 添加特定的 MinIO 服务配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc config host add minio http://47.113.216.154:9000 admin ********</span><br></pre></td></tr></table></figure>\n\n<p>这个命令添加一个名为 <code>minio</code> 的 MinIO 服务配置，使用的是 IP 地址 <code>117.72.14.166</code> 和端口 <code>9000</code>，以及提供的访问密钥和密钥密码。</p>\n<h3 id=\"5-列出存储桶创建名qyj的储存桶\"><a href=\"#5-列出存储桶创建名qyj的储存桶\" class=\"headerlink\" title=\"5. 列出存储桶创建名qyj的储存桶\"></a>5. 列出存储桶创建名<code>qyj</code>的储存桶</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc ls minio</span><br><span class=\"line\">mc mb minio/qyj</span><br></pre></td></tr></table></figure>\n\n<p>这个命令列出与别名 <code>minio</code> 相关联的存储服务中的所有存储桶。</p>\n<h3 id=\"6-启用匿名访问模式\"><a href=\"#6-启用匿名访问模式\" class=\"headerlink\" title=\"6. 启用匿名访问模式\"></a>6. 启用匿名访问模式</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc anonymous</span><br></pre></td></tr></table></figure>\n\n<p>这个命令启动 <code>mc</code> 的匿名访问模式，允许用户在没有提供 API 密钥的情况下执行操作。</p>\n<h3 id=\"7-设置匿名下载权限\"><a href=\"#7-设置匿名下载权限\" class=\"headerlink\" title=\"7. 设置匿名下载权限\"></a>7. 设置匿名下载权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc anonymous set download minio/qyj</span><br></pre></td></tr></table></figure>"},{"title":"Nginx和Certbot安装和minio的域名映射","date":"2024-06-12T09:33:50.000Z","_content":"\n### Nginx和Certbot安装和minio的域名映射\n\n### 步骤1: 更新软件包列表\n\n首先，打开终端并更新Ubuntu的软件包列表以确保安装最新版本的软件。运行以下命令：\n\n```shell\nsudo apt update\n```\n\n### 步骤2: 安装Nginx\n\n使用`apt`命令安装Nginx：\n\n```shell\nsudo apt install nginx\n```\n\n### 步骤3: 安装 Certbot\n\n对于大多数 Linux 发行版，如 Ubuntu，你可以使用以下命令安装 Certbot：\n\n```shell\nsudo apt-get install certbot\nsudo apt-get install python3-certbot-nginx\n```\n\n### 步骤4: 使用 Certbot 获取和安装证书\n\n对于 Nginx：\n\n```shell\nsudo certbot --nginx -d minio.qinyunjian.cloud\n```\n\n### 步骤5：编辑配置，路径：/etc/nginx/conf.d\n\n```shell\nserver {\n    listen 443 ssl;\n    server_name minio.qinyunjian.cloud;\n\n    ssl_certificate /etc/letsencrypt/live/minio.qinyunjian.cloud/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/minio.qinyunjian.cloud/privkey.pem;\n\n    location / {\n        proxy_pass http://localhost:9090;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### 步骤6：\n\n1. **保存配置文件**：保存Nginx 配置文件。\n\n   ```shell\n   sudo nano /etc/nginx/conf.d/minio.qinyunjian.cloud.conf\n   ```\n\n2. **检查配置并重启 Nginx**：在保存修改后，再次运行  来验证配置文件是否正确。`nginx -t`\n\n   ```shell\n   sudo nginx -t\n   ```\n\n   如果输出显示“test is successful”，则表示配置文件没有语法错误。 然后，你可以安全地重启 Nginx：\n\n   ```shell\n   sudo systemctl restart nginx\n   ```","source":"_posts/ubuntu-Nginx和Certbot安装和minio的域名映射.md","raw":"---\ntitle: Nginx和Certbot安装和minio的域名映射\ndate: 2024-06-12 17:33:50\ntags: ubuntu\n---\n\n### Nginx和Certbot安装和minio的域名映射\n\n### 步骤1: 更新软件包列表\n\n首先，打开终端并更新Ubuntu的软件包列表以确保安装最新版本的软件。运行以下命令：\n\n```shell\nsudo apt update\n```\n\n### 步骤2: 安装Nginx\n\n使用`apt`命令安装Nginx：\n\n```shell\nsudo apt install nginx\n```\n\n### 步骤3: 安装 Certbot\n\n对于大多数 Linux 发行版，如 Ubuntu，你可以使用以下命令安装 Certbot：\n\n```shell\nsudo apt-get install certbot\nsudo apt-get install python3-certbot-nginx\n```\n\n### 步骤4: 使用 Certbot 获取和安装证书\n\n对于 Nginx：\n\n```shell\nsudo certbot --nginx -d minio.qinyunjian.cloud\n```\n\n### 步骤5：编辑配置，路径：/etc/nginx/conf.d\n\n```shell\nserver {\n    listen 443 ssl;\n    server_name minio.qinyunjian.cloud;\n\n    ssl_certificate /etc/letsencrypt/live/minio.qinyunjian.cloud/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/minio.qinyunjian.cloud/privkey.pem;\n\n    location / {\n        proxy_pass http://localhost:9090;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### 步骤6：\n\n1. **保存配置文件**：保存Nginx 配置文件。\n\n   ```shell\n   sudo nano /etc/nginx/conf.d/minio.qinyunjian.cloud.conf\n   ```\n\n2. **检查配置并重启 Nginx**：在保存修改后，再次运行  来验证配置文件是否正确。`nginx -t`\n\n   ```shell\n   sudo nginx -t\n   ```\n\n   如果输出显示“test is successful”，则表示配置文件没有语法错误。 然后，你可以安全地重启 Nginx：\n\n   ```shell\n   sudo systemctl restart nginx\n   ```","slug":"ubuntu-Nginx和Certbot安装和minio的域名映射","published":1,"updated":"2024-07-10T12:13:41.444Z","_id":"clxbmxg740001lotlh18s04yp","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"Nginx和Certbot安装和minio的域名映射\"><a href=\"#Nginx和Certbot安装和minio的域名映射\" class=\"headerlink\" title=\"Nginx和Certbot安装和minio的域名映射\"></a>Nginx和Certbot安装和minio的域名映射</h3><h3 id=\"步骤1-更新软件包列表\"><a href=\"#步骤1-更新软件包列表\" class=\"headerlink\" title=\"步骤1: 更新软件包列表\"></a>步骤1: 更新软件包列表</h3><p>首先，打开终端并更新Ubuntu的软件包列表以确保安装最新版本的软件。运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤2-安装Nginx\"><a href=\"#步骤2-安装Nginx\" class=\"headerlink\" title=\"步骤2: 安装Nginx\"></a>步骤2: 安装Nginx</h3><p>使用<code>apt</code>命令安装Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤3-安装-Certbot\"><a href=\"#步骤3-安装-Certbot\" class=\"headerlink\" title=\"步骤3: 安装 Certbot\"></a>步骤3: 安装 Certbot</h3><p>对于大多数 Linux 发行版，如 Ubuntu，你可以使用以下命令安装 Certbot：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install certbot</span><br><span class=\"line\">sudo apt-get install python3-certbot-nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤4-使用-Certbot-获取和安装证书\"><a href=\"#步骤4-使用-Certbot-获取和安装证书\" class=\"headerlink\" title=\"步骤4: 使用 Certbot 获取和安装证书\"></a>步骤4: 使用 Certbot 获取和安装证书</h3><p>对于 Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d minio.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤5：编辑配置，路径：-etc-nginx-conf-d\"><a href=\"#步骤5：编辑配置，路径：-etc-nginx-conf-d\" class=\"headerlink\" title=\"步骤5：编辑配置，路径：&#x2F;etc&#x2F;nginx&#x2F;conf.d\"></a>步骤5：编辑配置，路径：&#x2F;etc&#x2F;nginx&#x2F;conf.d</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name minio.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/minio.qinyunjian.cloud/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/minio.qinyunjian.cloud/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:9090;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤6：\"><a href=\"#步骤6：\" class=\"headerlink\" title=\"步骤6：\"></a>步骤6：</h3><ol>\n<li><p><strong>保存配置文件</strong>：保存Nginx 配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/nginx/conf.d/minio.qinyunjian.cloud.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>检查配置并重启 Nginx</strong>：在保存修改后，再次运行  来验证配置文件是否正确。<code>nginx -t</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果输出显示“test is successful”，则表示配置文件没有语法错误。 然后，你可以安全地重启 Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h3 id=\"Nginx和Certbot安装和minio的域名映射\"><a href=\"#Nginx和Certbot安装和minio的域名映射\" class=\"headerlink\" title=\"Nginx和Certbot安装和minio的域名映射\"></a>Nginx和Certbot安装和minio的域名映射</h3><h3 id=\"步骤1-更新软件包列表\"><a href=\"#步骤1-更新软件包列表\" class=\"headerlink\" title=\"步骤1: 更新软件包列表\"></a>步骤1: 更新软件包列表</h3><p>首先，打开终端并更新Ubuntu的软件包列表以确保安装最新版本的软件。运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤2-安装Nginx\"><a href=\"#步骤2-安装Nginx\" class=\"headerlink\" title=\"步骤2: 安装Nginx\"></a>步骤2: 安装Nginx</h3><p>使用<code>apt</code>命令安装Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤3-安装-Certbot\"><a href=\"#步骤3-安装-Certbot\" class=\"headerlink\" title=\"步骤3: 安装 Certbot\"></a>步骤3: 安装 Certbot</h3><p>对于大多数 Linux 发行版，如 Ubuntu，你可以使用以下命令安装 Certbot：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install certbot</span><br><span class=\"line\">sudo apt-get install python3-certbot-nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤4-使用-Certbot-获取和安装证书\"><a href=\"#步骤4-使用-Certbot-获取和安装证书\" class=\"headerlink\" title=\"步骤4: 使用 Certbot 获取和安装证书\"></a>步骤4: 使用 Certbot 获取和安装证书</h3><p>对于 Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d minio.qinyunjian.cloud</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤5：编辑配置，路径：-etc-nginx-conf-d\"><a href=\"#步骤5：编辑配置，路径：-etc-nginx-conf-d\" class=\"headerlink\" title=\"步骤5：编辑配置，路径：&#x2F;etc&#x2F;nginx&#x2F;conf.d\"></a>步骤5：编辑配置，路径：&#x2F;etc&#x2F;nginx&#x2F;conf.d</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name minio.qinyunjian.cloud;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/minio.qinyunjian.cloud/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/minio.qinyunjian.cloud/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:9090;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤6：\"><a href=\"#步骤6：\" class=\"headerlink\" title=\"步骤6：\"></a>步骤6：</h3><ol>\n<li><p><strong>保存配置文件</strong>：保存Nginx 配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/nginx/conf.d/minio.qinyunjian.cloud.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>检查配置并重启 Nginx</strong>：在保存修改后，再次运行  来验证配置文件是否正确。<code>nginx -t</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果输出显示“test is successful”，则表示配置文件没有语法错误。 然后，你可以安全地重启 Nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Ubuntu安装docker","date":"2024-06-12T09:33:50.000Z","_content":"\n安装 Docker 时使用阿里云的镜像源可以加快下载速度。以下是在 Ubuntu 系统上安装 Docker 的步骤，使用阿里云提供的公共镜像源：\n\n### 1. 更新软件包索引\n\n打开你的终端，并执行以下命令以更新你的软件包索引：\n\n```sh\nsudo apt-get update\n```\n\n### 2. 安装 HTTPS 支持和证书\n\n首先需要安装软件包，以确保可以通过 HTTPS 安全地下载软件包。可以使用以下命令来安装必要的依赖：\n\n```sh\nsudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n```\n\n### 3. 添加 Docker 的官方 GPG 密钥\n\n为了确保下载的 Docker 软件包的真实性，需要导入 Docker 的官方 GPG 密钥。使用阿里云的镜像服务器来替代 Docker 的官方密钥服务器，可以加快这一过程：\n\n```sh\ncurl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n### 4. 设置 Docker 稳定版仓库\n\n要使用阿里云的 Docker 仓库地址设置 APT 源，执行以下命令来添加阿里云的 Docker 稳定版仓库：\n\n```sh\nsudo add-apt-repository \"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n### 5. 安装 Docker Engine\n\n现在，更新 apt 索引，并安装 Docker Engine 和 containerd：\n\n```sh\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n### 6. 验证 Docker 是否安装成功\n\n安装完成后，启动 Docker 并运行 `hello-world` 镜像来验证是否正确安装：\n\n```sh\nsudo systemctl start docker\nsudo docker run hello-world\n```\n\n如果看到返回消息，说明 Docker 已经正确安装并运行。\n\n### 7. 配置 Docker Hub\n\n为了进一步提高镜像拉取速度，可以配置 Docker 使用阿里云的镜像加速器：\n\n1. 创建或编辑 `/etc/docker/daemon.json`：\n\n   ```sh\n   sudo nano /inc/docker/daemon.json\n   ```\n\n2. 添加以下内容（替换 `<你的阿里云加速器地址>` 为你实际的加速器地址）：\n\n   ```json\n   {\n     \"registry-mirrors\": [\n       \"https://docker.m.daocloud.io\",\n       \"https://docker.nju.edu.cn\",\n       \"https://hub-mirror.c.163.com\",\n       \"https://mirror.baidubce.com\",\n       \"https://2e63y970.mirror.aliyuncs.com\"\n     ]\n   }\n   \n   ```\n\n3. 保存并关闭文件，然后重启 Docker 服务：\n\n   ```sh\n   sudo systemctl daemon-reload\n   sudo systemctl restart docker\n   ```\n\n默认情况下，只有 root 或者 有 sudo 权限的用户可以执行 Docker 命令。想要以非 root 用户执行 Docker 命令，你需要将你的用户添加到 Docker 用户组，该用户组在 Docker CE 软件包安装过程中被创建。想要这么做，输入：\n\n```shell\nsudo usermod -aG docker $USER\n```\n\n`$USER`是一个环境变量，代表当前用户名。","source":"_posts/ubuntu-安装docker.md","raw":"---\ntitle: Ubuntu安装docker\ndate: 2024-06-12 17:33:50\ntags: ubuntu\n---\n\n安装 Docker 时使用阿里云的镜像源可以加快下载速度。以下是在 Ubuntu 系统上安装 Docker 的步骤，使用阿里云提供的公共镜像源：\n\n### 1. 更新软件包索引\n\n打开你的终端，并执行以下命令以更新你的软件包索引：\n\n```sh\nsudo apt-get update\n```\n\n### 2. 安装 HTTPS 支持和证书\n\n首先需要安装软件包，以确保可以通过 HTTPS 安全地下载软件包。可以使用以下命令来安装必要的依赖：\n\n```sh\nsudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n```\n\n### 3. 添加 Docker 的官方 GPG 密钥\n\n为了确保下载的 Docker 软件包的真实性，需要导入 Docker 的官方 GPG 密钥。使用阿里云的镜像服务器来替代 Docker 的官方密钥服务器，可以加快这一过程：\n\n```sh\ncurl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n### 4. 设置 Docker 稳定版仓库\n\n要使用阿里云的 Docker 仓库地址设置 APT 源，执行以下命令来添加阿里云的 Docker 稳定版仓库：\n\n```sh\nsudo add-apt-repository \"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n### 5. 安装 Docker Engine\n\n现在，更新 apt 索引，并安装 Docker Engine 和 containerd：\n\n```sh\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n### 6. 验证 Docker 是否安装成功\n\n安装完成后，启动 Docker 并运行 `hello-world` 镜像来验证是否正确安装：\n\n```sh\nsudo systemctl start docker\nsudo docker run hello-world\n```\n\n如果看到返回消息，说明 Docker 已经正确安装并运行。\n\n### 7. 配置 Docker Hub\n\n为了进一步提高镜像拉取速度，可以配置 Docker 使用阿里云的镜像加速器：\n\n1. 创建或编辑 `/etc/docker/daemon.json`：\n\n   ```sh\n   sudo nano /inc/docker/daemon.json\n   ```\n\n2. 添加以下内容（替换 `<你的阿里云加速器地址>` 为你实际的加速器地址）：\n\n   ```json\n   {\n     \"registry-mirrors\": [\n       \"https://docker.m.daocloud.io\",\n       \"https://docker.nju.edu.cn\",\n       \"https://hub-mirror.c.163.com\",\n       \"https://mirror.baidubce.com\",\n       \"https://2e63y970.mirror.aliyuncs.com\"\n     ]\n   }\n   \n   ```\n\n3. 保存并关闭文件，然后重启 Docker 服务：\n\n   ```sh\n   sudo systemctl daemon-reload\n   sudo systemctl restart docker\n   ```\n\n默认情况下，只有 root 或者 有 sudo 权限的用户可以执行 Docker 命令。想要以非 root 用户执行 Docker 命令，你需要将你的用户添加到 Docker 用户组，该用户组在 Docker CE 软件包安装过程中被创建。想要这么做，输入：\n\n```shell\nsudo usermod -aG docker $USER\n```\n\n`$USER`是一个环境变量，代表当前用户名。","slug":"ubuntu-安装docker","published":1,"updated":"2024-07-10T12:13:38.191Z","_id":"clxbmxg770002lotl81dffcfq","comments":1,"layout":"post","photos":[],"content":"<p>安装 Docker 时使用阿里云的镜像源可以加快下载速度。以下是在 Ubuntu 系统上安装 Docker 的步骤，使用阿里云提供的公共镜像源：</p>\n<h3 id=\"1-更新软件包索引\"><a href=\"#1-更新软件包索引\" class=\"headerlink\" title=\"1. 更新软件包索引\"></a>1. 更新软件包索引</h3><p>打开你的终端，并执行以下命令以更新你的软件包索引：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装-HTTPS-支持和证书\"><a href=\"#2-安装-HTTPS-支持和证书\" class=\"headerlink\" title=\"2. 安装 HTTPS 支持和证书\"></a>2. 安装 HTTPS 支持和证书</h3><p>首先需要安装软件包，以确保可以通过 HTTPS 安全地下载软件包。可以使用以下命令来安装必要的依赖：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-添加-Docker-的官方-GPG-密钥\"><a href=\"#3-添加-Docker-的官方-GPG-密钥\" class=\"headerlink\" title=\"3. 添加 Docker 的官方 GPG 密钥\"></a>3. 添加 Docker 的官方 GPG 密钥</h3><p>为了确保下载的 Docker 软件包的真实性，需要导入 Docker 的官方 GPG 密钥。使用阿里云的镜像服务器来替代 Docker 的官方密钥服务器，可以加快这一过程：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-设置-Docker-稳定版仓库\"><a href=\"#4-设置-Docker-稳定版仓库\" class=\"headerlink\" title=\"4. 设置 Docker 稳定版仓库\"></a>4. 设置 Docker 稳定版仓库</h3><p>要使用阿里云的 Docker 仓库地址设置 APT 源，执行以下命令来添加阿里云的 Docker 稳定版仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository <span class=\"string\">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-安装-Docker-Engine\"><a href=\"#5-安装-Docker-Engine\" class=\"headerlink\" title=\"5. 安装 Docker Engine\"></a>5. 安装 Docker Engine</h3><p>现在，更新 apt 索引，并安装 Docker Engine 和 containerd：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-验证-Docker-是否安装成功\"><a href=\"#6-验证-Docker-是否安装成功\" class=\"headerlink\" title=\"6. 验证 Docker 是否安装成功\"></a>6. 验证 Docker 是否安装成功</h3><p>安装完成后，启动 Docker 并运行 <code>hello-world</code> 镜像来验证是否正确安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>如果看到返回消息，说明 Docker 已经正确安装并运行。</p>\n<h3 id=\"7-配置-Docker-Hub\"><a href=\"#7-配置-Docker-Hub\" class=\"headerlink\" title=\"7. 配置 Docker Hub\"></a>7. 配置 Docker Hub</h3><p>为了进一步提高镜像拉取速度，可以配置 Docker 使用阿里云的镜像加速器：</p>\n<ol>\n<li><p>创建或编辑 <code>/etc/docker/daemon.json</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /inc/docker/daemon.json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加以下内容（替换 <code>&lt;你的阿里云加速器地址&gt;</code> 为你实际的加速器地址）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.m.daocloud.io&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.nju.edu.cn&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://hub-mirror.c.163.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://mirror.baidubce.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://2e63y970.mirror.aliyuncs.com&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存并关闭文件，然后重启 Docker 服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>默认情况下，只有 root 或者 有 sudo 权限的用户可以执行 Docker 命令。想要以非 root 用户执行 Docker 命令，你需要将你的用户添加到 Docker 用户组，该用户组在 Docker CE 软件包安装过程中被创建。想要这么做，输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>\n\n<p><code>$USER</code>是一个环境变量，代表当前用户名。</p>\n","excerpt":"","more":"<p>安装 Docker 时使用阿里云的镜像源可以加快下载速度。以下是在 Ubuntu 系统上安装 Docker 的步骤，使用阿里云提供的公共镜像源：</p>\n<h3 id=\"1-更新软件包索引\"><a href=\"#1-更新软件包索引\" class=\"headerlink\" title=\"1. 更新软件包索引\"></a>1. 更新软件包索引</h3><p>打开你的终端，并执行以下命令以更新你的软件包索引：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装-HTTPS-支持和证书\"><a href=\"#2-安装-HTTPS-支持和证书\" class=\"headerlink\" title=\"2. 安装 HTTPS 支持和证书\"></a>2. 安装 HTTPS 支持和证书</h3><p>首先需要安装软件包，以确保可以通过 HTTPS 安全地下载软件包。可以使用以下命令来安装必要的依赖：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-添加-Docker-的官方-GPG-密钥\"><a href=\"#3-添加-Docker-的官方-GPG-密钥\" class=\"headerlink\" title=\"3. 添加 Docker 的官方 GPG 密钥\"></a>3. 添加 Docker 的官方 GPG 密钥</h3><p>为了确保下载的 Docker 软件包的真实性，需要导入 Docker 的官方 GPG 密钥。使用阿里云的镜像服务器来替代 Docker 的官方密钥服务器，可以加快这一过程：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-设置-Docker-稳定版仓库\"><a href=\"#4-设置-Docker-稳定版仓库\" class=\"headerlink\" title=\"4. 设置 Docker 稳定版仓库\"></a>4. 设置 Docker 稳定版仓库</h3><p>要使用阿里云的 Docker 仓库地址设置 APT 源，执行以下命令来添加阿里云的 Docker 稳定版仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository <span class=\"string\">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-安装-Docker-Engine\"><a href=\"#5-安装-Docker-Engine\" class=\"headerlink\" title=\"5. 安装 Docker Engine\"></a>5. 安装 Docker Engine</h3><p>现在，更新 apt 索引，并安装 Docker Engine 和 containerd：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-验证-Docker-是否安装成功\"><a href=\"#6-验证-Docker-是否安装成功\" class=\"headerlink\" title=\"6. 验证 Docker 是否安装成功\"></a>6. 验证 Docker 是否安装成功</h3><p>安装完成后，启动 Docker 并运行 <code>hello-world</code> 镜像来验证是否正确安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>如果看到返回消息，说明 Docker 已经正确安装并运行。</p>\n<h3 id=\"7-配置-Docker-Hub\"><a href=\"#7-配置-Docker-Hub\" class=\"headerlink\" title=\"7. 配置 Docker Hub\"></a>7. 配置 Docker Hub</h3><p>为了进一步提高镜像拉取速度，可以配置 Docker 使用阿里云的镜像加速器：</p>\n<ol>\n<li><p>创建或编辑 <code>/etc/docker/daemon.json</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /inc/docker/daemon.json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加以下内容（替换 <code>&lt;你的阿里云加速器地址&gt;</code> 为你实际的加速器地址）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.m.daocloud.io&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.nju.edu.cn&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://hub-mirror.c.163.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://mirror.baidubce.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://2e63y970.mirror.aliyuncs.com&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存并关闭文件，然后重启 Docker 服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>默认情况下，只有 root 或者 有 sudo 权限的用户可以执行 Docker 命令。想要以非 root 用户执行 Docker 命令，你需要将你的用户添加到 Docker 用户组，该用户组在 Docker CE 软件包安装过程中被创建。想要这么做，输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>\n\n<p><code>$USER</code>是一个环境变量，代表当前用户名。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clx19s52m0003iotl9q5408l6","tag_id":"clyfsybl30000pcu451umb1fv","_id":"clyfsybl80002pcu48zvbaszw"},{"post_id":"clrm844iy000010tl9xu0c4a6","tag_id":"clyfsybl30000pcu451umb1fv","_id":"clyfsybl80003pcu41zzva2ws"},{"post_id":"clx19s52l0002iotlbaoi3yec","tag_id":"clyfsybl30000pcu451umb1fv","_id":"clyfsybl90005pcu4fobl3fvi"},{"post_id":"clx19s52i0001iotlgejk5hwk","tag_id":"clyfsybl30000pcu451umb1fv","_id":"clyfsybla0006pcu42e0mckgo"},{"post_id":"clx19s5280000iotlazeca229","tag_id":"clyfsybl30000pcu451umb1fv","_id":"clyfsybla0008pcu40afddm38"},{"post_id":"clx19s52n0004iotl8bnafz91","tag_id":"clyfsybla0007pcu4ftk9f552","_id":"clyfsyblb000apcu4bq1d5leh"},{"post_id":"clrm844j1000110tlfro33mdo","tag_id":"clyfsybla0007pcu4ftk9f552","_id":"clyfsyblc000bpcu44hgt89je"},{"post_id":"clx19s52o0005iotl1t143b39","tag_id":"clyfsybla0007pcu4ftk9f552","_id":"clyfsyblc000dpcu44zf0djln"},{"post_id":"clxbmxg740001lotlh18s04yp","tag_id":"clyfsyblb0009pcu4bzlf0nx2","_id":"clyfsyblc000epcu4ej8udpjr"},{"post_id":"clxbmxg700000lotl5k8e5oah","tag_id":"clyfsyblb0009pcu4bzlf0nx2","_id":"clyfsyblc000gpcu4bv98aa12"},{"post_id":"clxbmxg770002lotl81dffcfq","tag_id":"clyfsyblb0009pcu4bzlf0nx2","_id":"clyfsyblc000hpcu4hbihfhj5"}],"Tag":[{"name":"docker","_id":"clyfsybl30000pcu451umb1fv"},{"name":"nginx","_id":"clyfsybla0007pcu4ftk9f552"},{"name":"ubuntu","_id":"clyfsyblb0009pcu4bzlf0nx2"}]}}